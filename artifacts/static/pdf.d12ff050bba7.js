(()=>{var __webpack_modules__={9389:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: !0\n}));\n\nvar e = __webpack_require__(5466),\n    t = __webpack_require__(8395);\n\nfunction n(e) {\n  if (e && e.__esModule) return e;\n  var t = Object.create(null);\n  return e && Object.keys(e).forEach(function (n) {\n    if ("default" !== n) {\n      var r = Object.getOwnPropertyDescriptor(e, n);\n      Object.defineProperty(t, n, r.get ? r : {\n        enumerable: !0,\n        get: function () {\n          return e[n];\n        }\n      });\n    }\n  }), t.default = e, Object.freeze(t);\n}\n\nvar r,\n    o,\n    a,\n    i,\n    c,\n    s,\n    l = n(e),\n    p = n(t);\nexports.AnnotationType = void 0, (r = exports.AnnotationType || (exports.AnnotationType = {}))[r.Text = 1] = "Text", r[r.Link = 2] = "Link", r[r.FreeText = 3] = "FreeText", r[r.Line = 4] = "Line", r[r.Square = 5] = "Square", r[r.Circle = 6] = "Circle", r[r.Polygon = 7] = "Polygon", r[r.Polyline = 8] = "Polyline", r[r.Highlight = 9] = "Highlight", r[r.Underline = 10] = "Underline", r[r.Squiggly = 11] = "Squiggly", r[r.StrikeOut = 12] = "StrikeOut", r[r.Stamp = 13] = "Stamp", r[r.Caret = 14] = "Caret", r[r.Ink = 15] = "Ink", r[r.Popup = 16] = "Popup", r[r.FileAttachment = 17] = "FileAttachment", exports.LayerRenderStatus = void 0, (o = exports.LayerRenderStatus || (exports.LayerRenderStatus = {}))[o.PreRender = 0] = "PreRender", o[o.DidRender = 1] = "DidRender", exports.Position = void 0, (a = exports.Position || (exports.Position = {})).TopLeft = "TOP_LEFT", a.TopCenter = "TOP_CENTER", a.TopRight = "TOP_RIGHT", a.RightTop = "RIGHT_TOP", a.RightCenter = "RIGHT_CENTER", a.RightBottom = "RIGHT_BOTTOM", a.BottomLeft = "BOTTOM_LEFT", a.BottomCenter = "BOTTOM_CENTER", a.BottomRight = "BOTTOM_RIGHT", a.LeftTop = "LEFT_TOP", a.LeftCenter = "LEFT_CENTER", a.LeftBottom = "LEFT_BOTTOM", exports.SpecialZoomLevel = void 0, (i = exports.SpecialZoomLevel || (exports.SpecialZoomLevel = {})).ActualSize = "ActualSize", i.PageFit = "PageFit", i.PageWidth = "PageWidth", exports.ToggleStatus = void 0, (c = exports.ToggleStatus || (exports.ToggleStatus = {})).Close = "Close", c.Open = "Open", c.Toggle = "Toggle", exports.TextDirection = void 0, (s = exports.TextDirection || (exports.TextDirection = {})).RightToLeft = "RTL", s.LeftToRight = "LTR";\n\nvar u = l.createContext({\n  currentTheme: "light",\n  direction: exports.TextDirection.LeftToRight,\n  setCurrentTheme: function () {}\n}),\n    d = function (e) {\n  var t = [];\n  return Object.keys(e).forEach(function (n) {\n    n && e[n] && t.push(n);\n  }), t.join(" ");\n},\n    f = "undefined" != typeof window ? l.useLayoutEffect : l.useEffect,\n    v = function (e) {\n  var t = e.children,\n      n = e.ignoreDirection,\n      r = void 0 !== n && n,\n      o = e.size,\n      a = void 0 === o ? 24 : o,\n      i = l.useContext(u).direction,\n      c = !r && i === exports.TextDirection.RightToLeft,\n      s = (a || 24) + "px";\n  return l.createElement("svg", {\n    "aria-hidden": "true",\n    className: d({\n      "rpv-core__icon": !0,\n      "rpv-core__icon--rtl": c\n    }),\n    focusable: "false",\n    height: s,\n    viewBox: "0 0 24 24",\n    width: s\n  }, t);\n},\n    g = function () {\n  return l.createElement(v, {\n    size: 16\n  }, l.createElement("path", {\n    d: "M23.5,0.499l-16.5,23l-6.5-6.5"\n  }));\n},\n    m = function (e, t) {\n  return (m = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (e, t) {\n    e.__proto__ = t;\n  } || function (e, t) {\n    for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n]);\n  })(e, t);\n};\n\nfunction h(e, t) {\n  function n() {\n    this.constructor = e;\n  }\n\n  m(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n());\n}\n\nvar E = function () {\n  return (E = Object.assign || function (e) {\n    for (var t, n = 1, r = arguments.length; n < r; n++) for (var o in t = arguments[n]) Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);\n\n    return e;\n  }).apply(this, arguments);\n},\n    x = function (e) {\n  var t = e.children,\n      n = e.onClick,\n      r = l.useContext(u).direction === exports.TextDirection.RightToLeft;\n  return l.createElement("button", {\n    className: d({\n      "rpv-core__primary-button": !0,\n      "rpv-core__primary-button--rtl": r\n    }),\n    type: "button",\n    onClick: n\n  }, t);\n},\n    _ = function (e) {\n  var t = l.useRef(null),\n      n = e.threshold,\n      r = e.onVisibilityChanged;\n  return f(function () {\n    var e = new IntersectionObserver(function (e) {\n      e.forEach(function (e) {\n        var t = e.isIntersecting,\n            n = e.intersectionRatio;\n        r({\n          isVisible: t,\n          ratio: n\n        });\n      });\n    }, {\n      threshold: n || 0\n    }),\n        o = t.current;\n    if (o) return e.observe(o), function () {\n      e.unobserve(o);\n    };\n  }, []), t;\n},\n    y = function (e) {\n  var t = e.size,\n      n = void 0 === t ? "4rem" : t,\n      r = l.useState(!1),\n      o = r[0],\n      a = r[1],\n      i = _({\n    onVisibilityChanged: function (e) {\n      a(e.isVisible);\n    }\n  });\n\n  return l.createElement("div", {\n    className: d({\n      "rpv-core__spinner": !0,\n      "rpv-core__spinner--animating": o\n    }),\n    ref: i,\n    style: {\n      height: n,\n      width: n\n    }\n  });\n},\n    w = function (e) {\n  var t = e.ariaLabel,\n      n = void 0 === t ? "" : t,\n      r = e.autoFocus,\n      o = void 0 !== r && r,\n      a = e.placeholder,\n      i = void 0 === a ? "" : a,\n      c = e.testId,\n      s = e.type,\n      p = void 0 === s ? "text" : s,\n      f = e.value,\n      v = void 0 === f ? "" : f,\n      g = e.onChange,\n      m = e.onKeyDown,\n      h = void 0 === m ? function () {} : m,\n      x = l.useContext(u).direction === exports.TextDirection.RightToLeft,\n      _ = {\n    "aria-label": n,\n    autoFocus: o,\n    className: d({\n      "rpv-core__textbox": !0,\n      "rpv-core__textbox--rtl": x\n    }),\n    placeholder: i,\n    value: v,\n    onChange: function (e) {\n      return g(e.target.value);\n    },\n    onKeyDown: h\n  };\n  return c && (_["data-testid"] = c), "text" === p ? l.createElement("input", E({\n    type: "text"\n  }, _)) : l.createElement("input", E({\n    type: "password"\n  }, _));\n},\n    b = function (e, t, n) {\n  var r = function (e) {\n    var r = t.current;\n    r && !r.contains(e.target) && n();\n  };\n\n  l.useEffect(function () {\n    if (e) {\n      var t = {\n        capture: !0\n      };\n      return document.addEventListener("click", r, t), function () {\n        document.removeEventListener("click", r, t);\n      };\n    }\n  }, []);\n},\n    P = function (e) {\n  var t = function (t) {\n    "Escape" === t.key && e();\n  };\n\n  l.useEffect(function () {\n    return document.addEventListener("keyup", t), function () {\n      document.removeEventListener("keyup", t);\n    };\n  }, []);\n},\n    L = function (e) {\n  var t = e.ariaControlsSuffix,\n      n = e.children,\n      r = e.closeOnClickOutside,\n      o = e.closeOnEscape,\n      a = e.onToggle,\n      i = l.useRef(),\n      c = l.useContext(u).direction === exports.TextDirection.RightToLeft;\n  return l.useEffect(function () {\n    var e = window.getComputedStyle(document.body).overflow;\n    return document.body.style.overflow = "hidden", function () {\n      document.body.style.overflow = e;\n    };\n  }, []), P(function () {\n    i.current && o && a();\n  }), b(r, i, a), f(function () {\n    var e = i.current;\n\n    if (e) {\n      var t = .75 * document.body.clientHeight;\n      e.getBoundingClientRect().height >= t && (e.style.overflow = "auto", e.style.maxHeight = t + "px");\n    }\n  }, []), l.createElement("div", {\n    "aria-modal": "true",\n    className: d({\n      "rpv-core__modal-body": !0,\n      "rpv-core__modal-body--rtl": c\n    }),\n    id: "rpv-core__modal-body-" + t,\n    ref: i,\n    role: "dialog",\n    tabIndex: -1\n  }, n);\n},\n    R = function (e) {\n  var t = e.children;\n  return l.createElement("div", {\n    className: "rpv-core__modal-overlay"\n  }, t);\n},\n    T = function () {\n  var e = l.useState(!1),\n      t = e[0],\n      n = e[1];\n  return {\n    opened: t,\n    toggle: function (e) {\n      switch (e) {\n        case exports.ToggleStatus.Close:\n          n(!1);\n          break;\n\n        case exports.ToggleStatus.Open:\n          n(!0);\n          break;\n\n        case exports.ToggleStatus.Toggle:\n        default:\n          n(function (e) {\n            return !e;\n          });\n      }\n    }\n  };\n},\n    k = function (e) {\n  var t = e.content,\n      n = e.target,\n      r = T(),\n      o = r.opened,\n      a = r.toggle;\n  return l.createElement(l.Fragment, null, n(a, o), o && t(a));\n},\n    C = 0,\n    S = function () {\n  return C++;\n},\n    O = function (e, t, n, r, o) {\n  f(function () {\n    var a = t.current,\n        i = e.current,\n        c = n.current;\n\n    if (i && a && c) {\n      var s = c.getBoundingClientRect(),\n          l = function (e, t, n, r) {\n        var o = t.getBoundingClientRect(),\n            a = e.getBoundingClientRect(),\n            i = a.height,\n            c = a.width,\n            s = 0,\n            l = 0;\n\n        switch (n) {\n          case exports.Position.TopLeft:\n            s = o.top - i, l = o.left;\n            break;\n\n          case exports.Position.TopCenter:\n            s = o.top - i, l = o.left + o.width / 2 - c / 2;\n            break;\n\n          case exports.Position.TopRight:\n            s = o.top - i, l = o.left + o.width - c;\n            break;\n\n          case exports.Position.RightTop:\n            s = o.top, l = o.left + o.width;\n            break;\n\n          case exports.Position.RightCenter:\n            s = o.top + o.height / 2 - i / 2, l = o.left + o.width;\n            break;\n\n          case exports.Position.RightBottom:\n            s = o.top + o.height - i, l = o.left + o.width;\n            break;\n\n          case exports.Position.BottomLeft:\n            s = o.top + o.height, l = o.left;\n            break;\n\n          case exports.Position.BottomCenter:\n            s = o.top + o.height, l = o.left + o.width / 2 - c / 2;\n            break;\n\n          case exports.Position.BottomRight:\n            s = o.top + o.height, l = o.left + o.width - c;\n            break;\n\n          case exports.Position.LeftTop:\n            s = o.top, l = o.left - c;\n            break;\n\n          case exports.Position.LeftCenter:\n            s = o.top + o.height / 2 - i / 2, l = o.left - c;\n            break;\n\n          case exports.Position.LeftBottom:\n            s = o.top + o.height - i, l = o.left - c;\n        }\n\n        return {\n          left: l + (r.left || 0),\n          top: s + (r.top || 0)\n        };\n      }(i, a, r, o),\n          p = l.top,\n          u = l.left;\n\n      i.style.top = p - s.top + "px", i.style.left = u - s.left + "px";\n    }\n  }, []);\n},\n    A = function (e) {\n  var t,\n      n = e.customClassName,\n      r = e.position;\n  return l.createElement("div", {\n    className: d((t = {\n      "rpv-core__arrow": !0,\n      "rpv-core__arrow--tl": r === exports.Position.TopLeft,\n      "rpv-core__arrow--tc": r === exports.Position.TopCenter,\n      "rpv-core__arrow--tr": r === exports.Position.TopRight,\n      "rpv-core__arrow--rt": r === exports.Position.RightTop,\n      "rpv-core__arrow--rc": r === exports.Position.RightCenter,\n      "rpv-core__arrow--rb": r === exports.Position.RightBottom,\n      "rpv-core__arrow--bl": r === exports.Position.BottomLeft,\n      "rpv-core__arrow--bc": r === exports.Position.BottomCenter,\n      "rpv-core__arrow--br": r === exports.Position.BottomRight,\n      "rpv-core__arrow--lt": r === exports.Position.LeftTop,\n      "rpv-core__arrow--lc": r === exports.Position.LeftCenter,\n      "rpv-core__arrow--lb": r === exports.Position.LeftBottom\n    }, t["" + n] = "" !== n, t))\n  });\n},\n    M = function (e) {\n  var t = e.ariaControlsSuffix,\n      n = e.children,\n      r = e.closeOnClickOutside,\n      o = e.offset,\n      a = e.position,\n      i = e.targetRef,\n      c = e.onClose,\n      s = l.useRef(),\n      p = l.useRef(),\n      v = l.useRef(),\n      g = l.useContext(u).direction === exports.TextDirection.RightToLeft;\n  b(r, s, c), O(s, i, v, a, o), f(function () {\n    var e = p.current;\n\n    if (e) {\n      var t = .75 * document.body.clientHeight;\n      e.getBoundingClientRect().height >= t && (e.style.overflow = "auto", e.style.maxHeight = t + "px");\n    }\n  }, []);\n  var m = "rpv-core__popover-body-inner-" + t;\n  return l.createElement(l.Fragment, null, l.createElement("div", {\n    ref: v,\n    style: {\n      left: 0,\n      position: "absolute",\n      top: 0\n    }\n  }), l.createElement("div", {\n    "aria-describedby": m,\n    className: d({\n      "rpv-core__popover-body": !0,\n      "rpv-core__popover-body--rtl": g\n    }),\n    id: "rpv-core__popover-body-" + t,\n    ref: s,\n    role: "dialog",\n    tabIndex: -1\n  }, l.createElement(A, {\n    customClassName: "rpv-core__popover-body-arrow",\n    position: a\n  }), l.createElement("div", {\n    id: m,\n    ref: p\n  }, n)));\n},\n    D = function (e) {\n  var t = e.closeOnEscape,\n      n = e.onClose,\n      r = l.useRef();\n  return P(function () {\n    r.current && t && n();\n  }), l.createElement("div", {\n    className: "rpv-core__popover-overlay",\n    ref: r\n  });\n},\n    N = function (e) {\n  var t = e.ariaControlsSuffix,\n      n = e.children,\n      r = e.contentRef,\n      o = e.offset,\n      a = e.position,\n      i = e.targetRef,\n      c = l.useRef(),\n      s = l.useContext(u).direction === exports.TextDirection.RightToLeft;\n  return O(r, i, c, a, o), l.createElement(l.Fragment, null, l.createElement("div", {\n    ref: c,\n    style: {\n      left: 0,\n      position: "absolute",\n      top: 0\n    }\n  }), l.createElement("div", {\n    className: d({\n      "rpv-core__tooltip-body": !0,\n      "rpv-core__tooltip-body--rtl": s\n    }),\n    id: "rpv-core__tooltip-body-" + t,\n    ref: r,\n    role: "tooltip"\n  }, l.createElement(A, {\n    customClassName: "rpv-core__tooltip-body-arrow",\n    position: a\n  }), l.createElement("div", {\n    className: "rpv-core__tooltip-body-content"\n  }, n)));\n};\n\nvar H = {\n  core: {\n    askingPassword: {\n      requirePasswordToOpen: "This document requires a password to open",\n      submit: "Submit"\n    },\n    wrongPassword: {\n      tryAgain: "The password is wrong. Please try again"\n    },\n    pageLabel: "Page {{pageIndex}}"\n  }\n},\n    I = l.createContext({\n  l10n: H,\n  setL10n: function () {}\n});\n\nfunction B(e) {\n  var t = l.useRef(e);\n  return l.useEffect(function () {\n    t.current = e;\n  }, [e]), t.current;\n}\n\nvar F;\n!function (e) {\n  e[e.Solid = 1] = "Solid", e[e.Dashed = 2] = "Dashed", e[e.Beveled = 3] = "Beveled", e[e.Inset = 4] = "Inset", e[e.Underline = 5] = "Underline";\n}(F || (F = {}));\n\nvar W,\n    z = new RegExp("^D:(\\\\d{4})(\\\\d{2})?(\\\\d{2})?(\\\\d{2})?(\\\\d{2})?(\\\\d{2})?([Z|+|-])?(\\\\d{2})?\'?(\\\\d{2})?\'?"),\n    j = function (e, t, n, r) {\n  var o = parseInt(e, 10);\n  return o >= t && o <= n ? o : r;\n},\n    V = function (e) {\n  var t = e.annotation,\n      n = l.useContext(u).direction === exports.TextDirection.RightToLeft,\n      r = l.useRef(),\n      o = "";\n\n  if (t.modificationDate) {\n    var a = function (e) {\n      var t = z.exec(e);\n      if (!t) return null;\n      var n = parseInt(t[1], 10),\n          r = j(t[2], 1, 12, 1) - 1,\n          o = j(t[3], 1, 31, 1),\n          a = j(t[4], 0, 23, 0),\n          i = j(t[5], 0, 59, 0),\n          c = j(t[6], 0, 59, 0),\n          s = t[7] || "Z",\n          l = j(t[8], 0, 23, 0),\n          p = j(t[9], 0, 59, 0);\n\n      switch (s) {\n        case "-":\n          a += l, i += p;\n          break;\n\n        case "+":\n          a -= l, i -= p;\n      }\n\n      return new Date(Date.UTC(n, r, o, a, i, c));\n    }(t.modificationDate);\n\n    o = a ? a.toLocaleDateString() + ", " + a.toLocaleTimeString() : "";\n  }\n\n  return l.useLayoutEffect(function () {\n    if (r.current) {\n      var e = document.querySelector(\'[data-annotation-id="\' + t.id + \'"]\');\n\n      if (e) {\n        var n = e;\n        return n.style.zIndex += 1, function () {\n          n.style.zIndex = "" + (parseInt(n.style.zIndex, 10) - 1);\n        };\n      }\n    }\n  }, []), l.createElement("div", {\n    ref: r,\n    className: d({\n      "rpv-core__annotation-popup-wrapper": !0,\n      "rpv-core__annotation-popup-wrapper--rtl": n\n    }),\n    style: {\n      top: t.annotationType === exports.AnnotationType.Popup ? "" : "100%"\n    }\n  }, t.title && l.createElement(l.Fragment, null, l.createElement("div", {\n    className: d({\n      "rpv-core__annotation-popup-title": !0,\n      "rpv-core__annotation-popup-title--ltr": !n,\n      "rpv-core__annotation-popup-title--rtl": n\n    })\n  }, t.title), l.createElement("div", {\n    className: "rpv-core__annotation-popup-date"\n  }, o)), t.contents && l.createElement("div", {\n    className: "rpv-core__annotation-popup-content"\n  }, t.contents.split("\\n").map(function (e, t) {\n    return l.createElement(l.Fragment, {\n      key: t\n    }, e, l.createElement("br", null));\n  })));\n};\n\n!function (e) {\n  e.Click = "Click", e.Hover = "Hover";\n}(W || (W = {}));\n\nvar q,\n    Z = function (e) {\n  var t,\n      n = e.annotation,\n      r = e.children,\n      o = e.ignoreBorder,\n      a = e.hasPopup,\n      i = e.isRenderable,\n      c = e.page,\n      s = e.viewport,\n      p = n.rect,\n      u = function () {\n    var e = T(),\n        t = e.opened,\n        n = e.toggle,\n        r = l.useState(W.Hover),\n        o = r[0],\n        a = r[1];\n    return {\n      opened: t,\n      closeOnHover: function () {\n        o === W.Hover && n(exports.ToggleStatus.Close);\n      },\n      openOnHover: function () {\n        o === W.Hover && n(exports.ToggleStatus.Open);\n      },\n      toggleOnClick: function () {\n        switch (o) {\n          case W.Click:\n            t && a(W.Hover), n(exports.ToggleStatus.Toggle);\n            break;\n\n          case W.Hover:\n            a(W.Click), n(exports.ToggleStatus.Open);\n        }\n      }\n    };\n  }(),\n      d = u.closeOnHover,\n      f = u.opened,\n      v = u.openOnHover,\n      g = u.toggleOnClick,\n      m = (t = [p[0], c.view[3] + c.view[1] - p[1], p[2], c.view[3] + c.view[1] - p[3]], [Math.min(t[0], t[2]), Math.min(t[1], t[3]), Math.max(t[0], t[2]), Math.max(t[1], t[3])]),\n      h = p[2] - p[0],\n      E = p[3] - p[1],\n      x = {\n    borderColor: "",\n    borderRadius: "",\n    borderStyle: "",\n    borderWidth: ""\n  };\n\n  if (!o && n.borderStyle.width > 0) {\n    switch (n.borderStyle.style) {\n      case F.Dashed:\n        x.borderStyle = "dashed";\n        break;\n\n      case F.Solid:\n        x.borderStyle = "solid";\n        break;\n\n      case F.Underline:\n        x = Object.assign({\n          borderBottomStyle: "solid"\n        }, x);\n        break;\n\n      case F.Beveled:\n      case F.Inset:\n    }\n\n    var _ = n.borderStyle.width;\n    x.borderWidth = _ + "px", n.borderStyle.style !== F.Underline && (h -= 2 * _, E -= 2 * _);\n    var y = n.borderStyle,\n        w = y.horizontalCornerRadius,\n        b = y.verticalCornerRadius;\n    (w > 0 || b > 0) && (x.borderRadius = w + "px / " + b + "px"), n.color ? x.borderColor = "rgb(" + (0 | n.color[0]) + ", " + (0 | n.color[1]) + ", " + (0 | n.color[2]) + ")" : x.borderWidth = "0";\n  }\n\n  return l.createElement(l.Fragment, null, i && r({\n    popup: {\n      opened: f,\n      closeOnHover: d,\n      openOnHover: v,\n      toggleOnClick: g\n    },\n    slot: {\n      attrs: {\n        style: Object.assign({\n          height: E + "px",\n          left: m[0] + "px",\n          top: m[1] + "px",\n          transform: "matrix(" + s.transform.join(",") + ")",\n          transformOrigin: "-" + m[0] + "px -" + m[1] + "px",\n          width: h + "px"\n        }, x)\n      },\n      children: l.createElement(l.Fragment, null, a && f && l.createElement(V, {\n        annotation: n\n      }))\n    }\n  }));\n},\n    U = function (e) {\n  var t = e.annotation,\n      n = e.page,\n      r = e.viewport,\n      o = !1 === t.hasPopup,\n      a = !!(t.hasPopup || t.title || t.contents);\n  return l.createElement(Z, {\n    annotation: t,\n    hasPopup: o,\n    ignoreBorder: !0,\n    isRenderable: a,\n    page: n,\n    viewport: r\n  }, function (e) {\n    return l.createElement("div", E({}, e.slot.attrs, {\n      className: "rpv-core__annotation rpv-core__annotation--caret",\n      "data-annotation-id": t.id,\n      onClick: e.popup.toggleOnClick,\n      onMouseEnter: e.popup.openOnHover,\n      onMouseLeave: e.popup.closeOnHover\n    }), e.slot.children);\n  });\n},\n    G = function (e) {\n  var t = e.annotation,\n      n = e.page,\n      r = e.viewport,\n      o = !1 === t.hasPopup,\n      a = !!(t.hasPopup || t.title || t.contents),\n      i = t.rect,\n      c = i[2] - i[0],\n      s = i[3] - i[1],\n      p = t.borderStyle.width;\n  return l.createElement(Z, {\n    annotation: t,\n    hasPopup: o,\n    ignoreBorder: !0,\n    isRenderable: a,\n    page: n,\n    viewport: r\n  }, function (e) {\n    return l.createElement("div", E({}, e.slot.attrs, {\n      className: "rpv-core__annotation rpv-core__annotation--circle",\n      "data-annotation-id": t.id,\n      onClick: e.popup.toggleOnClick,\n      onMouseEnter: e.popup.openOnHover,\n      onMouseLeave: e.popup.closeOnHover\n    }), l.createElement("svg", {\n      height: s + "px",\n      preserveAspectRatio: "none",\n      version: "1.1",\n      viewBox: "0 0 " + c + " " + s,\n      width: c + "px"\n    }, l.createElement("circle", {\n      cy: s / 2,\n      fill: "none",\n      rx: c / 2 - p / 2,\n      ry: s / 2 - p / 2,\n      stroke: "transparent",\n      strokeWidth: p || 1\n    })), e.slot.children);\n  });\n},\n    J = function (e) {\n  var t = e.annotation,\n      n = e.page,\n      r = e.viewport,\n      o = !(!1 !== t.hasPopup || !t.title && !t.contents),\n      a = function () {\n    var e,\n        n,\n        r,\n        o,\n        a = t.file;\n    a && (e = a.filename, n = a.content, r = "string" == typeof n ? "" : URL.createObjectURL(new Blob([n], {\n      type: ""\n    })), (o = document.createElement("a")).style.display = "none", o.href = r || e, o.setAttribute("download", function (e) {\n      var t = e.split("/").pop();\n      return t ? t.split("#")[0].split("?")[0] : e;\n    }(e)), document.body.appendChild(o), o.click(), document.body.removeChild(o), r && URL.revokeObjectURL(r));\n  };\n\n  return l.createElement(Z, {\n    annotation: t,\n    hasPopup: o,\n    ignoreBorder: !0,\n    isRenderable: !0,\n    page: n,\n    viewport: r\n  }, function (e) {\n    return l.createElement("div", E({}, e.slot.attrs, {\n      className: "rpv-core__annotation rpv-core__annotation--file-attachment",\n      "data-annotation-id": t.id,\n      onClick: e.popup.toggleOnClick,\n      onDoubleClick: a,\n      onMouseEnter: e.popup.openOnHover,\n      onMouseLeave: e.popup.closeOnHover\n    }), e.slot.children);\n  });\n},\n    K = function (e) {\n  var t = e.annotation,\n      n = e.page,\n      r = e.viewport,\n      o = !1 === t.hasPopup,\n      a = !!(t.hasPopup || t.title || t.contents);\n  return l.createElement(Z, {\n    annotation: t,\n    hasPopup: o,\n    ignoreBorder: !0,\n    isRenderable: a,\n    page: n,\n    viewport: r\n  }, function (e) {\n    return l.createElement("div", E({}, e.slot.attrs, {\n      className: "rpv-core__annotation rpv-core__annotation--free-text",\n      "data-annotation-id": t.id,\n      onClick: e.popup.toggleOnClick,\n      onMouseEnter: e.popup.openOnHover,\n      onMouseLeave: e.popup.closeOnHover\n    }), e.slot.children);\n  });\n},\n    Q = function (e) {\n  var t = e.annotation,\n      n = e.page,\n      r = e.viewport,\n      o = !(!t.title && !t.contents),\n      a = !t.parentType || -1 !== ["Circle", "Ink", "Line", "Polygon", "PolyLine", "Square"].indexOf(t.parentType);\n  return f(function () {\n    if (t.parentId) {\n      var e = document.querySelector(\'[data-annotation-id="\' + t.parentId + \'"]\'),\n          n = document.querySelector(\'[data-annotation-id="\' + t.id + \'"]\');\n\n      if (e && n) {\n        var r = parseFloat(e.style.left),\n            o = parseFloat(e.style.top) + parseFloat(e.style.height);\n        n.style.left = r + "px", n.style.top = o + "px", n.style.transformOrigin = "-" + r + "px -" + o + "px";\n      }\n    }\n  }, []), l.createElement(Z, {\n    annotation: t,\n    hasPopup: a,\n    ignoreBorder: !1,\n    isRenderable: o,\n    page: n,\n    viewport: r\n  }, function (e) {\n    return l.createElement("div", E({}, e.slot.attrs, {\n      className: "rpv-core__annotation rpv-core__annotation--popup",\n      "data-annotation-id": t.id\n    }), l.createElement(V, {\n      annotation: t\n    }));\n  });\n},\n    X = function (e) {\n  var t = e.annotation,\n      n = e.childAnnotation,\n      r = e.page,\n      o = e.viewport,\n      a = !1 === t.hasPopup,\n      i = !!(t.hasPopup || t.title || t.contents);\n\n  if (t.quadPoints && t.quadPoints.length > 0) {\n    var c = t.quadPoints.map(function (e) {\n      return Object.assign({}, t, {\n        rect: [e[2].x, e[2].y, e[1].x, e[1].y],\n        quadPoints: []\n      });\n    });\n    return l.createElement(l.Fragment, null, c.map(function (e, t) {\n      return l.createElement(X, {\n        key: t,\n        annotation: e,\n        childAnnotation: n,\n        page: r,\n        viewport: o\n      });\n    }));\n  }\n\n  return l.createElement(Z, {\n    annotation: t,\n    hasPopup: a,\n    ignoreBorder: !0,\n    isRenderable: i,\n    page: r,\n    viewport: o\n  }, function (e) {\n    return l.createElement(l.Fragment, null, l.createElement("div", E({}, e.slot.attrs, {\n      className: "rpv-core__annotation rpv-core__annotation--highlight",\n      "data-annotation-id": t.id,\n      onClick: e.popup.toggleOnClick,\n      onMouseEnter: e.popup.openOnHover,\n      onMouseLeave: e.popup.closeOnHover\n    }), e.slot.children), n && n.annotationType === exports.AnnotationType.Popup && e.popup.opened && l.createElement(Q, {\n      annotation: n,\n      page: r,\n      viewport: o\n    }));\n  });\n},\n    Y = function (e) {\n  var t = e.annotation,\n      n = e.page,\n      r = e.viewport,\n      o = !1 === t.hasPopup,\n      a = !!(t.hasPopup || t.title || t.contents),\n      i = t.rect,\n      c = i[2] - i[0],\n      s = i[3] - i[1],\n      p = t.borderStyle.width;\n  return l.createElement(Z, {\n    annotation: t,\n    hasPopup: o,\n    ignoreBorder: !0,\n    isRenderable: a,\n    page: n,\n    viewport: r\n  }, function (e) {\n    return l.createElement("div", E({}, e.slot.attrs, {\n      className: "rpv-core__annotation rpv-core__annotation--ink",\n      "data-annotation-id": t.id,\n      onClick: e.popup.toggleOnClick,\n      onMouseEnter: e.popup.openOnHover,\n      onMouseLeave: e.popup.closeOnHover\n    }), t.inkLists && t.inkLists.length && l.createElement("svg", {\n      height: s + "px",\n      preserveAspectRatio: "none",\n      version: "1.1",\n      viewBox: "0 0 " + c + " " + s,\n      width: c + "px"\n    }, t.inkLists.map(function (e, t) {\n      return l.createElement("polyline", {\n        key: t,\n        fill: "none",\n        stroke: "transparent",\n        strokeWidth: p || 1,\n        points: e.map(function (e) {\n          return e.x - i[0] + "," + (i[3] - e.y);\n        }).join(" ")\n      });\n    })), e.slot.children);\n  });\n},\n    $ = function (e) {\n  var t = e.annotation,\n      n = e.page,\n      r = e.viewport,\n      o = !1 === t.hasPopup,\n      a = !!(t.hasPopup || t.title || t.contents),\n      i = t.rect,\n      c = i[2] - i[0],\n      s = i[3] - i[1],\n      p = t.borderStyle.width;\n  return l.createElement(Z, {\n    annotation: t,\n    hasPopup: o,\n    ignoreBorder: !0,\n    isRenderable: a,\n    page: n,\n    viewport: r\n  }, function (e) {\n    return l.createElement("div", E({}, e.slot.attrs, {\n      className: "rpv-core__annotation rpv-core__annotation--line",\n      "data-annotation-id": t.id,\n      onClick: e.popup.toggleOnClick,\n      onMouseEnter: e.popup.openOnHover,\n      onMouseLeave: e.popup.closeOnHover\n    }), l.createElement("svg", {\n      height: s + "px",\n      preserveAspectRatio: "none",\n      version: "1.1",\n      viewBox: "0 0 " + c + " " + s,\n      width: c + "px"\n    }, l.createElement("line", {\n      stroke: "transparent",\n      strokeWidth: p || 1,\n      x1: i[2] - t.lineCoordinates[0],\n      x2: i[2] - t.lineCoordinates[2],\n      y1: i[3] - t.lineCoordinates[1],\n      y2: i[3] - t.lineCoordinates[3]\n    })), e.slot.children);\n  });\n},\n    ee = function (e, t) {\n  return new Promise(function (n) {\n    new Promise(function (n) {\n      "string" == typeof t ? e.getDestination(t).then(function (e) {\n        n(e);\n      }) : n(t);\n    }).then(function (t) {\n      return "object" == typeof t[0] ? e.getPageIndex(t[0]).then(function (e) {\n        return Promise.resolve({\n          pageIndex: e,\n          destArray: t\n        });\n      }) : Promise.resolve({\n        pageIndex: t[0],\n        destArray: t\n      });\n    }).then(function (e) {\n      var t = function (e, t) {\n        switch (t[1].name) {\n          case "XYZ":\n            return {\n              bottomOffset: t[3],\n              pageIndex: e - 1,\n              scaleTo: t[4]\n            };\n\n          case "Fit":\n          case "FitB":\n            return {\n              bottomOffset: 0,\n              pageIndex: e - 1,\n              scaleTo: exports.SpecialZoomLevel.PageFit\n            };\n\n          case "FitH":\n          case "FitBH":\n            return {\n              bottomOffset: t[2],\n              pageIndex: e - 1,\n              scaleTo: exports.SpecialZoomLevel.PageWidth\n            };\n\n          default:\n            return {\n              bottomOffset: 0,\n              pageIndex: e - 1,\n              scaleTo: 1\n            };\n        }\n      }(e.pageIndex, e.destArray);\n\n      n(t);\n    });\n  });\n},\n    te = function (e) {\n  var t = e.annotation,\n      n = e.doc,\n      r = e.page,\n      o = e.viewport,\n      a = e.onExecuteNamedAction,\n      i = e.onJumpToDest,\n      c = !!(t.url || t.dest || t.action),\n      s = t.url ? {\n    href: t.url,\n    rel: "noopener noreferrer nofollow",\n    target: t.newWindow ? "_blank" : "",\n    title: t.url\n  } : {\n    href: "",\n    "data-annotation-link-dest": t.dest,\n    onClick: function (e) {\n      e.preventDefault(), t.action ? a(t.action) : ee(n, t.dest).then(function (e) {\n        var t = e.pageIndex,\n            n = e.bottomOffset,\n            r = e.scaleTo;\n        i(n ? t + 1 : t, n, 0, r);\n      });\n    }\n  };\n  return l.createElement(Z, {\n    annotation: t,\n    hasPopup: !1,\n    ignoreBorder: !1,\n    isRenderable: c,\n    page: r,\n    viewport: o\n  }, function (e) {\n    return l.createElement("div", E({}, e.slot.attrs, {\n      className: "rpv-core__annotation rpv-core__annotation--link",\n      "data-annotation-id": t.id\n    }), l.createElement("a", E({}, s)));\n  });\n},\n    ne = function (e) {\n  var t = e.annotation,\n      n = e.page,\n      r = e.viewport,\n      o = !1 === t.hasPopup,\n      a = !!(t.hasPopup || t.title || t.contents),\n      i = t.rect,\n      c = i[2] - i[0],\n      s = i[3] - i[1],\n      p = t.borderStyle.width;\n  return l.createElement(Z, {\n    annotation: t,\n    hasPopup: o,\n    ignoreBorder: !0,\n    isRenderable: a,\n    page: n,\n    viewport: r\n  }, function (e) {\n    return l.createElement("div", E({}, e.slot.attrs, {\n      className: "rpv-core__annotation rpv-core__annotation--polygon",\n      "data-annotation-id": t.id,\n      onClick: e.popup.toggleOnClick,\n      onMouseEnter: e.popup.openOnHover,\n      onMouseLeave: e.popup.closeOnHover\n    }), t.vertices && t.vertices.length && l.createElement("svg", {\n      height: s + "px",\n      preserveAspectRatio: "none",\n      version: "1.1",\n      viewBox: "0 0 " + c + " " + s,\n      width: c + "px"\n    }, l.createElement("polygon", {\n      fill: "none",\n      stroke: "transparent",\n      strokeWidth: p || 1,\n      points: t.vertices.map(function (e) {\n        return e.x - i[0] + "," + (i[3] - e.y);\n      }).join(" ")\n    })), e.slot.children);\n  });\n},\n    re = function (e) {\n  var t = e.annotation,\n      n = e.page,\n      r = e.viewport,\n      o = !1 === t.hasPopup,\n      a = !!(t.hasPopup || t.title || t.contents),\n      i = t.rect,\n      c = i[2] - i[0],\n      s = i[3] - i[1],\n      p = t.borderStyle.width;\n  return l.createElement(Z, {\n    annotation: t,\n    hasPopup: o,\n    ignoreBorder: !0,\n    isRenderable: a,\n    page: n,\n    viewport: r\n  }, function (e) {\n    return l.createElement("div", E({}, e.slot.attrs, {\n      className: "rpv-core__annotation rpv-core__annotation--polyline",\n      "data-annotation-id": t.id,\n      onClick: e.popup.toggleOnClick,\n      onMouseEnter: e.popup.openOnHover,\n      onMouseLeave: e.popup.closeOnHover\n    }), t.vertices && t.vertices.length && l.createElement("svg", {\n      height: s + "px",\n      preserveAspectRatio: "none",\n      version: "1.1",\n      viewBox: "0 0 " + c + " " + s,\n      width: c + "px"\n    }, l.createElement("polyline", {\n      fill: "none",\n      stroke: "transparent",\n      strokeWidth: p || 1,\n      points: t.vertices.map(function (e) {\n        return e.x - i[0] + "," + (i[3] - e.y);\n      }).join(" ")\n    })), e.slot.children);\n  });\n},\n    oe = function (e) {\n  var t = e.annotation,\n      n = e.page,\n      r = e.viewport,\n      o = !1 === t.hasPopup,\n      a = !!(t.hasPopup || t.title || t.contents),\n      i = t.rect,\n      c = i[2] - i[0],\n      s = i[3] - i[1],\n      p = t.borderStyle.width;\n  return l.createElement(Z, {\n    annotation: t,\n    hasPopup: o,\n    ignoreBorder: !0,\n    isRenderable: a,\n    page: n,\n    viewport: r\n  }, function (e) {\n    return l.createElement("div", E({}, e.slot.attrs, {\n      className: "rpv-core__annotation rpv-core__annotation--square",\n      "data-annotation-id": t.id,\n      onClick: e.popup.toggleOnClick,\n      onMouseEnter: e.popup.openOnHover,\n      onMouseLeave: e.popup.closeOnHover\n    }), l.createElement("svg", {\n      height: s + "px",\n      preserveAspectRatio: "none",\n      version: "1.1",\n      viewBox: "0 0 " + c + " " + s,\n      width: c + "px"\n    }, l.createElement("rect", {\n      height: s - p,\n      fill: "none",\n      stroke: "transparent",\n      strokeWidth: p || 1,\n      x: p / 2,\n      y: p / 2,\n      width: c - p\n    })), e.slot.children);\n  });\n},\n    ae = function (e) {\n  var t = e.annotation,\n      n = e.page,\n      r = e.viewport,\n      o = !1 === t.hasPopup,\n      a = !!(t.hasPopup || t.title || t.contents);\n  return l.createElement(Z, {\n    annotation: t,\n    hasPopup: o,\n    ignoreBorder: !0,\n    isRenderable: a,\n    page: n,\n    viewport: r\n  }, function (e) {\n    return l.createElement("div", E({}, e.slot.attrs, {\n      className: "rpv-core__annotation rpv-core__annotation--squiggly",\n      "data-annotation-id": t.id,\n      onClick: e.popup.toggleOnClick,\n      onMouseEnter: e.popup.openOnHover,\n      onMouseLeave: e.popup.closeOnHover\n    }), e.slot.children);\n  });\n},\n    ie = function (e) {\n  var t = e.annotation,\n      n = e.page,\n      r = e.viewport,\n      o = !1 === t.hasPopup,\n      a = !!(t.hasPopup || t.title || t.contents);\n  return l.createElement(Z, {\n    annotation: t,\n    hasPopup: o,\n    ignoreBorder: !0,\n    isRenderable: a,\n    page: n,\n    viewport: r\n  }, function (e) {\n    return l.createElement("div", E({}, e.slot.attrs, {\n      className: "rpv-core__annotation rpv-core__annotation--stamp",\n      "data-annotation-id": t.id,\n      onClick: e.popup.toggleOnClick,\n      onMouseEnter: e.popup.openOnHover,\n      onMouseLeave: e.popup.closeOnHover\n    }), e.slot.children);\n  });\n},\n    ce = function (e) {\n  var t = e.annotation,\n      n = e.page,\n      r = e.viewport,\n      o = !1 === t.hasPopup,\n      a = !!(t.hasPopup || t.title || t.contents);\n  return l.createElement(Z, {\n    annotation: t,\n    hasPopup: o,\n    ignoreBorder: !0,\n    isRenderable: a,\n    page: n,\n    viewport: r\n  }, function (e) {\n    return l.createElement("div", E({}, e.slot.attrs, {\n      className: "rpv-core__annotation rpv-core__annotation--strike-out",\n      "data-annotation-id": t.id,\n      onClick: e.popup.toggleOnClick,\n      onMouseEnter: e.popup.openOnHover,\n      onMouseLeave: e.popup.closeOnHover\n    }), e.slot.children);\n  });\n},\n    se = function () {\n  return l.createElement(v, {\n    size: 16\n  }, l.createElement("path", {\n    d: "M.5,16.5a1,1,0,0,0,1,1h2v4l4-4h15a1,1,0,0,0,1-1V3.5a1,1,0,0,0-1-1H1.5a1,1,0,0,0-1,1Z"\n  }), l.createElement("path", {\n    d: "M7.25,9.75A.25.25,0,1,1,7,10a.25.25,0,0,1,.25-.25"\n  }), l.createElement("path", {\n    d: "M12,9.75a.25.25,0,1,1-.25.25A.25.25,0,0,1,12,9.75"\n  }), l.createElement("path", {\n    d: "M16.75,9.75a.25.25,0,1,1-.25.25.25.25,0,0,1,.25-.25"\n  }));\n},\n    le = function () {\n  return l.createElement(v, {\n    size: 16\n  }, l.createElement("path", {\n    d: "M0.500 12.001 A11.500 11.500 0 1 0 23.500 12.001 A11.500 11.500 0 1 0 0.500 12.001 Z"\n  }), l.createElement("path", {\n    d: "M6.000 12.001 A6.000 6.000 0 1 0 18.000 12.001 A6.000 6.000 0 1 0 6.000 12.001 Z"\n  }), l.createElement("path", {\n    d: "M21.423 5.406L17.415 9.414"\n  }), l.createElement("path", {\n    d: "M14.587 6.585L18.607 2.565"\n  }), l.createElement("path", {\n    d: "M5.405 21.424L9.413 17.416"\n  }), l.createElement("path", {\n    d: "M6.585 14.588L2.577 18.596"\n  }), l.createElement("path", {\n    d: "M18.602 21.419L14.595 17.412"\n  }), l.createElement("path", {\n    d: "M17.419 14.58L21.428 18.589"\n  }), l.createElement("path", {\n    d: "M2.582 5.399L6.588 9.406"\n  }), l.createElement("path", {\n    d: "M9.421 6.581L5.412 2.572"\n  }));\n},\n    pe = function () {\n  return l.createElement(v, {\n    size: 16\n  }, l.createElement("path", {\n    d: "M4.000 18.500 A1.500 1.500 0 1 0 7.000 18.500 A1.500 1.500 0 1 0 4.000 18.500 Z"\n  }), l.createElement("path", {\n    d: "M20.5.5l-9.782,9.783a7,7,0,1,0,3,3L17,10h1.5V8.5L19,8h1.5V6.5L21,6h1.5V4.5l1-1V.5Z"\n  }));\n},\n    ue = function () {\n  return l.createElement(v, {\n    size: 16\n  }, l.createElement("path", {\n    d: "M2.000 2.500 L22.000 2.500 L22.000 23.500 L2.000 23.500 Z"\n  }), l.createElement("path", {\n    d: "M6 4.5L6 0.5"\n  }), l.createElement("path", {\n    d: "M18 4.5L18 0.5"\n  }), l.createElement("path", {\n    d: "M10 4.5L10 0.5"\n  }), l.createElement("path", {\n    d: "M14 4.5L14 0.5"\n  }));\n},\n    de = function () {\n  return l.createElement(v, {\n    size: 16\n  }, l.createElement("path", {\n    d: "M17.5 0.498L17.5 23.498"\n  }), l.createElement("path", {\n    d: "M10.5 0.498L10.5 23.498"\n  }), l.createElement("path", {\n    d: "M23.5.5H6.5a6,6,0,0,0,0,12h4"\n  }));\n},\n    fe = function () {\n  return l.createElement(v, {\n    size: 16\n  }, l.createElement("path", {\n    d: "M2.5 22.995L12 6.005 21.5 22.995 2.5 22.995z"\n  }));\n},\n    ve = function (e) {\n  var t = e.annotation,\n      n = e.childAnnotation,\n      r = e.page,\n      o = e.viewport,\n      a = !1 === t.hasPopup,\n      i = !!(t.hasPopup || t.title || t.contents),\n      c = t.name ? t.name.toLowerCase() : "";\n  return l.createElement(Z, {\n    annotation: t,\n    hasPopup: a,\n    ignoreBorder: !1,\n    isRenderable: i,\n    page: r,\n    viewport: o\n  }, function (e) {\n    return l.createElement(l.Fragment, null, l.createElement("div", E({}, e.slot.attrs, {\n      className: "rpv-core__annotation rpv-core__annotation--text",\n      "data-annotation-id": t.id,\n      onClick: e.popup.toggleOnClick,\n      onMouseEnter: e.popup.openOnHover,\n      onMouseLeave: e.popup.closeOnHover\n    }), c && l.createElement("div", {\n      className: "rpv-core__annotation-text-icon"\n    }, "check" === c && l.createElement(g, null), "comment" === c && l.createElement(se, null), "help" === c && l.createElement(le, null), "insert" === c && l.createElement(fe, null), "key" === c && l.createElement(pe, null), "note" === c && l.createElement(ue, null), ("newparagraph" === c || "paragraph" === c) && l.createElement(de, null)), e.slot.children), n && n.annotationType === exports.AnnotationType.Popup && e.popup.opened && l.createElement(Q, {\n      annotation: n,\n      page: r,\n      viewport: o\n    }));\n  });\n},\n    ge = function (e) {\n  var t = e.annotation,\n      n = e.page,\n      r = e.viewport,\n      o = !1 === t.hasPopup,\n      a = !!(t.hasPopup || t.title || t.contents);\n  return l.createElement(Z, {\n    annotation: t,\n    hasPopup: o,\n    ignoreBorder: !0,\n    isRenderable: a,\n    page: n,\n    viewport: r\n  }, function (e) {\n    return l.createElement("div", E({}, e.slot.attrs, {\n      className: "rpv-core__annotation rpv-core__annotation--underline",\n      "data-annotation-id": t.id,\n      onClick: e.popup.toggleOnClick,\n      onMouseEnter: e.popup.openOnHover,\n      onMouseLeave: e.popup.closeOnHover\n    }), e.slot.children);\n  });\n},\n    me = function (e) {\n  var t = e.annotations,\n      n = e.containerRef,\n      r = e.doc,\n      o = e.page,\n      a = e.pageIndex,\n      i = e.plugins,\n      c = e.rotation,\n      s = e.scale,\n      p = e.onExecuteNamedAction,\n      u = e.onJumpToDest,\n      d = o.getViewport({\n    rotation: c,\n    scale: s\n  }).clone({\n    dontFlip: !0\n  }),\n      f = t.filter(function (e) {\n    return !e.parentId;\n  });\n  return l.useEffect(function () {\n    var e = n.current;\n    e && i.forEach(function (t) {\n      t.onAnnotationLayerRender && t.onAnnotationLayerRender({\n        annotations: f,\n        container: e,\n        pageIndex: a,\n        rotation: c,\n        scale: s\n      });\n    });\n  }, []), l.createElement(l.Fragment, null, f.map(function (e) {\n    var n = t.find(function (t) {\n      return t.parentId === e.id;\n    });\n\n    switch (e.annotationType) {\n      case exports.AnnotationType.Caret:\n        return l.createElement(U, {\n          key: e.id,\n          annotation: e,\n          page: o,\n          viewport: d\n        });\n\n      case exports.AnnotationType.Circle:\n        return l.createElement(G, {\n          key: e.id,\n          annotation: e,\n          page: o,\n          viewport: d\n        });\n\n      case exports.AnnotationType.FileAttachment:\n        return l.createElement(J, {\n          key: e.id,\n          annotation: e,\n          page: o,\n          viewport: d\n        });\n\n      case exports.AnnotationType.FreeText:\n        return l.createElement(K, {\n          key: e.id,\n          annotation: e,\n          page: o,\n          viewport: d\n        });\n\n      case exports.AnnotationType.Highlight:\n        return l.createElement(X, {\n          key: e.id,\n          annotation: e,\n          childAnnotation: n,\n          page: o,\n          viewport: d\n        });\n\n      case exports.AnnotationType.Ink:\n        return l.createElement(Y, {\n          key: e.id,\n          annotation: e,\n          page: o,\n          viewport: d\n        });\n\n      case exports.AnnotationType.Line:\n        return l.createElement($, {\n          key: e.id,\n          annotation: e,\n          page: o,\n          viewport: d\n        });\n\n      case exports.AnnotationType.Link:\n        return l.createElement(te, {\n          key: e.id,\n          annotation: e,\n          doc: r,\n          page: o,\n          viewport: d,\n          onExecuteNamedAction: p,\n          onJumpToDest: u\n        });\n\n      case exports.AnnotationType.Polygon:\n        return l.createElement(ne, {\n          key: e.id,\n          annotation: e,\n          page: o,\n          viewport: d\n        });\n\n      case exports.AnnotationType.Polyline:\n        return l.createElement(re, {\n          key: e.id,\n          annotation: e,\n          page: o,\n          viewport: d\n        });\n\n      case exports.AnnotationType.Popup:\n        return l.createElement(Q, {\n          key: e.id,\n          annotation: e,\n          page: o,\n          viewport: d\n        });\n\n      case exports.AnnotationType.Square:\n        return l.createElement(oe, {\n          key: e.id,\n          annotation: e,\n          page: o,\n          viewport: d\n        });\n\n      case exports.AnnotationType.Squiggly:\n        return l.createElement(ae, {\n          key: e.id,\n          annotation: e,\n          page: o,\n          viewport: d\n        });\n\n      case exports.AnnotationType.Stamp:\n        return l.createElement(ie, {\n          key: e.id,\n          annotation: e,\n          page: o,\n          viewport: d\n        });\n\n      case exports.AnnotationType.StrikeOut:\n        return l.createElement(ce, {\n          key: e.id,\n          annotation: e,\n          page: o,\n          viewport: d\n        });\n\n      case exports.AnnotationType.Text:\n        return l.createElement(ve, {\n          key: e.id,\n          annotation: e,\n          childAnnotation: n,\n          page: o,\n          viewport: d\n        });\n\n      case exports.AnnotationType.Underline:\n        return l.createElement(ge, {\n          key: e.id,\n          annotation: e,\n          page: o,\n          viewport: d\n        });\n\n      default:\n        return l.createElement(l.Fragment, {\n          key: e.id\n        });\n    }\n  }));\n},\n    he = function (e) {\n  var t = e.page,\n      n = e.renderAnnotations,\n      r = l.useState({\n    loading: !0,\n    annotations: []\n  }),\n      o = r[0],\n      a = r[1];\n  return l.useEffect(function () {\n    t.getAnnotations({\n      intent: "display"\n    }).then(function (e) {\n      a({\n        loading: !1,\n        annotations: e\n      });\n    });\n  }, []), o.loading ? l.createElement(l.Fragment, null) : n(o.annotations);\n},\n    Ee = function (e) {\n  var t = e.doc,\n      n = e.page,\n      r = e.pageIndex,\n      o = e.plugins,\n      a = e.rotation,\n      i = e.scale,\n      c = e.onExecuteNamedAction,\n      s = e.onJumpToDest,\n      p = l.useRef();\n  return l.createElement("div", {\n    ref: p,\n    className: "rpv-core__annotation-layer"\n  }, l.createElement(he, {\n    page: n,\n    renderAnnotations: function (e) {\n      return l.createElement(me, {\n        annotations: e,\n        containerRef: p,\n        doc: t,\n        page: n,\n        pageIndex: r,\n        plugins: o,\n        rotation: a,\n        scale: i,\n        onExecuteNamedAction: c,\n        onJumpToDest: s\n      });\n    }\n  }));\n},\n    xe = function (e) {\n  var t = e.callback,\n      n = e.children,\n      r = e.rotation,\n      o = e.scale;\n  return f(function () {\n    t();\n  }, [r, o]), l.createElement(l.Fragment, null, n);\n},\n    _e = function (e) {\n  var t = e.height,\n      n = e.page,\n      r = e.pageIndex,\n      o = e.plugins,\n      a = e.rotation,\n      i = e.scale,\n      c = e.width,\n      s = l.useRef(),\n      p = l.useRef(),\n      u = l.useState(!1),\n      d = u[0],\n      f = u[1],\n      v = window.devicePixelRatio || 1;\n  return l.createElement(xe, {\n    callback: function () {\n      f(!1);\n      var e = p.current;\n      e && e.cancel();\n      var l = s.current;\n      o.forEach(function (e) {\n        e.onCanvasLayerRender && e.onCanvasLayerRender({\n          ele: l,\n          pageIndex: r,\n          rotation: a,\n          scale: i,\n          status: exports.LayerRenderStatus.PreRender\n        });\n      }), l.height = t * v, l.width = c * v, l.style.opacity = "0";\n      var u = l.getContext("2d", {\n        alpha: !1\n      }),\n          d = n.getViewport({\n        rotation: a,\n        scale: i * v\n      });\n      p.current = n.render({\n        canvasContext: u,\n        viewport: d\n      }), p.current.promise.then(function () {\n        f(!0), l.style.removeProperty("opacity"), o.forEach(function (e) {\n          e.onCanvasLayerRender && e.onCanvasLayerRender({\n            ele: l,\n            pageIndex: r,\n            rotation: a,\n            scale: i,\n            status: exports.LayerRenderStatus.DidRender\n          });\n        });\n      }, function () {\n        f(!0);\n      });\n    },\n    rotation: a,\n    scale: i\n  }, l.createElement("div", {\n    className: "rpv-core__canvas-layer",\n    style: {\n      height: t + "px",\n      width: c + "px"\n    }\n  }, !d && l.createElement("div", {\n    className: "rpv-core__canvas-layer-loader"\n  }, l.createElement(y, null)), l.createElement("canvas", {\n    ref: s,\n    style: {\n      transform: "scale(" + 1 / v + ")",\n      transformOrigin: "top left"\n    }\n  })));\n},\n    ye = function (e) {\n  var t = e.height,\n      n = e.page,\n      r = e.rotation,\n      o = e.scale,\n      a = e.width,\n      i = l.useRef();\n  return l.createElement(xe, {\n    callback: function () {\n      var e = i.current,\n          c = n.getViewport({\n        rotation: r,\n        scale: o\n      });\n      n.getOperatorList().then(function (r) {\n        !function () {\n          var e = i.current;\n          e && (e.innerHTML = "");\n        }(), new p.SVGGraphics(n.commonObjs, n.objs).getSVG(r, c).then(function (n) {\n          n.style.height = t + "px", n.style.width = a + "px", e.appendChild(n);\n        });\n      });\n    },\n    rotation: r,\n    scale: o\n  }, l.createElement("div", {\n    className: "rpv-core__svg-layer",\n    ref: i\n  }));\n},\n    we = function (e) {\n  var t = e.page,\n      n = e.pageIndex,\n      r = e.plugins,\n      o = e.rotation,\n      a = e.scale,\n      i = l.useRef(),\n      c = l.useRef();\n  return l.createElement(xe, {\n    callback: function () {\n      var e = c.current;\n      e && e.cancel();\n      var s = i.current;\n\n      if (s) {\n        var l = t.getViewport({\n          rotation: o,\n          scale: a\n        });\n        r.forEach(function (e) {\n          e.onTextLayerRender && e.onTextLayerRender({\n            ele: s,\n            pageIndex: n,\n            scale: a,\n            status: exports.LayerRenderStatus.PreRender\n          });\n        }), t.getTextContent().then(function (e) {\n          !function () {\n            var e = i.current;\n            e && ([].slice.call(e.querySelectorAll("span.rpv-core__text-layer-text")).forEach(function (t) {\n              return e.removeChild(t);\n            }), [].slice.call(e.querySelectorAll(\'br[role="presentation"]\')).forEach(function (t) {\n              return e.removeChild(t);\n            }));\n          }(), c.current = p.renderTextLayer({\n            container: s,\n            textContent: e,\n            viewport: l,\n            enhanceTextSelection: !0\n          }), c.current.promise.then(function () {\n            [].slice.call(s.querySelectorAll("span")).forEach(function (e) {\n              return e.classList.add("rpv-core__text-layer-text");\n            }), r.forEach(function (e) {\n              e.onTextLayerRender && e.onTextLayerRender({\n                ele: s,\n                pageIndex: n,\n                scale: a,\n                status: exports.LayerRenderStatus.DidRender\n              });\n            });\n          }, function () {});\n        });\n      }\n    },\n    rotation: o,\n    scale: a\n  }, l.createElement("div", {\n    className: "rpv-core__text-layer",\n    ref: i\n  }));\n},\n    be = function (e) {\n  var t = e.currentPage,\n      n = e.doc,\n      r = e.height,\n      o = e.pageIndex,\n      a = e.plugins,\n      i = e.renderPage,\n      c = e.rotation,\n      s = e.scale,\n      p = e.width,\n      u = e.onExecuteNamedAction,\n      d = e.onJumpToDest,\n      f = e.onPageVisibilityChanged,\n      v = l.useState({\n    page: null,\n    pageHeight: r,\n    pageWidth: p,\n    viewportRotation: 0\n  }),\n      g = v[0],\n      m = v[1],\n      h = g.page,\n      E = g.pageHeight,\n      x = g.pageWidth,\n      w = l.useRef(!1),\n      b = Array(10).fill(null).map(function (e, t) {\n    return t / 10;\n  }),\n      P = x * s,\n      L = E * s,\n      R = Math.abs(c) % 180 == 0,\n      T = R ? P : L,\n      k = R ? L : P,\n      C = function () {\n    w.current || (w.current = !0, n.getPage(o + 1).then(function (e) {\n      var t = e.getViewport({\n        scale: 1\n      });\n      m({\n        page: e,\n        pageHeight: t.height,\n        pageWidth: t.width,\n        viewportRotation: t.rotation\n      });\n    }));\n  },\n      S = i || function (e) {\n    return l.createElement(l.Fragment, null, e.canvasLayer.children, e.textLayer.children, e.annotationLayer.children);\n  },\n      O = (c + g.viewportRotation) % 360,\n      A = _({\n    threshold: b,\n    onVisibilityChanged: function (e) {\n      f(o, e.isVisible ? e.ratio : -1), e.isVisible && C();\n    }\n  });\n\n  return l.useEffect(function () {\n    t - 2 <= o && o <= t + 2 && C();\n  }, [t]), l.createElement("div", {\n    ref: A,\n    className: "rpv-core__page-layer",\n    "data-testid": "core__page-layer-" + o,\n    style: {\n      height: k + "px",\n      width: T + "px"\n    }\n  }, h ? l.createElement(l.Fragment, null, S({\n    annotationLayer: {\n      attrs: {},\n      children: l.createElement(Ee, {\n        doc: n,\n        page: h,\n        pageIndex: o,\n        plugins: a,\n        rotation: O,\n        scale: s,\n        onExecuteNamedAction: u,\n        onJumpToDest: d\n      })\n    },\n    canvasLayer: {\n      attrs: {},\n      children: l.createElement(_e, {\n        height: k,\n        page: h,\n        pageIndex: o,\n        plugins: a,\n        rotation: O,\n        scale: s,\n        width: T\n      })\n    },\n    doc: n,\n    height: k,\n    pageIndex: o,\n    rotation: c,\n    scale: s,\n    svgLayer: {\n      attrs: {},\n      children: l.createElement(ye, {\n        height: k,\n        page: h,\n        rotation: O,\n        scale: s,\n        width: T\n      })\n    },\n    textLayer: {\n      attrs: {},\n      children: l.createElement(we, {\n        page: h,\n        pageIndex: o,\n        plugins: a,\n        rotation: O,\n        scale: s\n      })\n    },\n    width: T\n  }), a.map(function (e, t) {\n    return e.renderPageLayer ? l.createElement(l.Fragment, {\n      key: t\n    }, e.renderPageLayer({\n      doc: n,\n      height: k,\n      pageIndex: o,\n      rotation: c,\n      scale: s,\n      width: T\n    })) : l.createElement(l.Fragment, {\n      key: t\n    });\n  })) : l.createElement(y, null));\n},\n    Pe = function (e, t, n, r) {\n  switch (r) {\n    case exports.SpecialZoomLevel.ActualSize:\n      return 1;\n\n    case exports.SpecialZoomLevel.PageFit:\n      return Math.min((e.clientWidth - 17) / n, (e.clientHeight - 16) / t);\n\n    case exports.SpecialZoomLevel.PageWidth:\n      return (e.clientWidth - 17) / n;\n  }\n},\n    Le = function (e) {\n  var t = e.currentFile,\n      n = e.defaultScale,\n      r = e.doc,\n      o = e.initialPage,\n      a = e.pageSize,\n      i = e.plugins,\n      c = e.renderPage,\n      s = e.viewerState,\n      p = e.onDocumentLoad,\n      d = e.onOpenFile,\n      v = e.onPageChange,\n      g = e.onZoom,\n      m = l.useContext(I).l10n,\n      h = l.useContext(u),\n      x = l.useRef(null),\n      _ = l.useRef(null),\n      y = l.useState(0),\n      w = y[0],\n      b = y[1],\n      P = l.useState(0),\n      L = P[0],\n      R = P[1],\n      T = l.useRef(s),\n      k = l.useState(a.scale),\n      C = k[0],\n      S = k[1],\n      O = l.useRef("string" == typeof n ? n : null);\n\n  !function (e) {\n    var t = e.targetRef,\n        n = e.onResize;\n    f(function () {\n      var e = new ResizeObserver(function (e) {\n        e.forEach(function (e) {\n          n(e.target);\n        });\n      }),\n          r = t.current;\n      if (r) return e.observe(r), function () {\n        e.unobserve(r);\n      };\n    }, []);\n  }({\n    targetRef: _,\n    onResize: function (e) {\n      O.current && G(O.current);\n    }\n  });\n\n  var A = r.numPages,\n      M = a.pageWidth,\n      D = a.pageHeight,\n      N = Array(A).fill(null),\n      H = N.map(function () {\n    return 0;\n  }),\n      B = N.map(function () {\n    return l.useRef();\n  }),\n      F = function (e) {\n    var t = e;\n    i.forEach(function (e) {\n      e.onViewerStateChange && (t = e.onViewerStateChange(t));\n    }), T.current = t;\n  },\n      W = function () {\n    return _.current;\n  },\n      z = function (e) {\n    return e < 0 || e >= A ? null : B[e].current;\n  },\n      j = function () {\n    return T.current;\n  },\n      V = function (e, t, n, o) {\n    var a = _.current,\n        i = T.current;\n\n    if (a && i) {\n      var c = e + 1;\n      r.getPage(c).then(function (r) {\n        var c = r.getViewport({\n          scale: 1\n        }),\n            s = 0,\n            l = t || 0,\n            p = n || 0,\n            u = i.scale;\n\n        switch (o) {\n          case exports.SpecialZoomLevel.PageFit:\n            s = 0, p = 0, G(exports.SpecialZoomLevel.PageFit);\n            break;\n\n          case exports.SpecialZoomLevel.PageWidth:\n            u = Pe(a, D, M, exports.SpecialZoomLevel.PageWidth), s = (c.height - l) * u, p *= u, G(u);\n            break;\n\n          default:\n            s = (c.height - l) * i.scale, p *= i.scale;\n        }\n\n        var d = B[e].current;\n        d && (a.scrollTop = d.offsetTop + s, a.scrollLeft = d.offsetLeft + p);\n      });\n    }\n  },\n      q = function (e) {\n    if (!(e < 0 || e >= A)) {\n      var t = _.current,\n          n = B[e].current;\n      t && n && (t.scrollTop = n.offsetTop, t.scrollLeft = n.offsetLeft), b(e);\n    }\n  },\n      Z = function (e) {\n    var t, n;\n    "pdf" === (t = e.name, n = t.split(/\\./).pop(), n ? n.toLowerCase() : "").toLowerCase() && new Promise(function (t) {\n      var n = new FileReader();\n      n.readAsArrayBuffer(e), n.onload = function () {\n        var e = new Uint8Array(n.result);\n        t(e);\n      };\n    }).then(function (t) {\n      d(e.name, t);\n    });\n  },\n      U = function (e) {\n    R(e), F({\n      file: s.file,\n      pageIndex: w,\n      pageHeight: D,\n      pageWidth: M,\n      rotation: e,\n      scale: C\n    });\n  },\n      G = function (e) {\n    var t = _.current,\n        n = t ? "string" == typeof e ? Pe(t, D, M, e) : e : 1;\n    O.current = "string" == typeof e ? e : null, S(n), g({\n      doc: r,\n      scale: n\n    });\n  };\n\n  l.useEffect(function () {\n    var e = _.current,\n        t = T.current;\n    e && t && (e.scrollTop = e.scrollTop * C / t.scale, e.scrollLeft = e.scrollLeft * C / t.scale, F({\n      file: s.file,\n      pageIndex: t.pageIndex,\n      pageHeight: D,\n      pageWidth: M,\n      rotation: L,\n      scale: C\n    }));\n  }, [C]);\n  l.useEffect(function () {\n    var e = {\n      getPageElement: z,\n      getPagesContainer: W,\n      getViewerState: j,\n      jumpToDestination: V,\n      jumpToPage: q,\n      openFile: Z,\n      rotate: U,\n      setViewerState: F,\n      zoom: G\n    };\n    return i.forEach(function (t) {\n      t.install && t.install(e);\n    }), function () {\n      i.forEach(function (t) {\n        t.uninstall && t.uninstall(e);\n      });\n    };\n  }, []), l.useEffect(function () {\n    p({\n      doc: r,\n      file: t\n    }), i.forEach(function (e) {\n      e.onDocumentLoad && e.onDocumentLoad({\n        doc: r,\n        file: t\n      });\n    }), o && q(o);\n  }, []), l.useEffect(function () {\n    v({\n      currentPage: w,\n      doc: r\n    }), F({\n      file: s.file,\n      pageIndex: w,\n      pageHeight: D,\n      pageWidth: M,\n      rotation: L,\n      scale: C\n    });\n  }, [w]);\n\n  var J,\n      K = function (e, t) {\n    H[e] = t;\n    var n = H.reduce(function (e, t, n, r) {\n      return t > r[e] ? n : e;\n    }, 0);\n    b(n);\n  },\n      Q = function (e) {\n    var t = w - 1,\n        n = w + 1;\n\n    switch (e) {\n      case "FirstPage":\n        q(0);\n        break;\n\n      case "LastPage":\n        q(A - 1);\n        break;\n\n      case "NextPage":\n        n < A && q(n);\n        break;\n\n      case "PrevPage":\n        t >= 0 && q(t);\n    }\n  },\n      X = m && m.core ? m.core.pageLabel : "Page {{pageIndex}}",\n      Y = function (e) {\n    return l.createElement("div", E({}, e.attrs, {\n      style: e.attrs && e.attrs.style ? e.attrs.style : {}\n    }), e.children, e.subSlot && Y(e.subSlot));\n  };\n\n  return Y((J = {\n    attrs: {\n      "data-testid": "core__inner-container",\n      ref: x,\n      style: {\n        height: "100%"\n      }\n    },\n    children: l.createElement(l.Fragment, null),\n    subSlot: {\n      attrs: {\n        "data-testid": "core__inner-pages",\n        ref: _,\n        style: {\n          height: "100%",\n          overflow: "auto",\n          position: "relative"\n        }\n      },\n      children: l.createElement(l.Fragment, null, Array(A).fill(0).map(function (e, t) {\n        return l.createElement("div", {\n          "aria-label": X.replace("{{pageIndex}}", "" + (t + 1)),\n          className: "rpv-core__inner-page",\n          key: "pagelayer-" + t,\n          ref: function (e) {\n            B[t].current = e;\n          },\n          role: "region"\n        }, l.createElement(be, {\n          currentPage: w,\n          doc: r,\n          height: D,\n          pageIndex: t,\n          plugins: i,\n          renderPage: c,\n          rotation: L,\n          scale: C,\n          width: M,\n          onExecuteNamedAction: Q,\n          onJumpToDest: V,\n          onPageVisibilityChanged: K\n        }));\n      }))\n    }\n  }, i.forEach(function (e) {\n    e.renderViewer && (J = e.renderViewer({\n      containerRef: x,\n      doc: r,\n      pageHeight: D,\n      pageWidth: M,\n      rotation: L,\n      slot: J,\n      themeContext: h,\n      jumpToPage: q,\n      openFile: Z,\n      rotate: U,\n      zoom: G\n    }));\n  }), J));\n},\n    Re = [.1, .2, .3, .4, .5, .6, .7, .8, .9, 1, 1.1, 1.3, 1.5, 1.7, 1.9, 2.1, 2.4, 2.7, 3, 3.3, 3.7, 4.1, 4.6, 5.1, 5.7, 6.3, 7, 7.7, 8.5, 9.4, 10],\n    Te = function (e) {\n  var t = e.defaultScale,\n      n = e.doc,\n      r = e.render,\n      o = l.useRef(null),\n      a = l.useState({\n    pageHeight: 0,\n    pageWidth: 0,\n    scale: 1\n  }),\n      i = a[0],\n      c = a[1];\n  return l.useEffect(function () {\n    n.getPage(1).then(function (e) {\n      var n = e.getViewport({\n        scale: 1\n      }),\n          r = n.width,\n          a = n.height,\n          i = o.current;\n\n      if (i) {\n        var s,\n            l,\n            p = i.parentElement,\n            u = p.clientWidth / r,\n            d = t ? "string" == typeof t ? Pe(p, a, r, t) : t : (s = u, -1 === (l = Re.findIndex(function (e) {\n          return e >= s;\n        })) || 0 === l ? s : Re[l - 1]);\n        c({\n          pageHeight: a,\n          pageWidth: r,\n          scale: d\n        });\n      }\n    });\n  }, [n]), 0 === i.pageWidth ? l.createElement("div", {\n    className: "rpv-core__page-size-calculator",\n    ref: o\n  }, l.createElement(y, null)) : r(i);\n},\n    ke = function () {};\n\n!function (e) {\n  e[e.REQUIRE_PASSWORD = 0] = "REQUIRE_PASSWORD", e[e.WRONG_PASSWORD = 1] = "WRONG_PASSWORD";\n}(q || (q = {}));\n\nvar Ce = function (e) {\n  function t(t, n) {\n    var r = e.call(this) || this;\n    return r.verifyPassword = t, r.submitPassword = n, r;\n  }\n\n  return h(t, e), t;\n}(ke),\n    Se = function (e) {\n  var t = e.submitPassword,\n      n = e.verifyPassword,\n      r = e.onDocumentAskPassword,\n      o = l.useContext(I).l10n,\n      a = l.useState(""),\n      i = a[0],\n      c = a[1],\n      s = l.useContext(u).direction === exports.TextDirection.RightToLeft,\n      p = function () {\n    return n(i);\n  };\n\n  return l.useEffect(function () {\n    r && r({\n      verifyPassword: n\n    });\n  }, []), l.createElement("div", {\n    className: "rpv-core__asking-password-wrapper"\n  }, l.createElement("div", {\n    className: d({\n      "rpv-core__asking-password": !0,\n      "rpv-core__asking-password--rtl": s\n    })\n  }, l.createElement("div", {\n    className: "rpv-core__asking-password-message"\n  }, t === q.REQUIRE_PASSWORD && o.core.askingPassword.requirePasswordToOpen, t === q.WRONG_PASSWORD && o.core.wrongPassword.tryAgain), l.createElement("div", {\n    className: "rpv-core__asking-password-body"\n  }, l.createElement("div", {\n    className: d({\n      "rpv-core__asking-password-input": !0,\n      "rpv-core__asking-password-input--ltr": !s,\n      "rpv-core__asking-password-input--rtl": s\n    })\n  }, l.createElement(w, {\n    testId: "core__asking-password-input",\n    type: "password",\n    value: i,\n    onChange: c,\n    onKeyDown: function (e) {\n      "Enter" === e.key && p();\n    }\n  })), l.createElement(x, {\n    onClick: p\n  }, o.core.askingPassword.submit))));\n},\n    Oe = function (e) {\n  function t(t) {\n    var n = e.call(this) || this;\n    return n.doc = t, n;\n  }\n\n  return h(t, e), t;\n}(ke),\n    Ae = function (e) {\n  function t(t) {\n    var n = e.call(this) || this;\n    return n.error = t, n;\n  }\n\n  return h(t, e), t;\n}(ke),\n    Me = function (e) {\n  function t(t) {\n    var n = e.call(this) || this;\n    return n.percentages = t, n;\n  }\n\n  return h(t, e), t;\n}(ke),\n    De = function (e) {\n  var t,\n      n = e.characterMap,\n      r = e.file,\n      o = e.httpHeaders,\n      a = e.render,\n      i = e.renderError,\n      c = e.renderLoader,\n      s = e.transformGetDocumentParams,\n      f = e.withCredentials,\n      v = e.onDocumentAskPassword,\n      g = l.useContext(u).direction === exports.TextDirection.RightToLeft,\n      m = l.useState(new Me(0)),\n      h = m[0],\n      E = m[1],\n      x = l.useState(0),\n      _ = x[0],\n      w = x[1],\n      b = l.useState(null),\n      P = b[0],\n      L = b[1],\n      R = (t = l.useRef(!1), l.useEffect(function () {\n    return t.current = !0, function () {\n      t.current = !1;\n    };\n  }, []), t);\n  return l.useEffect(function () {\n    E(new Me(0));\n    var e = new p.PDFWorker({\n      name: "PDFWorker_" + Date.now()\n    }),\n        t = Object.assign({\n      httpHeaders: o,\n      withCredentials: f,\n      worker: e\n    }, "string" == typeof r ? {\n      url: r\n    } : {\n      data: r\n    }, n ? {\n      cMapUrl: n.url,\n      cMapPacked: n.isCompressed\n    } : {}),\n        a = s ? s(t) : t,\n        i = p.getDocument(a);\n    return i.onPassword = function (e, t) {\n      switch (t) {\n        case p.PasswordResponses.NEED_PASSWORD:\n          R.current && E(new Ce(e, q.REQUIRE_PASSWORD));\n          break;\n\n        case p.PasswordResponses.INCORRECT_PASSWORD:\n          R.current && E(new Ce(e, q.WRONG_PASSWORD));\n      }\n    }, i.onProgress = function (e) {\n      e.total > 0 ? R.current && w(Math.min(100, 100 * e.loaded / e.total)) : R.current && w(100);\n    }, i.promise.then(function (e) {\n      return R.current && L(e);\n    }, function (t) {\n      return R.current && !e.destroyed && E(new Ae({\n        message: t.message || "Cannot load document",\n        name: t.name\n      }));\n    }), function () {\n      i.destroy(), e.destroy();\n    };\n  }, [r]), l.useEffect(function () {\n    100 === _ && P ? R.current && E(new Oe(P)) : R.current && E(new Me(_));\n  }, [_, P]), h instanceof Ce ? l.createElement(Se, {\n    submitPassword: h.submitPassword,\n    verifyPassword: h.verifyPassword,\n    onDocumentAskPassword: v\n  }) : h instanceof Oe ? a(h.doc) : h instanceof Ae ? i ? i(h.error) : l.createElement("div", {\n    className: d({\n      "rpv-core__doc-error": !0,\n      "rpv-core__doc-error--rtl": g\n    })\n  }, l.createElement("div", {\n    className: "rpv-core__doc-error-text"\n  }, h.error.message)) : h instanceof Me ? l.createElement("div", {\n    "data-testid": "core__doc-loading",\n    className: d({\n      "rpv-core__doc-loading": !0,\n      "rpv-core__doc-loading--rtl": g\n    })\n  }, c ? c(h.percentages) : l.createElement(y, null)) : l.createElement("div", {\n    className: "rpv-core__doc-loading",\n    "data-testid": "core__doc-loading"\n  }, l.createElement(y, null));\n},\n    Ne = function (e, t) {\n  var n = l.useMemo(function () {\n    return "auto" === e ? "undefined" != typeof window && window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light" : e;\n  }, []),\n      r = l.useState(n),\n      o = r[0],\n      a = r[1],\n      i = B(o);\n  return l.useEffect(function () {\n    if ("auto" === e) {\n      var t = window.matchMedia("(prefers-color-scheme: dark)"),\n          n = function (e) {\n        a(e.matches ? "dark" : "light");\n      };\n\n      return t.addEventListener("change", n), function () {\n        return t.removeEventListener("change", n);\n      };\n    }\n  }, []), l.useEffect(function () {\n    o !== i && t && t(o);\n  }, [o]), l.useEffect(function () {\n    e !== o && a(e);\n  }, [e]), {\n    currentTheme: o,\n    setCurrentTheme: a\n  };\n};\n\nexports.Button = function (e) {\n  var t = e.children,\n      n = e.onClick,\n      r = l.useContext(u).direction === exports.TextDirection.RightToLeft;\n  return l.createElement("button", {\n    className: d({\n      "rpv-core__button": !0,\n      "rpv-core__button--rtl": r\n    }),\n    type: "button",\n    onClick: n\n  }, t);\n}, exports.Icon = v, exports.LocalizationContext = I, exports.Menu = function (e) {\n  var t = e.children,\n      n = l.useRef(),\n      r = l.useRef([]),\n      o = l.useContext(u).direction === exports.TextDirection.RightToLeft,\n      a = function (e) {\n    if (n.current) switch (e.key) {\n      case "Tab":\n        e.preventDefault();\n        break;\n\n      case "ArrowDown":\n        e.preventDefault(), i(function (e, t) {\n          return t + 1;\n        });\n        break;\n\n      case "ArrowUp":\n        e.preventDefault(), i(function (e, t) {\n          return t - 1;\n        });\n        break;\n\n      case "End":\n        e.preventDefault(), i(function (e, t) {\n          return e.length - 1;\n        });\n        break;\n\n      case "Home":\n        e.preventDefault(), i(function (e, t) {\n          return 0;\n        });\n    }\n  },\n      i = function (e) {\n    if (n.current) {\n      var t = r.current,\n          o = t.findIndex(function (e) {\n        return "0" === e.getAttribute("tabindex");\n      }),\n          a = Math.min(t.length - 1, Math.max(0, e(t, o)));\n      o >= 0 && o <= t.length - 1 && t[o].setAttribute("tabindex", "-1"), t[a].setAttribute("tabindex", "0"), t[a].focus();\n    }\n  };\n\n  return f(function () {\n    var e = n.current;\n\n    if (e) {\n      var t = function (e) {\n        var t = [];\n        return e.querySelectorAll(\'.rpv-core__menu-item[role="menuitem"]\').forEach(function (n) {\n          if (n instanceof HTMLElement) {\n            var r = n.parentElement;\n            (r === e || "none" !== window.getComputedStyle(r).display) && t.push(n);\n          }\n        }), t;\n      }(e);\n\n      r.current = t;\n    }\n  }, []), f(function () {\n    return document.addEventListener("keydown", a), function () {\n      document.removeEventListener("keydown", a);\n    };\n  }, []), l.createElement("div", {\n    ref: n,\n    "aria-orientation": "vertical",\n    className: d({\n      "rpv-core__menu": !0,\n      "rpv-core__menu--rtl": o\n    }),\n    role: "menu",\n    tabIndex: 0\n  }, t);\n}, exports.MenuDivider = function () {\n  return l.createElement("div", {\n    "aria-orientation": "horizontal",\n    className: "rpv-core__menu-divider",\n    role: "separator"\n  });\n}, exports.MenuItem = function (e) {\n  var t = e.checked,\n      n = void 0 !== t && t,\n      r = e.children,\n      o = e.icon,\n      a = void 0 === o ? null : o,\n      i = e.isDisabled,\n      c = void 0 !== i && i,\n      s = e.onClick,\n      p = l.useContext(u).direction === exports.TextDirection.RightToLeft;\n  return l.createElement("button", {\n    className: d({\n      "rpv-core__menu-item": !0,\n      "rpv-core__menu-item--disabled": c,\n      "rpv-core__menu-item--ltr": !p,\n      "rpv-core__menu-item--rtl": p\n    }),\n    role: "menuitem",\n    tabIndex: -1,\n    type: "button",\n    onClick: s\n  }, l.createElement("div", {\n    className: d({\n      "rpv-core__menu-item-icon": !0,\n      "rpv-core__menu-item-icon--ltr": !p,\n      "rpv-core__menu-item-icon--rtl": p\n    })\n  }, a), l.createElement("div", {\n    className: d({\n      "rpv-core__menu-item-label": !0,\n      "rpv-core__menu-item-label--ltr": !p,\n      "rpv-core__menu-item-label--rtl": p\n    })\n  }, r), l.createElement("div", {\n    className: d({\n      "rpv-core__menu-item-check": !0,\n      "rpv-core__menu-item-check--ltr": !p,\n      "rpv-core__menu-item-check--rtl": p\n    })\n  }, n && l.createElement(g, null)));\n}, exports.MinimalButton = function (e) {\n  var t = e.ariaLabel,\n      n = void 0 === t ? "" : t,\n      r = e.ariaKeyShortcuts,\n      o = void 0 === r ? "" : r,\n      a = e.children,\n      i = e.isDisabled,\n      c = void 0 !== i && i,\n      s = e.isSelected,\n      p = void 0 !== s && s,\n      f = e.onClick,\n      v = l.useContext(u).direction === exports.TextDirection.RightToLeft;\n  return l.createElement("button", E({\n    "aria-label": n\n  }, o && {\n    "aria-keyshortcuts": o\n  }, c && {\n    "aria-disabled": !0\n  }, {\n    className: d({\n      "rpv-core__minimal-button": !0,\n      "rpv-core__minimal-button--disabled": c,\n      "rpv-core__minimal-button--rtl": v,\n      "rpv-core__minimal-button--selected": p\n    }),\n    type: "button",\n    onClick: f\n  }), a);\n}, exports.Modal = function (e) {\n  var t = e.ariaControlsSuffix,\n      n = e.closeOnClickOutside,\n      r = e.closeOnEscape,\n      o = e.content,\n      a = e.target,\n      i = t || "" + S();\n  return l.createElement(k, {\n    target: function (e, t) {\n      return l.createElement("div", {\n        "aria-expanded": t ? "true" : "false",\n        "aria-haspopup": "dialog",\n        "aria-controls": "rpv-core__modal-body-" + i\n      }, a(e, t));\n    },\n    content: function (e) {\n      return l.createElement(R, null, l.createElement(L, {\n        ariaControlsSuffix: i,\n        closeOnClickOutside: n,\n        closeOnEscape: r,\n        onToggle: e\n      }, o(e)));\n    }\n  });\n}, exports.Popover = function (e) {\n  var t = e.ariaHasPopup,\n      n = void 0 === t ? "dialog" : t,\n      r = e.ariaControlsSuffix,\n      o = e.closeOnClickOutside,\n      a = e.closeOnEscape,\n      i = e.content,\n      c = e.offset,\n      s = e.position,\n      p = e.target,\n      u = T(),\n      d = u.opened,\n      f = u.toggle,\n      v = l.useRef(),\n      g = r || "" + S();\n  return l.createElement("div", {\n    ref: v,\n    "aria-expanded": d ? "true" : "false",\n    "aria-haspopup": n,\n    "aria-controls": "rpv-core__popver-body-" + g\n  }, p(f, d), d && l.createElement(l.Fragment, null, l.createElement(D, {\n    closeOnEscape: a,\n    onClose: f\n  }), l.createElement(M, {\n    ariaControlsSuffix: g,\n    closeOnClickOutside: o,\n    offset: c,\n    position: s,\n    targetRef: v,\n    onClose: f\n  }, i(f))));\n}, exports.PrimaryButton = x, exports.ProgressBar = function (e) {\n  var t = e.progress,\n      n = l.useContext(u).direction === exports.TextDirection.RightToLeft;\n  return l.createElement("div", {\n    className: d({\n      "rpv-core__progress-bar": !0,\n      "rpv-core__progress-bar--rtl": n\n    })\n  }, l.createElement("div", {\n    className: "rpv-core__progress-bar-progress",\n    style: {\n      width: t + "%"\n    }\n  }, t, "%"));\n}, exports.Separator = function () {\n  return l.createElement("div", {\n    className: "rpv-core__separator"\n  });\n}, exports.Spinner = y, exports.Splitter = function (e) {\n  var t = e.constrain,\n      n = l.useContext(u).direction === exports.TextDirection.RightToLeft,\n      r = l.useRef(),\n      o = l.useRef(),\n      a = l.useRef(),\n      i = l.useRef(0),\n      c = l.useRef(0),\n      s = l.useRef(0),\n      p = l.useRef(0),\n      d = function (e) {\n    var c = r.current,\n        l = o.current,\n        u = a.current;\n\n    if (c && l && u) {\n      var d = p.current,\n          f = e.clientX - i.current,\n          v = s.current + (n ? -f : f),\n          g = c.parentElement.getBoundingClientRect().width,\n          m = 100 * v / g;\n\n      if (c.classList.add("rpv-core__splitter--resizing"), t) {\n        var h = g - v - d;\n        if (!t({\n          firstHalfPercentage: m,\n          firstHalfSize: v,\n          secondHalfPercentage: 100 * h / g,\n          secondHalfSize: h\n        })) return;\n      }\n\n      l.style.width = m + "%", document.body.classList.add("rpv-core__splitter-body--resizing"), l.classList.add("rpv-core__splitter-sibling--resizing"), u.classList.add("rpv-core__splitter-sibling--resizing");\n    }\n  },\n      f = function (e) {\n    var t = r.current,\n        n = o.current,\n        i = a.current;\n    t && n && i && (document.body.classList.remove("rpv-core__splitter-body--resizing"), t.classList.remove("rpv-core__splitter--resizing"), n.classList.remove("rpv-core__splitter-sibling--resizing"), i.classList.remove("rpv-core__splitter-sibling--resizing"), document.removeEventListener("mousemove", d), document.removeEventListener("mouseup", f));\n  };\n\n  return l.useEffect(function () {\n    var e = r.current;\n    e && (p.current = e.getBoundingClientRect().width, o.current = e.previousElementSibling, a.current = e.nextElementSibling);\n  }, []), l.createElement("div", {\n    ref: r,\n    className: "rpv-core__splitter",\n    onMouseDown: function (e) {\n      var t = o.current;\n      t && (i.current = e.clientX, c.current = e.clientY, s.current = t.getBoundingClientRect().width, document.addEventListener("mousemove", d), document.addEventListener("mouseup", f));\n    }\n  });\n}, exports.TextBox = w, exports.ThemeContext = u, exports.Tooltip = function (e) {\n  var t = e.ariaControlsSuffix,\n      n = e.content,\n      r = e.offset,\n      o = e.position,\n      a = e.target,\n      i = T(),\n      c = i.opened,\n      s = i.toggle,\n      p = l.useRef(),\n      u = l.useRef(),\n      d = t || "" + S();\n  P(function () {\n    p.current && document.activeElement && p.current.contains(document.activeElement) && v();\n  });\n\n  var f = function () {\n    s(exports.ToggleStatus.Open);\n  },\n      v = function () {\n    s(exports.ToggleStatus.Close);\n  };\n\n  return l.createElement(l.Fragment, null, l.createElement("div", {\n    ref: p,\n    "aria-describedby": "rpv-core__tooltip-body-" + d,\n    onBlur: function (e) {\n      e.relatedTarget instanceof HTMLElement && e.currentTarget.parentElement && e.currentTarget.parentElement.contains(e.relatedTarget) ? u.current && (u.current.style.display = "none") : v();\n    },\n    onFocus: f,\n    onMouseEnter: f,\n    onMouseLeave: v\n  }, a), c && l.createElement(N, {\n    ariaControlsSuffix: d,\n    contentRef: u,\n    offset: r,\n    position: o,\n    targetRef: p\n  }, n()));\n}, exports.Viewer = function (e) {\n  var t = e.characterMap,\n      n = e.defaultScale,\n      r = e.fileUrl,\n      o = e.httpHeaders,\n      a = void 0 === o ? {} : o,\n      i = e.initialPage,\n      c = void 0 === i ? 0 : i,\n      s = e.localization,\n      p = e.plugins,\n      d = void 0 === p ? [] : p,\n      f = e.renderError,\n      v = e.renderPage,\n      g = e.renderLoader,\n      m = e.transformGetDocumentParams,\n      h = e.theme,\n      E = void 0 === h ? {\n    direction: exports.TextDirection.LeftToRight,\n    theme: "light"\n  } : h,\n      x = e.withCredentials,\n      y = void 0 !== x && x,\n      w = e.onDocumentAskPassword,\n      b = e.onDocumentLoad,\n      P = void 0 === b ? function () {} : b,\n      L = e.onPageChange,\n      R = void 0 === L ? function () {} : L,\n      T = e.onSwitchTheme,\n      k = void 0 === T ? function () {} : T,\n      C = e.onZoom,\n      S = void 0 === C ? function () {} : C,\n      O = l.useState({\n    data: r,\n    name: "string" == typeof r ? r : "",\n    shouldLoad: !1\n  }),\n      A = O[0],\n      M = O[1],\n      D = function (e, t) {\n    M({\n      data: t,\n      name: e,\n      shouldLoad: !0\n    });\n  },\n      N = l.useState(!1),\n      F = N[0],\n      W = N[1],\n      z = B(A);\n\n  l.useEffect(function () {\n    var e, t, n, o;\n    e = z.data, o = typeof (t = r), "string" === (n = typeof e) && "string" === o && e === t || "object" === n && "object" === o && e.length === t.length && e.every(function (e, n) {\n      return e === t[n];\n    }) || M({\n      data: r,\n      name: "string" == typeof r ? r : "",\n      shouldLoad: F\n    });\n  }, [r, F]);\n\n  var j = _({\n    onVisibilityChanged: function (e) {\n      W(e.isVisible), e.isVisible && M(function (e) {\n        return Object.assign({}, e, {\n          shouldLoad: !0\n        });\n      });\n    }\n  }),\n      V = "string" == typeof E ? {\n    direction: exports.TextDirection.LeftToRight,\n    theme: E\n  } : E,\n      q = l.useState(s || H),\n      Z = q[0],\n      U = q[1],\n      G = {\n    l10n: Z,\n    setL10n: U\n  },\n      J = Object.assign({}, {\n    direction: V.direction\n  }, Ne(V.theme || "light", k));\n\n  return l.useEffect(function () {\n    s && U(s);\n  }, [s]), l.createElement(I.Provider, {\n    value: G\n  }, l.createElement(u.Provider, {\n    value: J\n  }, l.createElement("div", {\n    ref: j,\n    className: "rpv-core__viewer rpv-core__viewer--" + J.currentTheme,\n    "data-testid": "core__viewer",\n    style: {\n      height: "100%",\n      width: "100%"\n    }\n  }, A.shouldLoad && l.createElement(De, {\n    characterMap: t,\n    file: A.data,\n    httpHeaders: a,\n    render: function (e) {\n      return l.createElement(Te, {\n        defaultScale: n,\n        doc: e,\n        render: function (t) {\n          return l.createElement(Le, {\n            currentFile: {\n              data: A.data,\n              name: A.name\n            },\n            defaultScale: n,\n            doc: e,\n            initialPage: c,\n            pageSize: t,\n            plugins: d,\n            renderPage: v,\n            viewerState: {\n              file: A,\n              pageIndex: c,\n              pageHeight: t.pageHeight,\n              pageWidth: t.pageWidth,\n              rotation: 0,\n              scale: t.scale\n            },\n            onDocumentLoad: P,\n            onOpenFile: D,\n            onPageChange: R,\n            onZoom: S\n          });\n        }\n      });\n    },\n    renderError: f,\n    renderLoader: g,\n    transformGetDocumentParams: m,\n    withCredentials: y,\n    onDocumentAskPassword: w\n  }))));\n}, exports.Worker = function (e) {\n  var t = e.children,\n      n = e.workerUrl;\n  return p.GlobalWorkerOptions.workerSrc = n, l.createElement(l.Fragment, null, t);\n}, exports.classNames = d, exports.createStore = function (e) {\n  var t = e || {},\n      n = {};\n  return {\n    subscribe: function (e, t) {\n      n[e] = (n[e] || []).concat(t);\n    },\n    unsubscribe: function (e, t) {\n      n[e] = (n[e] || []).filter(function (e) {\n        return e !== t;\n      });\n    },\n    update: function (e, r) {\n      var o;\n      t = E(E({}, t), ((o = {})[e] = r, o)), (n[e] || []).forEach(function (n) {\n        return n(t[e]);\n      });\n    },\n    get: function (e) {\n      return t[e];\n    }\n  };\n}, exports.getDestination = ee, exports.isMac = function () {\n  return "undefined" != typeof window && /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\n}, exports.useIntersectionObserver = _, exports.useIsomorphicLayoutEffect = f;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9389\n')},2672:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/**\n * A React component to view a PDF document\n *\n * @see https://react-pdf-viewer.dev\n * @license https://react-pdf-viewer.dev/license\n * @copyright 2019-2021 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n\n\nif (true) {\n  module.exports = __webpack_require__(9389);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYW5tYXJjaGl2ZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtcGRmLXZpZXdlci9jb3JlL2xpYi9pbmRleC5qcz84ODNlIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRWE7O0FBRWIsSUFBSUEsSUFBSixFQUEyQztBQUN2Q0MsNENBQUE7QUFDSCxDQUZELE1BRU8iLCJmaWxlIjoiMjY3Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBSZWFjdCBjb21wb25lbnQgdG8gdmlldyBhIFBERiBkb2N1bWVudFxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdC1wZGYtdmlld2VyLmRldlxuICogQGxpY2Vuc2UgaHR0cHM6Ly9yZWFjdC1wZGYtdmlld2VyLmRldi9saWNlbnNlXG4gKiBAY29weXJpZ2h0IDIwMTktMjAyMSBOZ3V5ZW4gSHV1IFBodW9jIDxtZUBwaHVvYy5uZz5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9jb3JlLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL2NvcmUuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2672\n")},5093:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: !0\n}));\n\nvar e = __webpack_require__(5466),\n    n = __webpack_require__(2672);\n\nfunction t(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  return e && Object.keys(e).forEach(function (t) {\n    if ("default" !== t) {\n      var r = Object.getOwnPropertyDescriptor(e, t);\n      Object.defineProperty(n, t, r.get ? r : {\n        enumerable: !0,\n        get: function () {\n          return e[t];\n        }\n      });\n    }\n  }), n.default = e, Object.freeze(n);\n}\n\nvar r,\n    l = t(e),\n    c = function () {\n  return (c = Object.assign || function (e) {\n    for (var n, t = 1, r = arguments.length; t < r; t++) for (var l in n = arguments[t]) Object.prototype.hasOwnProperty.call(n, l) && (e[l] = n[l]);\n\n    return e;\n  }).apply(this, arguments);\n},\n    u = function () {\n  return l.createElement(n.Icon, {\n    size: 16\n  }, l.createElement("path", {\n    d: "M0.5 12L23.5 12"\n  }), l.createElement("path", {\n    d: "M11.5 1L11.5 23"\n  }), l.createElement("path", {\n    d: "M8.5 4L11.5 1 14.5 4"\n  }), l.createElement("path", {\n    d: "M20.5 9L23.5 12 20.5 15"\n  }), l.createElement("path", {\n    d: "M3.5 15L0.5 12 3.5 9"\n  }), l.createElement("path", {\n    d: "M14.5 20L11.5 23 8.5 20"\n  }));\n},\n    o = {\n  left: 0,\n  top: 8\n},\n    a = function (e) {\n  var t = e.enableShortcuts,\n      r = e.onClick,\n      c = l.useContext(n.LocalizationContext).l10n,\n      a = c && c.fullScreen ? c.fullScreen.enterFullScreen : "Full screen",\n      i = t ? n.isMac() ? "Meta+Ctrl+F" : "F11" : "";\n  return l.createElement(n.Tooltip, {\n    ariaControlsSuffix: "full-screen-enter",\n    position: n.Position.BottomCenter,\n    target: l.createElement(n.MinimalButton, {\n      ariaKeyShortcuts: i,\n      ariaLabel: a,\n      onClick: r\n    }, l.createElement(u, null)),\n    content: function () {\n      return a;\n    },\n    offset: o\n  });\n};\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n\n\n!function (e) {\n  e[e.ExitFullScreen = 0] = "ExitFullScreen", e[e.FullScreenChange = 1] = "FullScreenChange", e[e.FullScreenElement = 2] = "FullScreenElement", e[e.FullScreenEnabled = 3] = "FullScreenEnabled", e[e.RequestFullScreen = 4] = "RequestFullScreen";\n}(r || (r = {}));\n\nvar i = {\n  ExitFullScreen: "exitFullscreen",\n  FullScreenChange: "fullscreenchange",\n  FullScreenElement: "fullscreenElement",\n  FullScreenEnabled: "fullscreenEnabled",\n  RequestFullScreen: "requestFullscreen"\n},\n    s = {\n  ExitFullScreen: "webkitExitFullscreen",\n  FullScreenChange: "webkitfullscreenchange",\n  FullScreenElement: "webkitFullscreenElement",\n  FullScreenEnabled: "webkitFullscreenEnabled",\n  RequestFullScreen: "webkitRequestFullscreen"\n},\n    f = {\n  ExitFullScreen: "msExitFullscreen",\n  FullScreenChange: "MSFullscreenChange",\n  FullScreenElement: "msFullscreenElement",\n  FullScreenEnabled: "msFullscreenEnabled",\n  RequestFullScreen: "msRequestFullscreen"\n},\n    E = "undefined" != typeof window,\n    S = E && (r.FullScreenEnabled in document && i || s.FullScreenEnabled in document && s || f.FullScreenEnabled in document && f) || i,\n    m = function (e) {\n  return E ? e[S.ExitFullScreen]() : Promise.resolve({});\n},\n    F = function () {\n  return E ? document[S.FullScreenElement] : null;\n},\n    d = function (e, n, t) {\n  var r = l.useRef(e.get("getPagesContainer") ? e.get("getPagesContainer")() : null),\n      c = function () {\n    var l = F() === r.current;\n    e.update("isFullScreen", l);\n    var c = e.get("zoom");\n    c && (l ? n(c) : t(c));\n  },\n      u = function (e) {\n    var n;\n    r.current = e(), n = c, E && document.addEventListener(S.FullScreenChange, n);\n  };\n\n  return l.useEffect(function () {\n    return e.subscribe("getPagesContainer", u), function () {\n      e.unsubscribe("getPagesContainer", u);\n    };\n  }, []), {\n    enterFullScreen: function () {\n      var e = r.current;\n      e && function () {\n        var e = r.current;\n        if (!e) return Promise.resolve();\n        var n = F();\n        return n && n !== e ? m(n) : Promise.resolve();\n      }().then(function () {\n        var n;\n        n = e, E && n[S.RequestFullScreen]();\n      });\n    }\n  };\n},\n    b = function (e) {\n  var n = e.children,\n      t = e.enableShortcuts,\n      r = e.store,\n      c = e.onEnterFullScreen,\n      u = e.onExitFullScreen;\n  return (n || function (e) {\n    return l.createElement(a, {\n      enableShortcuts: t,\n      onClick: e.onClick\n    });\n  })({\n    onClick: d(r, c, u).enterFullScreen\n  });\n},\n    v = function (e) {\n  var t = e.onClick,\n      r = l.useContext(n.LocalizationContext).l10n,\n      c = r && r.fullScreen ? r.fullScreen.enterFullScreen : "Full screen";\n  return l.createElement(n.MenuItem, {\n    icon: l.createElement(u, null),\n    onClick: t\n  }, c);\n},\n    h = function () {\n  return l.createElement(n.Icon, {\n    size: 16\n  }, l.createElement("path", {\n    d: "M11.5 23.499L11.5 14.499"\n  }), l.createElement("path", {\n    d: "M7.5 18.499L11.5 14.499 15.5 18.499"\n  }), l.createElement("path", {\n    d: "M11.5 1.499L11.5 10.499"\n  }), l.createElement("path", {\n    d: "M7.5 6.499L11.5 10.499 15.5 6.499"\n  }), l.createElement("path", {\n    d: "M20.5 12.499L1.5 12.499"\n  }));\n},\n    g = function (e) {\n  var t = e.store,\n      r = l.useState(!1),\n      c = r[0],\n      u = r[1],\n      o = l.useContext(n.LocalizationContext).l10n,\n      a = l.useContext(n.ThemeContext).direction === n.TextDirection.RightToLeft,\n      i = o && o.fullScreen ? o.fullScreen.exitFullScreen : "Exit full screen",\n      s = function (e) {\n    u(e);\n  };\n\n  return l.useEffect(function () {\n    return t.subscribe("isFullScreen", s), function () {\n      t.unsubscribe("isFullScreen", s);\n    };\n  }, []), l.createElement(l.Fragment, null, c && l.createElement("div", {\n    className: n.classNames({\n      "rpv-full-screen__exit-button": !0,\n      "rpv-full-screen__exit-button--ltr": !a,\n      "rpv-full-screen__exit-button--rtl": a\n    })\n  }, l.createElement("div", {\n    className: "rpv-full-screen__exit-button-content"\n  }, l.createElement(n.MinimalButton, {\n    ariaLabel: i,\n    onClick: function () {\n      u(!1);\n      var e = t.get("getPagesContainer");\n\n      if (e) {\n        var n = e();\n\n        if (n) {\n          var r = F();\n          r && r === n && m(document);\n        }\n      }\n    }\n  }, l.createElement(h, null)))));\n},\n    p = function (e) {\n  var t = e.containerRef,\n      r = e.store,\n      c = e.onEnterFullScreen,\n      u = e.onExitFullScreen,\n      o = d(r, c, u).enterFullScreen,\n      a = function (e) {\n    if (!e.shiftKey && !e.altKey && (n.isMac() ? e.metaKey && e.ctrlKey && "f" === e.key : "F11" === e.key)) {\n      var r = t.current;\n      r && document.activeElement && r.contains(document.activeElement) && (e.preventDefault(), o());\n    }\n  };\n\n  return l.useEffect(function () {\n    if (t.current) return document.addEventListener("keydown", a), function () {\n      document.removeEventListener("keydown", a);\n    };\n  }, [t.current]), l.createElement(l.Fragment, null);\n};\n\nexports.ExitFullScreenIcon = h, exports.FullScreenIcon = u, exports.fullScreenPlugin = function (e) {\n  var t = l.useMemo(function () {\n    return Object.assign({}, {\n      enableShortcuts: !0,\n      onEnterFullScreen: function () {},\n      onExitFullScreen: function () {}\n    }, e);\n  }, []),\n      r = l.useMemo(function () {\n    return n.createStore({});\n  }, []),\n      u = function (e) {\n    return l.createElement(b, c({}, e, {\n      enableShortcuts: t.enableShortcuts,\n      store: r,\n      onEnterFullScreen: t.onEnterFullScreen,\n      onExitFullScreen: t.onExitFullScreen\n    }));\n  },\n      o = function () {\n    return l.createElement(g, {\n      store: r\n    });\n  };\n\n  return {\n    install: function (e) {\n      r.update("getPagesContainer", e.getPagesContainer), r.update("zoom", e.zoom);\n    },\n    renderViewer: function (e) {\n      var n = e.slot;\n      return n.subSlot && (n.subSlot.children = l.createElement(l.Fragment, null, t.enableShortcuts && l.createElement(p, {\n        containerRef: e.containerRef,\n        store: r,\n        onEnterFullScreen: t.onEnterFullScreen,\n        onExitFullScreen: t.onExitFullScreen\n      }), l.createElement(o, null), n.subSlot.children)), n;\n    },\n    EnterFullScreen: u,\n    EnterFullScreenButton: function () {\n      return l.createElement(u, null, function (e) {\n        return l.createElement(a, c({\n          enableShortcuts: t.enableShortcuts\n        }, e));\n      });\n    },\n    EnterFullScreenMenuItem: function (e) {\n      return l.createElement(u, null, function (n) {\n        return l.createElement(v, {\n          onClick: function () {\n            n.onClick(), e.onClick();\n          }\n        });\n      });\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5093\n')},6114:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/**\n * A React component to view a PDF document\n *\n * @see https://react-pdf-viewer.dev\n * @license https://react-pdf-viewer.dev/license\n * @copyright 2019-2021 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n\n\nif (true) {\n  module.exports = __webpack_require__(5093);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYW5tYXJjaGl2ZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtcGRmLXZpZXdlci9mdWxsLXNjcmVlbi9saWIvaW5kZXguanM/ODYwOCJdLCJuYW1lcyI6WyJwcm9jZXNzIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVhOztBQUViLElBQUlBLElBQUosRUFBMkM7QUFDdkNDLDRDQUFBO0FBQ0gsQ0FGRCxNQUVPIiwiZmlsZSI6IjYxMTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgUmVhY3QgY29tcG9uZW50IHRvIHZpZXcgYSBQREYgZG9jdW1lbnRcbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3QtcGRmLXZpZXdlci5kZXZcbiAqIEBsaWNlbnNlIGh0dHBzOi8vcmVhY3QtcGRmLXZpZXdlci5kZXYvbGljZW5zZVxuICogQGNvcHlyaWdodCAyMDE5LTIwMjEgTmd1eWVuIEh1dSBQaHVvYyA8bWVAcGh1b2Mubmc+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvZnVsbC1zY3JlZW4ubWluLmpzJyk7XG59IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvZnVsbC1zY3JlZW4uanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6114\n")},2842:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: !0\n}));\n\nvar e = __webpack_require__(5466),\n    t = __webpack_require__(2672);\n\nfunction n(e) {\n  if (e && e.__esModule) return e;\n  var t = Object.create(null);\n  return e && Object.keys(e).forEach(function (n) {\n    if ("default" !== n) {\n      var o = Object.getOwnPropertyDescriptor(e, n);\n      Object.defineProperty(t, n, o.get ? o : {\n        enumerable: !0,\n        get: function () {\n          return e[n];\n        }\n      });\n    }\n  }), t.default = e, Object.freeze(t);\n}\n\nvar o = n(e),\n    r = function () {\n  return (r = Object.assign || function (e) {\n    for (var t, n = 1, o = arguments.length; n < o; n++) for (var r in t = arguments[n]) Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);\n\n    return e;\n  }).apply(this, arguments);\n},\n    a = function () {\n  return o.createElement(t.Icon, {\n    size: 16\n  }, o.createElement("path", {\n    d: "M11.5 19.5L11.5 5"\n  }), o.createElement("path", {\n    d: "M17 14L11.5 19.5 6 14"\n  }), o.createElement("path", {\n    d: "M17.5.5h5a1,1,0,0,1,1,1v21a1,1,0,0,1-1,1h-5"\n  }), o.createElement("path", {\n    d: "M6.5.5h-5a1,1,0,0,0-1,1v21a1,1,0,0,0,1,1h5"\n  }));\n},\n    l = {\n  left: 0,\n  top: 8\n},\n    c = function (e) {\n  var n = e.onClick,\n      r = o.useContext(t.LocalizationContext).l10n,\n      c = r && r.download ? r.download.download : "Download";\n  return o.createElement(t.Tooltip, {\n    ariaControlsSuffix: "get-file",\n    position: t.Position.BottomCenter,\n    target: o.createElement(t.MinimalButton, {\n      ariaLabel: c,\n      onClick: n\n    }, o.createElement(a, null)),\n    content: function () {\n      return c;\n    },\n    offset: l\n  });\n},\n    i = function (e) {\n  var t = e.children,\n      n = e.fileNameGenerator,\n      r = e.store,\n      a = o.useState(r.get("file")),\n      l = a[0],\n      i = a[1],\n      u = function (e) {\n    i(e);\n  };\n\n  o.useEffect(function () {\n    return r.subscribe("file", u), function () {\n      r.unsubscribe("file", u);\n    };\n  }, []);\n  return (t || function (e) {\n    return o.createElement(c, {\n      onClick: e.onClick\n    });\n  })({\n    onClick: function () {\n      var e, t, o, r;\n      l && (e = l, t = n(l), o = "string" == typeof e.data ? "" : URL.createObjectURL(new Blob([e.data], {\n        type: "application/pdf"\n      })), (r = document.createElement("a")).style.display = "none", r.href = o || e.name, r.setAttribute("download", t), document.body.appendChild(r), r.click(), document.body.removeChild(r), o && URL.revokeObjectURL(o));\n    }\n  });\n},\n    u = function (e) {\n  var n = e.onClick,\n      r = o.useContext(t.LocalizationContext).l10n,\n      l = r && r.download ? r.download.download : "Download";\n  return o.createElement(t.MenuItem, {\n    icon: o.createElement(a, null),\n    onClick: n\n  }, l);\n};\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n\n\nexports.DownloadIcon = a, exports.getFilePlugin = function (e) {\n  var n = o.useMemo(function () {\n    return t.createStore({});\n  }, []),\n      a = function (e) {\n    return "object" == typeof e.data ? "document.pdf" : (t = e.name, (n = t.split("/").pop()) ? n.split("#")[0].split("?")[0] : t);\n    var t, n;\n  },\n      l = function (t) {\n    return o.createElement(i, r({}, t, {\n      fileNameGenerator: e && e.fileNameGenerator || a,\n      store: n\n    }));\n  };\n\n  return {\n    onViewerStateChange: function (e) {\n      return n.update("file", e.file), e;\n    },\n    Download: l,\n    DownloadButton: function () {\n      return o.createElement(l, null, function (e) {\n        return o.createElement(c, r({}, e));\n      });\n    },\n    DownloadMenuItem: function (e) {\n      return o.createElement(l, null, function (t) {\n        return o.createElement(u, {\n          onClick: function () {\n            t.onClick(), e.onClick();\n          }\n        });\n      });\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2842\n')},8039:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/**\n * A React component to view a PDF document\n *\n * @see https://react-pdf-viewer.dev\n * @license https://react-pdf-viewer.dev/license\n * @copyright 2019-2021 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n\n\nif (true) {\n  module.exports = __webpack_require__(2842);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYW5tYXJjaGl2ZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtcGRmLXZpZXdlci9nZXQtZmlsZS9saWIvaW5kZXguanM/ZjVkOSJdLCJuYW1lcyI6WyJwcm9jZXNzIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVhOztBQUViLElBQUlBLElBQUosRUFBMkM7QUFDdkNDLDRDQUFBO0FBQ0gsQ0FGRCxNQUVPIiwiZmlsZSI6IjgwMzkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgUmVhY3QgY29tcG9uZW50IHRvIHZpZXcgYSBQREYgZG9jdW1lbnRcbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3QtcGRmLXZpZXdlci5kZXZcbiAqIEBsaWNlbnNlIGh0dHBzOi8vcmVhY3QtcGRmLXZpZXdlci5kZXYvbGljZW5zZVxuICogQGNvcHlyaWdodCAyMDE5LTIwMjEgTmd1eWVuIEh1dSBQaHVvYyA8bWVAcGh1b2Mubmc+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvZ2V0LWZpbGUubWluLmpzJyk7XG59IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvZ2V0LWZpbGUuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8039\n")},8038:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: !0\n}));\n\nvar e = __webpack_require__(5466),\n    t = __webpack_require__(2672);\n\nfunction n(e) {\n  if (e && e.__esModule) return e;\n  var t = Object.create(null);\n  return e && Object.keys(e).forEach(function (n) {\n    if ("default" !== n) {\n      var r = Object.getOwnPropertyDescriptor(e, n);\n      Object.defineProperty(t, n, r.get ? r : {\n        enumerable: !0,\n        get: function () {\n          return e[n];\n        }\n      });\n    }\n  }), t.default = e, Object.freeze(t);\n}\n\nvar r = n(e),\n    o = function () {\n  return (o = Object.assign || function (e) {\n    for (var t, n = 1, r = arguments.length; n < r; n++) for (var o in t = arguments[n]) Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);\n\n    return e;\n  }).apply(this, arguments);\n},\n    i = function () {\n  return r.createElement(t.Icon, {\n    size: 16\n  }, r.createElement("path", {\n    d: "M12.5 4.5L12.5 19.5"\n  }), r.createElement("path", {\n    d: "M18 10L12.5 4.5 7 10"\n  }), r.createElement("path", {\n    d: "M17.5.5h5a1,1,0,0,1,1,1v21a1,1,0,0,1-1,1h-5"\n  }), r.createElement("path", {\n    d: "M6.5.5h-5a1,1,0,0,0-1,1v21a1,1,0,0,0,1,1h5"\n  }));\n},\n    c = function (e) {\n  var t = r.useRef(),\n      n = function () {\n    var n = t.current;\n    n && (n.click(), e.get("triggerOpenFile") && e.update("triggerOpenFile", !1));\n  },\n      o = function (e) {\n    e && n();\n  };\n\n  return r.useEffect(function () {\n    return e.subscribe("triggerOpenFile", o), function () {\n      e.unsubscribe("triggerOpenFile", o);\n    };\n  }, []), {\n    inputRef: t,\n    openFile: n\n  };\n},\n    u = {\n  left: 0,\n  top: 8\n},\n    a = function (e) {\n  var n = e.enableShortcuts,\n      o = e.store,\n      a = e.onClick,\n      l = r.useContext(t.LocalizationContext).l10n,\n      p = l && l.open ? l.open.openFile : "Open file",\n      f = c(o),\n      s = f.inputRef,\n      m = f.openFile,\n      v = n ? t.isMac() ? "Meta+O" : "Ctrl+O" : "";\n  return r.createElement(t.Tooltip, {\n    ariaControlsSuffix: "open",\n    position: t.Position.BottomCenter,\n    target: r.createElement("div", {\n      className: "rpv-open__input-wrapper"\n    }, r.createElement("input", {\n      ref: s,\n      className: "rpv-open__input",\n      multiple: !1,\n      tabIndex: -1,\n      title: "",\n      type: "file",\n      onChange: a\n    }), r.createElement(t.MinimalButton, {\n      ariaKeyShortcuts: v,\n      ariaLabel: p,\n      onClick: m\n    }, r.createElement(i, null))),\n    content: function () {\n      return p;\n    },\n    offset: u\n  });\n},\n    l = function (e) {\n  var t = e.children,\n      n = e.enableShortcuts,\n      o = e.store;\n  return (t || function (e) {\n    return r.createElement(a, {\n      enableShortcuts: n,\n      store: o,\n      onClick: e.onClick\n    });\n  })({\n    onClick: function (e) {\n      var t = e.target.files;\n\n      if (t && t.length) {\n        var n = o.get("openFile");\n        n && n(t[0]);\n      }\n    }\n  });\n},\n    p = function (e) {\n  var n = e.store,\n      o = e.onClick,\n      u = r.useContext(t.LocalizationContext).l10n,\n      a = u && u.open ? u.open.openFile : "Open file",\n      l = c(n),\n      p = l.inputRef,\n      f = l.openFile;\n  return r.createElement(t.MenuItem, {\n    icon: r.createElement(i, null),\n    onClick: f\n  }, r.createElement("div", {\n    className: "rpv-open__input-wrapper"\n  }, r.createElement("input", {\n    ref: p,\n    className: "rpv-open__input",\n    multiple: !1,\n    tabIndex: -1,\n    title: "",\n    type: "file",\n    onChange: o\n  }), a));\n},\n    f = function (e) {\n  var n = e.containerRef,\n      o = e.store,\n      i = function (e) {\n    if (!e.shiftKey && !e.altKey && "o" === e.key && (t.isMac() ? e.metaKey : e.ctrlKey)) {\n      var r = n.current;\n      r && document.activeElement && r.contains(document.activeElement) && (e.preventDefault(), o.update("triggerOpenFile", !0));\n    }\n  };\n\n  return r.useEffect(function () {\n    if (n.current) return document.addEventListener("keydown", i), function () {\n      document.removeEventListener("keydown", i);\n    };\n  }, [n.current]), r.createElement(r.Fragment, null);\n};\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n\n\nexports.OpenFileIcon = i, exports.openPlugin = function (e) {\n  var n = r.useMemo(function () {\n    return Object.assign({}, {\n      enableShortcuts: !0\n    }, e);\n  }, []),\n      i = r.useMemo(function () {\n    return t.createStore({});\n  }, []),\n      c = function (e) {\n    return r.createElement(l, o({\n      enableShortcuts: n.enableShortcuts\n    }, e, {\n      store: i\n    }));\n  };\n\n  return {\n    install: function (e) {\n      i.update("openFile", e.openFile);\n    },\n    renderViewer: function (e) {\n      var t = e.slot,\n          c = {\n        children: r.createElement(r.Fragment, null, n.enableShortcuts && r.createElement(f, {\n          containerRef: e.containerRef,\n          store: i\n        }), t.children)\n      };\n      return o(o({}, t), c);\n    },\n    Open: c,\n    OpenButton: function () {\n      return r.createElement(c, null);\n    },\n    OpenMenuItem: function () {\n      return r.createElement(c, null, function (e) {\n        return r.createElement(p, {\n          store: i,\n          onClick: e.onClick\n        });\n      });\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8038\n')},8119:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/**\n * A React component to view a PDF document\n *\n * @see https://react-pdf-viewer.dev\n * @license https://react-pdf-viewer.dev/license\n * @copyright 2019-2021 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n\n\nif (true) {\n  module.exports = __webpack_require__(8038);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYW5tYXJjaGl2ZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtcGRmLXZpZXdlci9vcGVuL2xpYi9pbmRleC5qcz8wNDc2Il0sIm5hbWVzIjpbInByb2Nlc3MiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRWE7O0FBRWIsSUFBSUEsSUFBSixFQUEyQztBQUN2Q0MsNENBQUE7QUFDSCxDQUZELE1BRU8iLCJmaWxlIjoiODExOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBSZWFjdCBjb21wb25lbnQgdG8gdmlldyBhIFBERiBkb2N1bWVudFxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdC1wZGYtdmlld2VyLmRldlxuICogQGxpY2Vuc2UgaHR0cHM6Ly9yZWFjdC1wZGYtdmlld2VyLmRldi9saWNlbnNlXG4gKiBAY29weXJpZ2h0IDIwMTktMjAyMSBOZ3V5ZW4gSHV1IFBodW9jIDxtZUBwaHVvYy5uZz5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9vcGVuLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL29wZW4uanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8119\n")},2230:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: !0\n}));\n\nvar e = __webpack_require__(5466),\n    t = __webpack_require__(2672);\n\nfunction n(e) {\n  if (e && e.__esModule) return e;\n  var t = Object.create(null);\n  return e && Object.keys(e).forEach(function (n) {\n    if ("default" !== n) {\n      var r = Object.getOwnPropertyDescriptor(e, n);\n      Object.defineProperty(t, n, r.get ? r : {\n        enumerable: !0,\n        get: function () {\n          return e[n];\n        }\n      });\n    }\n  }), t.default = e, Object.freeze(t);\n}\n\nvar r = n(e),\n    a = function () {\n  return (a = Object.assign || function (e) {\n    for (var t, n = 1, r = arguments.length; n < r; n++) for (var a in t = arguments[n]) Object.prototype.hasOwnProperty.call(t, a) && (e[a] = t[a]);\n\n    return e;\n  }).apply(this, arguments);\n},\n    o = function (e) {\n  var n = r.useState(e.get("currentPage") || 0),\n      a = n[0],\n      o = n[1],\n      i = function (e) {\n    o(e);\n  };\n\n  return t.useIsomorphicLayoutEffect(function () {\n    return e.subscribe("currentPage", i), function () {\n      e.unsubscribe("currentPage", i);\n    };\n  }, []), {\n    currentPage: a\n  };\n},\n    i = function (e) {\n  var t = r.useState(e.get("numberOfPages") || 0),\n      n = t[0],\n      a = t[1],\n      o = function (e) {\n    a(e);\n  };\n\n  return r.useEffect(function () {\n    return e.subscribe("numberOfPages", o), function () {\n      e.unsubscribe("numberOfPages", o);\n    };\n  }, []), {\n    numberOfPages: n\n  };\n},\n    u = function (e) {\n  var n = e.store,\n      a = r.useContext(t.LocalizationContext).l10n,\n      u = r.useState("1"),\n      c = u[0],\n      l = u[1],\n      s = o(n).currentPage,\n      g = i(n).numberOfPages;\n  r.useEffect(function () {\n    return l("" + (s + 1));\n  }, [s]);\n\n  var f = function (e) {\n    var t = n.get("jumpToPage");\n    t && t(e);\n  },\n      m = a && a.pageNavigation ? a.pageNavigation.enterPageNumber : "Enter a page number";\n\n  return r.createElement("span", {\n    className: "rpv-page-navigation__current-page-input"\n  }, r.createElement(t.TextBox, {\n    ariaLabel: m,\n    type: "text",\n    value: c,\n    onChange: l,\n    onKeyDown: function (e) {\n      switch (e.key) {\n        case "ArrowUp":\n          (r = s - 1) >= 0 && (l("" + (r + 1)), f(r));\n          break;\n\n        case "ArrowDown":\n          (n = s + 1) < g && (l("" + (n + 1)), f(n));\n          break;\n\n        case "Enter":\n          t = parseInt(c, 10), "" === c || t < 1 || t > g ? l("" + (s + 1)) : f(t - 1);\n      }\n\n      var t, n, r;\n    }\n  }));\n},\n    c = function (e) {\n  var t = e.children,\n      n = e.store;\n  return (t || function (e) {\n    return r.createElement(r.Fragment, null, e.currentPage + 1);\n  })({\n    currentPage: o(n).currentPage,\n    numberOfPages: i(n).numberOfPages\n  });\n},\n    l = function () {\n  return r.createElement(t.Icon, {\n    size: 16\n  }, r.createElement("path", {\n    d: "M21.783,21.034H2.332c-0.552,0-1-0.448-1-1c0-0.182,0.05-0.361,0.144-0.517L11.2,3.448\\n            c0.286-0.472,0.901-0.624,1.373-0.338c0.138,0.084,0.254,0.2,0.338,0.338l9.726,16.069c0.286,0.473,0.134,1.087-0.339,1.373\\n            C22.143,20.984,21.965,21.034,21.783,21.034z"\n  }));\n},\n    s = {\n  left: 0,\n  top: 8\n},\n    g = function (e) {\n  var n = e.isDisabled,\n      a = e.onClick,\n      o = r.useContext(t.LocalizationContext).l10n,\n      i = o && o.pageNavigation ? o.pageNavigation.goToFirstPage : "First page";\n  return r.createElement(t.Tooltip, {\n    ariaControlsSuffix: "page-navigation-first",\n    position: t.Position.BottomCenter,\n    target: r.createElement(t.MinimalButton, {\n      ariaLabel: i,\n      isDisabled: n,\n      onClick: a\n    }, r.createElement(l, null)),\n    content: function () {\n      return i;\n    },\n    offset: s\n  });\n},\n    f = function (e) {\n  var t = e.children,\n      n = e.store;\n  return (t || function (e) {\n    return r.createElement(g, {\n      isDisabled: e.isDisabled,\n      onClick: e.onClick\n    });\n  })({\n    isDisabled: 0 === o(n).currentPage,\n    onClick: function () {\n      var e = n.get("jumpToPage");\n      e && e(0);\n    }\n  });\n},\n    m = function (e) {\n  var n = e.isDisabled,\n      a = e.onClick,\n      o = r.useContext(t.LocalizationContext).l10n,\n      i = o && o.pageNavigation ? o.pageNavigation.goToFirstPage : "First page";\n  return r.createElement(t.MenuItem, {\n    icon: r.createElement(l, null),\n    isDisabled: n,\n    onClick: a\n  }, i);\n},\n    p = function () {\n  return r.createElement(t.Icon, {\n    size: 16\n  }, r.createElement("path", {\n    d: "M2.32,2.966h19.452c0.552,0.001,1,0.449,0.999,1.001c0,0.182-0.05,0.36-0.144,0.516L12.9,20.552\\n            c-0.286,0.472-0.901,0.624-1.373,0.338c-0.138-0.084-0.254-0.2-0.338-0.338L1.465,4.483C1.179,4.01,1.331,3.396,1.804,3.11\\n            C1.96,3.016,2.138,2.966,2.32,2.966z"\n  }));\n},\n    C = {\n  left: 0,\n  top: 8\n},\n    b = function (e) {\n  var n = e.isDisabled,\n      a = e.onClick,\n      o = r.useContext(t.LocalizationContext).l10n,\n      i = o && o.pageNavigation ? o.pageNavigation.goToLastPage : "Last page";\n  return r.createElement(t.Tooltip, {\n    ariaControlsSuffix: "page-navigation-last",\n    position: t.Position.BottomCenter,\n    target: r.createElement(t.MinimalButton, {\n      ariaLabel: i,\n      isDisabled: n,\n      onClick: a\n    }, r.createElement(p, null)),\n    content: function () {\n      return i;\n    },\n    offset: C\n  });\n},\n    P = function (e) {\n  var t = e.children,\n      n = e.store,\n      a = o(n).currentPage,\n      u = i(n).numberOfPages;\n  return (t || function (e) {\n    return r.createElement(b, {\n      isDisabled: e.isDisabled,\n      onClick: e.onClick\n    });\n  })({\n    isDisabled: a + 1 >= u,\n    onClick: function () {\n      var e = n.get("jumpToPage");\n      e && e(u - 1);\n    }\n  });\n},\n    v = function (e) {\n  var n = e.isDisabled,\n      a = e.onClick,\n      o = r.useContext(t.LocalizationContext).l10n,\n      i = o && o.pageNavigation ? o.pageNavigation.goToLastPage : "Last page";\n  return r.createElement(t.MenuItem, {\n    icon: r.createElement(p, null),\n    isDisabled: n,\n    onClick: a\n  }, i);\n},\n    E = function () {\n  return r.createElement(t.Icon, {\n    size: 16\n  }, r.createElement("path", {\n    d: "M0.541,5.627L11.666,18.2c0.183,0.207,0.499,0.226,0.706,0.043c0.015-0.014,0.03-0.028,0.043-0.043\\n            L23.541,5.627"\n  }));\n},\n    d = {\n  left: 0,\n  top: 8\n},\n    k = function (e) {\n  var n = e.isDisabled,\n      a = e.onClick,\n      o = r.useContext(t.LocalizationContext).l10n,\n      i = o && o.pageNavigation ? o.pageNavigation.goToNextPage : "Next page";\n  return r.createElement(t.Tooltip, {\n    ariaControlsSuffix: "page-navigation-next",\n    position: t.Position.BottomCenter,\n    target: r.createElement(t.MinimalButton, {\n      ariaLabel: i,\n      isDisabled: n,\n      onClick: a\n    }, r.createElement(E, null)),\n    content: function () {\n      return i;\n    },\n    offset: d\n  });\n},\n    x = function (e) {\n  var t = e.children,\n      n = e.store,\n      a = o(n).currentPage,\n      u = i(n).numberOfPages;\n  return (t || function (e) {\n    return r.createElement(k, {\n      onClick: e.onClick,\n      isDisabled: e.isDisabled\n    });\n  })({\n    isDisabled: a + 1 >= u,\n    onClick: function () {\n      var e = n.get("jumpToPage");\n      e && e(a + 1);\n    }\n  });\n},\n    D = function (e) {\n  var n = e.isDisabled,\n      a = e.onClick,\n      o = r.useContext(t.LocalizationContext).l10n,\n      i = o && o.pageNavigation ? o.pageNavigation.goToNextPage : "Next page";\n  return r.createElement(t.MenuItem, {\n    icon: r.createElement(E, null),\n    isDisabled: n,\n    onClick: a\n  }, i);\n},\n    T = function () {\n  return r.createElement(t.Icon, {\n    size: 16\n  }, r.createElement("path", {\n    d: "M23.535,18.373L12.409,5.8c-0.183-0.207-0.499-0.226-0.706-0.043C11.688,5.77,11.674,5.785,11.66,5.8\\n            L0.535,18.373"\n  }));\n},\n    L = {\n  left: 0,\n  top: 8\n},\n    N = function (e) {\n  var n = e.isDisabled,\n      a = e.onClick,\n      o = r.useContext(t.LocalizationContext).l10n,\n      i = o && o.pageNavigation ? o.pageNavigation.goToPreviousPage : "Previous page";\n  return r.createElement(t.Tooltip, {\n    ariaControlsSuffix: "page-navigation-previous",\n    position: t.Position.BottomCenter,\n    target: r.createElement(t.MinimalButton, {\n      ariaLabel: i,\n      isDisabled: n,\n      onClick: a\n    }, r.createElement(T, null)),\n    content: function () {\n      return i;\n    },\n    offset: L\n  });\n},\n    I = function (e) {\n  var t = e.store,\n      n = e.children,\n      a = o(t).currentPage;\n  return (n || function (e) {\n    return r.createElement(N, {\n      isDisabled: e.isDisabled,\n      onClick: e.onClick\n    });\n  })({\n    isDisabled: a <= 0,\n    onClick: function () {\n      var e = t.get("jumpToPage");\n      e && e(a - 1);\n    }\n  });\n},\n    O = function (e) {\n  var n = e.isDisabled,\n      a = e.onClick,\n      o = r.useContext(t.LocalizationContext).l10n,\n      i = o && o.pageNavigation ? o.pageNavigation.goToPreviousPage : "Previous page";\n  return r.createElement(t.MenuItem, {\n    icon: r.createElement(T, null),\n    isDisabled: n,\n    onClick: a\n  }, i);\n};\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n\n\nexports.DownArrowIcon = p, exports.NextIcon = E, exports.PreviousIcon = T, exports.UpArrowIcon = l, exports.pageNavigationPlugin = function () {\n  var e = r.useMemo(function () {\n    return t.createStore();\n  }, []),\n      n = function (t) {\n    return r.createElement(f, a({}, t, {\n      store: e\n    }));\n  },\n      o = function (t) {\n    return r.createElement(P, a({}, t, {\n      store: e\n    }));\n  },\n      i = function (t) {\n    return r.createElement(x, a({}, t, {\n      store: e\n    }));\n  },\n      l = function (t) {\n    return r.createElement(I, a({}, t, {\n      store: e\n    }));\n  };\n\n  return {\n    install: function (t) {\n      e.update("jumpToPage", t.jumpToPage);\n    },\n    onDocumentLoad: function (t) {\n      e.update("numberOfPages", t.doc.numPages);\n    },\n    onViewerStateChange: function (t) {\n      return e.update("currentPage", t.pageIndex), t;\n    },\n    jumpToPage: function (t) {\n      var n = e.get("jumpToPage");\n      n && n(t);\n    },\n    CurrentPageInput: function () {\n      return r.createElement(u, {\n        store: e\n      });\n    },\n    CurrentPageLabel: function (t) {\n      return r.createElement(c, a({}, t, {\n        store: e\n      }));\n    },\n    GoToFirstPage: n,\n    GoToFirstPageButton: function () {\n      return r.createElement(n, null, function (e) {\n        return r.createElement(g, a({}, e));\n      });\n    },\n    GoToFirstPageMenuItem: function (e) {\n      return r.createElement(n, null, function (t) {\n        return r.createElement(m, {\n          isDisabled: t.isDisabled,\n          onClick: function () {\n            t.onClick(), e.onClick();\n          }\n        });\n      });\n    },\n    GoToLastPage: o,\n    GoToLastPageButton: function () {\n      return r.createElement(o, null, function (e) {\n        return r.createElement(b, a({}, e));\n      });\n    },\n    GoToLastPageMenuItem: function (e) {\n      return r.createElement(o, null, function (t) {\n        return r.createElement(v, {\n          isDisabled: t.isDisabled,\n          onClick: function () {\n            t.onClick(), e.onClick();\n          }\n        });\n      });\n    },\n    GoToNextPage: i,\n    GoToNextPageButton: function () {\n      return r.createElement(i, null, function (e) {\n        return r.createElement(k, a({}, e));\n      });\n    },\n    GoToNextPageMenuItem: function (e) {\n      return r.createElement(i, null, function (t) {\n        return r.createElement(D, {\n          isDisabled: t.isDisabled,\n          onClick: function () {\n            t.onClick(), e.onClick();\n          }\n        });\n      });\n    },\n    GoToPreviousPage: l,\n    GoToPreviousPageButton: function () {\n      return r.createElement(l, null, function (e) {\n        return r.createElement(N, a({}, e));\n      });\n    },\n    GoToPreviousPageMenuItem: function (e) {\n      return r.createElement(l, null, function (t) {\n        return r.createElement(O, {\n          isDisabled: t.isDisabled,\n          onClick: function () {\n            t.onClick(), e.onClick();\n          }\n        });\n      });\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2230\n')},633:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/**\n * A React component to view a PDF document\n *\n * @see https://react-pdf-viewer.dev\n * @license https://react-pdf-viewer.dev/license\n * @copyright 2019-2021 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n\n\nif (true) {\n  module.exports = __webpack_require__(2230);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYW5tYXJjaGl2ZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtcGRmLXZpZXdlci9wYWdlLW5hdmlnYXRpb24vbGliL2luZGV4LmpzPzlkYjYiXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFYTs7QUFFYixJQUFJQSxJQUFKLEVBQTJDO0FBQ3ZDQyw0Q0FBQTtBQUNILENBRkQsTUFFTyIsImZpbGUiOiI2MzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgUmVhY3QgY29tcG9uZW50IHRvIHZpZXcgYSBQREYgZG9jdW1lbnRcbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3QtcGRmLXZpZXdlci5kZXZcbiAqIEBsaWNlbnNlIGh0dHBzOi8vcmVhY3QtcGRmLXZpZXdlci5kZXYvbGljZW5zZVxuICogQGNvcHlyaWdodCAyMDE5LTIwMjEgTmd1eWVuIEh1dSBQaHVvYyA8bWVAcGh1b2Mubmc+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcGFnZS1uYXZpZ2F0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3BhZ2UtbmF2aWdhdGlvbi5qcycpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///633\n")},2704:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: !0\n}));\n\nvar e = __webpack_require__(5466),\n    t = __webpack_require__(2672),\n    n = __webpack_require__(6116);\n\nfunction r(e) {\n  if (e && e.__esModule) return e;\n  var t = Object.create(null);\n  return e && Object.keys(e).forEach(function (n) {\n    if ("default" !== n) {\n      var r = Object.getOwnPropertyDescriptor(e, n);\n      Object.defineProperty(t, n, r.get ? r : {\n        enumerable: !0,\n        get: function () {\n          return e[n];\n        }\n      });\n    }\n  }), t.default = e, Object.freeze(t);\n}\n\nvar a,\n    o = r(e),\n    i = function () {\n  return (i = Object.assign || function (e) {\n    for (var t, n = 1, r = arguments.length; n < r; n++) for (var a in t = arguments[n]) Object.prototype.hasOwnProperty.call(t, a) && (e[a] = t[a]);\n\n    return e;\n  }).apply(this, arguments);\n},\n    c = function () {\n  return o.createElement(t.Icon, {\n    size: 16\n  }, o.createElement("path", {\n    d: "M7.5,19.499h9 M7.5,16.499h9 M5.5,16.5h-3c-1.103-0.003-1.997-0.897-2-2v-6c0.003-1.103,0.897-1.997,2-2h19\\n            c1.103,0.003,1.997,0.897,2,2v6c-0.003,1.103-0.897,1.997-2,2h-3\\n            M5.5,4.5v-4h9.586c0.265,0,0.52,0.105,0.707,0.293l2.414,2.414\\n            C18.395,3.394,18.5,3.649,18.5,3.914V4.5\\n            M18.5,22.5c0,0.552-0.448,1-1,1h-11c-0.552,0-1-0.448-1-1v-9h13V22.5z\\n            M3.5,8.499\\n            c0.552,0,1,0.448,1,1s-0.448,1-1,1s-1-0.448-1-1S2.948,8.499,3.5,8.499z\\n            M14.5,0.499v4h4"\n  }));\n},\n    u = {\n  left: 0,\n  top: 8\n},\n    l = function (e) {\n  var n = e.enableShortcuts,\n      r = e.onClick,\n      a = o.useContext(t.LocalizationContext).l10n,\n      i = a && a.print ? a.print.print : "Print",\n      l = n ? t.isMac() ? "Meta+P" : "Ctrl+P" : "";\n  return o.createElement(t.Tooltip, {\n    ariaControlsSuffix: "print",\n    position: t.Position.BottomCenter,\n    target: o.createElement(t.MinimalButton, {\n      ariaKeyShortcuts: l,\n      ariaLabel: i,\n      onClick: r\n    }, o.createElement(c, null)),\n    content: function () {\n      return i;\n    },\n    offset: u\n  });\n};\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n\n\n!function (e) {\n  e.Inactive = "Inactive", e.Preparing = "Preparing", e.Cancelled = "Cancelled", e.Ready = "Ready";\n}(a || (a = {}));\n\nvar s = function (e) {\n  var t = e.children,\n      n = e.enableShortcuts,\n      r = e.store;\n  return (t || l)({\n    enableShortcuts: n,\n    onClick: function () {\n      r.update("printStatus", a.Preparing);\n    }\n  });\n},\n    p = function (e) {\n  var n = e.numLoadedPages,\n      r = e.numPages,\n      a = e.onCancel,\n      i = o.useContext(t.LocalizationContext).l10n,\n      c = o.useContext(t.ThemeContext).direction === t.TextDirection.RightToLeft,\n      u = Math.floor(100 * n / r);\n  return o.createElement("div", {\n    className: "rpv-print__progress"\n  }, o.createElement("div", {\n    className: t.classNames({\n      "rpv-print__progress-body": !0,\n      "rpv-print__progress-body--rtl": c\n    })\n  }, o.createElement("div", {\n    className: "rpv-print__progress-message"\n  }, i && i.print ? i.print.preparingDocument : "Preparing document ..."), o.createElement("div", {\n    className: "rpv-print__progress-bar"\n  }, o.createElement(t.ProgressBar, {\n    progress: u\n  })), o.createElement(t.Button, {\n    onClick: a\n  }, i && i.print ? i.print.cancel : "Cancel")));\n},\n    d = function (e) {\n  var t = e.canvas,\n      n = e.page,\n      r = e.pageHeight,\n      a = e.pageWidth,\n      i = e.rotation,\n      c = e.onLoad,\n      u = o.useRef(),\n      l = o.useState(""),\n      s = l[0],\n      p = l[1];\n  return o.useEffect(function () {\n    var e = u.current;\n    e && e.cancel();\n    var o = 150 / 72;\n    t.height = Math.floor(r * o), t.width = Math.floor(a * o);\n    var c = t.getContext("2d");\n    c.save(), c.fillStyle = "rgb(255, 255, 255)", c.fillRect(0, 0, t.width, t.height), c.restore();\n    var l = n.getViewport({\n      rotation: i,\n      scale: 1\n    });\n    u.current = n.render({\n      canvasContext: c,\n      intent: "print",\n      transform: [o, 0, 0, o, 0, 0],\n      viewport: l\n    }), u.current.promise.then(function () {\n      "toBlob" in t ? t.toBlob(function (e) {\n        p(URL.createObjectURL(e));\n      }) : p(t.toDataURL());\n    }, function () {});\n  }, []), s && o.createElement("div", {\n    className: "rpv-print__page"\n  }, o.createElement("img", {\n    src: s,\n    onLoad: function () {\n      return c();\n    }\n  }));\n},\n    m = function (e) {\n  var t = e.canvas,\n      n = e.doc,\n      r = e.pageHeight,\n      a = e.pageIndex,\n      i = e.pageWidth,\n      c = e.rotation,\n      u = e.onLoad,\n      l = o.useState({\n    height: r,\n    page: null,\n    viewportRotation: 0,\n    width: i\n  }),\n      s = l[0],\n      p = l[1],\n      m = s.page,\n      g = s.height,\n      f = s.width,\n      v = Math.abs(c) % 180 == 0;\n  o.useEffect(function () {\n    n.getPage(a + 1).then(function (e) {\n      var t = e.getViewport({\n        scale: 1\n      });\n      p({\n        height: t.height,\n        page: e,\n        viewportRotation: t.rotation,\n        width: t.width\n      });\n    });\n  }, []);\n  var h = (c + s.viewportRotation) % 360;\n  return m && o.createElement(d, {\n    canvas: t,\n    page: m,\n    pageHeight: v ? g : f,\n    pageWidth: v ? f : g,\n    rotation: h,\n    onLoad: u\n  });\n},\n    g = function (e) {\n  var t = e.doc,\n      r = e.numLoadedPages,\n      i = e.pageHeight,\n      c = e.pageWidth,\n      u = e.printStatus,\n      l = e.rotation,\n      s = e.onCancel,\n      p = e.onLoad,\n      d = o.useMemo(function () {\n    return document.createElement("canvas");\n  }, []),\n      g = o.useMemo(function () {\n    var e = document.createElement("div");\n    return e.classList.add("rpv-print__zone"), document.body.appendChild(e), e;\n  }, []);\n  return o.useEffect(function () {\n    u === a.Ready && (document.documentElement.classList.add("rpv-print__html-printing"), document.body.classList.add("rpv-print__body-printing"), window.print());\n\n    var e = function () {\n      u === a.Ready && (document.documentElement.classList.remove("rpv-print__html-printing"), document.body.classList.remove("rpv-print__body-printing"), g.parentElement && g.parentElement.removeChild(g), d.height = 0, d.width = 0, document.removeEventListener("mousemove", e), s());\n    };\n\n    return document.addEventListener("mousemove", e), function () {\n      return document.removeEventListener("mousemove", e);\n    };\n  }, [u]), n.createPortal(o.createElement(o.Fragment, null, Array(Math.min(r + 1, t.numPages)).fill(0).map(function (e, n) {\n    return o.createElement(m, {\n      key: n,\n      canvas: d,\n      doc: t,\n      pageHeight: i,\n      pageIndex: n,\n      pageWidth: c,\n      rotation: l,\n      onLoad: p\n    });\n  }), o.createElement("style", {\n    dangerouslySetInnerHTML: {\n      __html: "@page { size: " + c + "pt " + i + "pt }"\n    }\n  })), g);\n},\n    f = function (e) {\n  var t = e.doc,\n      n = e.pageHeight,\n      r = e.pageWidth,\n      i = e.rotation,\n      c = e.store,\n      u = o.useState(a.Inactive),\n      l = u[0],\n      s = u[1],\n      d = o.useState(0),\n      m = d[0],\n      f = d[1],\n      v = function () {\n    f(0), s(a.Inactive);\n  },\n      h = function (e) {\n    return s(e);\n  };\n\n  return o.useEffect(function () {\n    return c.subscribe("printStatus", h), function () {\n      c.unsubscribe("printStatus", h);\n    };\n  }, []), o.createElement(o.Fragment, null, l === a.Preparing && o.createElement(p, {\n    numLoadedPages: m,\n    numPages: t.numPages,\n    onCancel: v\n  }), (l === a.Preparing || l === a.Ready) && m <= t.numPages && o.createElement(g, {\n    doc: t,\n    numLoadedPages: m,\n    pageHeight: n,\n    pageWidth: r,\n    printStatus: l,\n    rotation: i,\n    onCancel: v,\n    onLoad: function () {\n      var e = m + 1;\n      e <= t.numPages && (f(e), e === t.numPages && s(a.Ready));\n    }\n  }));\n},\n    v = function (e) {\n  var n = e.onClick,\n      r = o.useContext(t.LocalizationContext).l10n,\n      a = r && r.print ? r.print.print : "Print";\n  return o.createElement(t.MenuItem, {\n    icon: o.createElement(c, null),\n    onClick: n\n  }, a);\n},\n    h = function (e) {\n  var n = e.containerRef,\n      r = e.store,\n      i = function (e) {\n    if (!e.shiftKey && !e.altKey && "p" === e.key && (t.isMac() ? e.metaKey : e.ctrlKey)) {\n      var o = n.current;\n      o && document.activeElement && o.contains(document.activeElement) && (e.preventDefault(), r.update("printStatus", a.Preparing));\n    }\n  };\n\n  return o.useEffect(function () {\n    if (n.current) return document.addEventListener("keydown", i), function () {\n      document.removeEventListener("keydown", i);\n    };\n  }, [n.current]), o.createElement(o.Fragment, null);\n};\n\nexports.PrintIcon = c, exports.printPlugin = function (e) {\n  var n = o.useMemo(function () {\n    return Object.assign({}, {\n      enableShortcuts: !0\n    }, e);\n  }, []),\n      r = o.useMemo(function () {\n    return t.createStore({\n      printStatus: a.Inactive\n    });\n  }, []),\n      c = function (e) {\n    return o.createElement(s, i({\n      enableShortcuts: n.enableShortcuts\n    }, e, {\n      store: r\n    }));\n  };\n\n  return {\n    renderViewer: function (e) {\n      var t = e.slot,\n          a = {\n        children: o.createElement(o.Fragment, null, n.enableShortcuts && o.createElement(h, {\n          containerRef: e.containerRef,\n          store: r\n        }), o.createElement(f, {\n          doc: e.doc,\n          pageHeight: e.pageHeight,\n          pageWidth: e.pageWidth,\n          rotation: e.rotation,\n          store: r\n        }), t.children)\n      };\n      return i(i({}, t), a);\n    },\n    Print: c,\n    PrintButton: function () {\n      return o.createElement(c, null, function (e) {\n        return o.createElement(l, i({}, e));\n      });\n    },\n    PrintMenuItem: function (e) {\n      return o.createElement(c, null, function (t) {\n        return o.createElement(v, {\n          onClick: function () {\n            t.onClick(), e.onClick();\n          }\n        });\n      });\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2704\n')},9263:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/**\n * A React component to view a PDF document\n *\n * @see https://react-pdf-viewer.dev\n * @license https://react-pdf-viewer.dev/license\n * @copyright 2019-2021 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n\n\nif (true) {\n  module.exports = __webpack_require__(2704);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYW5tYXJjaGl2ZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtcGRmLXZpZXdlci9wcmludC9saWIvaW5kZXguanM/Mzc3MiJdLCJuYW1lcyI6WyJwcm9jZXNzIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVhOztBQUViLElBQUlBLElBQUosRUFBMkM7QUFDdkNDLDRDQUFBO0FBQ0gsQ0FGRCxNQUVPIiwiZmlsZSI6IjkyNjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgUmVhY3QgY29tcG9uZW50IHRvIHZpZXcgYSBQREYgZG9jdW1lbnRcbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3QtcGRmLXZpZXdlci5kZXZcbiAqIEBsaWNlbnNlIGh0dHBzOi8vcmVhY3QtcGRmLXZpZXdlci5kZXYvbGljZW5zZVxuICogQGNvcHlyaWdodCAyMDE5LTIwMjEgTmd1eWVuIEh1dSBQaHVvYyA8bWVAcGh1b2Mubmc+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcHJpbnQubWluLmpzJyk7XG59IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcHJpbnQuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9263\n")},9956:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: !0\n}));\n\nvar e = __webpack_require__(5466),\n    t = __webpack_require__(2672);\n\nfunction r(e) {\n  if (e && e.__esModule) return e;\n  var t = Object.create(null);\n  return e && Object.keys(e).forEach(function (r) {\n    if ("default" !== r) {\n      var n = Object.getOwnPropertyDescriptor(e, r);\n      Object.defineProperty(t, r, n.get ? n : {\n        enumerable: !0,\n        get: function () {\n          return e[r];\n        }\n      });\n    }\n  }), t.default = e, Object.freeze(t);\n}\n\nvar n = r(e),\n    o = function () {\n  return (o = Object.assign || function (e) {\n    for (var t, r = 1, n = arguments.length; r < n; r++) for (var o in t = arguments[r]) Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);\n\n    return e;\n  }).apply(this, arguments);\n},\n    a = function (e) {\n  var r = e.doc,\n      o = e.render,\n      a = n.useState(),\n      i = a[0],\n      l = a[1];\n  return n.useEffect(function () {\n    r.getMetadata().then(function (e) {\n      return Promise.resolve(e);\n    }).then(function (e) {\n      return r.getDownloadInfo().then(function (t) {\n        return Promise.resolve({\n          fileName: e.contentDispositionFilename || "",\n          info: e.info,\n          length: t.length\n        });\n      });\n    }).then(function (e) {\n      l(e);\n    });\n  }, []), i ? o(i) : n.createElement("div", {\n    className: "rpv-properties__loader"\n  }, n.createElement(t.Spinner, null));\n},\n    i = function (e) {\n  var r = e.label,\n      o = e.value,\n      a = n.useContext(t.ThemeContext).direction === t.TextDirection.RightToLeft;\n  return n.createElement("dl", {\n    className: t.classNames({\n      "rpv-properties__item": !0,\n      "rpv-properties__item--rtl": a\n    })\n  }, n.createElement("dt", {\n    className: "rpv-properties__item-label"\n  }, r, ":"), n.createElement("dd", {\n    className: "rpv-properties__item-value"\n  }, o || "-"));\n},\n    l = new RegExp("^D:(\\\\d{4})(\\\\d{2})?(\\\\d{2})?(\\\\d{2})?(\\\\d{2})?(\\\\d{2})?([Z|+|-])?(\\\\d{2})?\'?(\\\\d{2})?\'?"),\n    c = function (e, t, r, n) {\n  var o = parseInt(e, 10);\n  return o >= t && o <= r ? o : n;\n},\n    s = function (e) {\n  var r = e.doc,\n      o = e.fileName,\n      s = e.onToggle,\n      p = n.useContext(t.LocalizationContext).l10n,\n      u = function (e) {\n    var t = function (e) {\n      var t = l.exec(e);\n      if (!t) return null;\n      var r = parseInt(t[1], 10),\n          n = c(t[2], 1, 12, 1) - 1,\n          o = c(t[3], 1, 31, 1),\n          a = c(t[4], 0, 23, 0),\n          i = c(t[5], 0, 59, 0),\n          s = c(t[6], 0, 59, 0),\n          p = t[7] || "Z",\n          u = c(t[8], 0, 23, 0),\n          f = c(t[9], 0, 59, 0);\n\n      switch (p) {\n        case "-":\n          a += u, i += f;\n          break;\n\n        case "+":\n          a -= u, i -= f;\n      }\n\n      return new Date(Date.UTC(r, n, o, a, i, s));\n    }(e);\n\n    return t ? t.toLocaleDateString() + ", " + t.toLocaleTimeString() : "";\n  };\n\n  return n.createElement("div", {\n    className: "rpv-properties__modal"\n  }, n.createElement(a, {\n    doc: r,\n    render: function (e) {\n      return n.createElement(n.Fragment, null, n.createElement("div", {\n        className: "rpv-properties__modal-section"\n      }, n.createElement(i, {\n        label: p && p.properties ? p.properties.fileName : "File name",\n        value: e.fileName || (c = o, s = c.split("/").pop(), s ? s.split("#")[0].split("?")[0] : c)\n      }), n.createElement(i, {\n        label: p && p.properties ? p.properties.fileSize : "File size",\n        value: (a = e.length, l = Math.floor(Math.log(a) / Math.log(1024)), (a / Math.pow(1024, l)).toFixed(2) + " " + ["B", "kB", "MB", "GB", "TB"][l])\n      })), n.createElement(t.Separator, null), n.createElement("div", {\n        className: "rpv-properties__modal-section"\n      }, n.createElement(i, {\n        label: p && p.properties ? p.properties.title : "Title",\n        value: e.info.Title\n      }), n.createElement(i, {\n        label: p && p.properties ? p.properties.author : "Author",\n        value: e.info.Author\n      }), n.createElement(i, {\n        label: p && p.properties ? p.properties.subject : "Subject",\n        value: e.info.Subject\n      }), n.createElement(i, {\n        label: p && p.properties ? p.properties.keywords : "Keywords",\n        value: e.info.Keywords\n      }), n.createElement(i, {\n        label: p && p.properties ? p.properties.creator : "Creator",\n        value: e.info.Creator\n      }), n.createElement(i, {\n        label: p && p.properties ? p.properties.creationDate : "Creation date",\n        value: u(e.info.CreationDate)\n      }), n.createElement(i, {\n        label: p && p.properties ? p.properties.modificationDate : "Modification date",\n        value: u(e.info.ModDate)\n      })), n.createElement(t.Separator, null), n.createElement("div", {\n        className: "rpv-properties__modal-section"\n      }, n.createElement(i, {\n        label: p && p.properties ? p.properties.pdfProducer : "PDF producer",\n        value: e.info.Producer\n      }), n.createElement(i, {\n        label: p && p.properties ? p.properties.pdfVersion : "PDF version",\n        value: e.info.PDFFormatVersion\n      }), n.createElement(i, {\n        label: p && p.properties ? p.properties.pageCount : "Page count",\n        value: "" + r.numPages\n      })));\n      var a, l, c, s;\n    }\n  }), n.createElement("div", {\n    className: "rpv-properties__modal-footer"\n  }, n.createElement(t.Button, {\n    onClick: s\n  }, p && p.properties ? p.properties.close : "Close")));\n},\n    p = function () {\n  return n.createElement(t.Icon, {\n    size: 16\n  }, n.createElement("path", {\n    d: "M12,1.001c6.075,0,11,4.925,11,11s-4.925,11-11,11s-11-4.925-11-11S5.925,1.001,12,1.001z\\n            M14.5,17.005H13\\n            c-0.552,0-1-0.448-1-1v-6.5c0-0.276-0.224-0.5-0.5-0.5H10\\n            M11.745,6.504L11.745,6.504\\n            M11.745,6.5c-0.138,0-0.25,0.112-0.25,0.25\\n            S11.607,7,11.745,7s0.25-0.112,0.25-0.25S11.883,6.5,11.745,6.5"\n  }));\n},\n    u = {\n  left: 0,\n  top: 8\n},\n    f = function (e) {\n  var r = e.onClick,\n      o = n.useContext(t.LocalizationContext).l10n,\n      a = o && o.properties ? o.properties.showProperties : "Show properties";\n  return n.createElement(t.Tooltip, {\n    ariaControlsSuffix: "properties",\n    position: t.Position.BottomCenter,\n    target: n.createElement(t.MinimalButton, {\n      ariaLabel: a,\n      onClick: r\n    }, n.createElement(p, null)),\n    content: function () {\n      return a;\n    },\n    offset: u\n  });\n},\n    m = function (e) {\n  var r = e.children,\n      a = e.store,\n      i = function (e) {\n    var t = n.useState(e.get("doc")),\n        r = t[0],\n        o = t[1],\n        a = function (e) {\n      o(e);\n    };\n\n    return n.useEffect(function () {\n      return e.subscribe("doc", a), function () {\n        e.unsubscribe("doc", a);\n      };\n    }, []), {\n      currentDoc: r\n    };\n  }(a).currentDoc,\n      l = a.get("fileName") || "",\n      c = r || function (e) {\n    return n.createElement(f, o({}, e));\n  };\n\n  return i ? n.createElement(t.Modal, {\n    ariaControlsSuffix: "properties",\n    target: function (e) {\n      return c({\n        onClick: e\n      });\n    },\n    content: function (e) {\n      return n.createElement(s, {\n        doc: i,\n        fileName: l,\n        onToggle: e\n      });\n    },\n    closeOnClickOutside: !0,\n    closeOnEscape: !0\n  }) : n.createElement(n.Fragment, null);\n},\n    d = function (e) {\n  var r = e.onClick,\n      o = n.useContext(t.LocalizationContext).l10n,\n      a = o && o.properties ? o.properties.showProperties : "Show properties";\n  return n.createElement(t.MenuItem, {\n    icon: n.createElement(p, null),\n    onClick: r\n  }, a);\n};\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n\n\nexports.InfoIcon = p, exports.propertiesPlugin = function () {\n  var e = n.useMemo(function () {\n    return t.createStore({\n      fileName: ""\n    });\n  }, []),\n      r = function (t) {\n    return n.createElement(m, o({}, t, {\n      store: e\n    }));\n  };\n\n  return {\n    onDocumentLoad: function (t) {\n      e.update("doc", t.doc);\n    },\n    onViewerStateChange: function (t) {\n      return e.update("fileName", t.file.name), t;\n    },\n    ShowProperties: r,\n    ShowPropertiesButton: function () {\n      return n.createElement(m, {\n        store: e\n      });\n    },\n    ShowPropertiesMenuItem: function (e) {\n      return n.createElement(r, null, function (e) {\n        return n.createElement(d, o({}, e));\n      });\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9956\n')},3504:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/**\n * A React component to view a PDF document\n *\n * @see https://react-pdf-viewer.dev\n * @license https://react-pdf-viewer.dev/license\n * @copyright 2019-2021 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n\n\nif (true) {\n  module.exports = __webpack_require__(9956);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYW5tYXJjaGl2ZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtcGRmLXZpZXdlci9wcm9wZXJ0aWVzL2xpYi9pbmRleC5qcz9iMzY1Il0sIm5hbWVzIjpbInByb2Nlc3MiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRWE7O0FBRWIsSUFBSUEsSUFBSixFQUEyQztBQUN2Q0MsNENBQUE7QUFDSCxDQUZELE1BRU8iLCJmaWxlIjoiMzUwNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBSZWFjdCBjb21wb25lbnQgdG8gdmlldyBhIFBERiBkb2N1bWVudFxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdC1wZGYtdmlld2VyLmRldlxuICogQGxpY2Vuc2UgaHR0cHM6Ly9yZWFjdC1wZGYtdmlld2VyLmRldi9saWNlbnNlXG4gKiBAY29weXJpZ2h0IDIwMTktMjAyMSBOZ3V5ZW4gSHV1IFBodW9jIDxtZUBwaHVvYy5uZz5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9wcm9wZXJ0aWVzLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3Byb3BlcnRpZXMuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3504\n")},2966:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: !0\n}));\n\nvar t = __webpack_require__(5466),\n    e = __webpack_require__(2672);\n\nfunction r(t) {\n  if (t && t.__esModule) return t;\n  var e = Object.create(null);\n  return t && Object.keys(t).forEach(function (r) {\n    if ("default" !== r) {\n      var n = Object.getOwnPropertyDescriptor(t, r);\n      Object.defineProperty(e, r, n.get ? n : {\n        enumerable: !0,\n        get: function () {\n          return t[r];\n        }\n      });\n    }\n  }), e.default = t, Object.freeze(e);\n}\n\nvar n,\n    o = r(t);\nexports.RotateDirection = void 0, (n = exports.RotateDirection || (exports.RotateDirection = {})).Backward = "Backward", n.Forward = "Forward";\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n\nvar c = function () {\n  return (c = Object.assign || function (t) {\n    for (var e, r = 1, n = arguments.length; r < n; r++) for (var o in e = arguments[r]) Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);\n\n    return t;\n  }).apply(this, arguments);\n},\n    a = function () {\n  return o.createElement(e.Icon, {\n    ignoreDirection: !0,\n    size: 16\n  }, o.createElement("path", {\n    d: "M3.434,10.537c0.141-0.438,0.316-0.864,0.523-1.274\\n            M3.069,14.425C3.023,14.053,3,13.679,3,13.305 c0-0.291,0.014-0.579,0.041-0.863\\n            M4.389,18.111c-0.341-0.539-0.623-1.112-0.843-1.711\\n            M7.163,20.9 c-0.543-0.345-1.048-0.747-1.506-1.2\\n            M10.98,22.248c-0.65-0.074-1.29-0.218-1.909-0.431\\n            M10,4.25h2 c4.987,0.015,9.017,4.069,9.003,9.055c-0.013,4.581-3.456,8.426-8.008,8.945\\n            M13.5,1.75L10,4.25l3.5,2.5"\n  }));\n},\n    i = function () {\n  return o.createElement(e.Icon, {\n    ignoreDirection: !0,\n    size: 16\n  }, o.createElement("path", {\n    d: "M20.566,10.537c-0.141-0.438-0.316-0.864-0.523-1.274\\n            M20.931,14.425C20.977,14.053,21,13.679,21,13.305 c0-0.291-0.014-0.579-0.041-0.863\\n            M19.611,18.111c0.341-0.539,0.624-1.114,0.843-1.713\\n            M16.837,20.9 c0.543-0.345,1.048-0.747,1.506-1.2\\n            M13.02,22.248c0.65-0.074,1.29-0.218,1.909-0.431\\n            M14,4.25h-2 c-4.987,0.015-9.017,4.069-9.003,9.055c0.013,4.581,3.456,8.426,8.008,8.945\\n            M10.5,1.75l3.5,2.5l-3.5,2.5"\n  }));\n},\n    u = {\n  left: 0,\n  top: 8\n},\n    l = function (t) {\n  var r = t.direction,\n      n = t.onClick,\n      c = o.useContext(e.LocalizationContext).l10n,\n      l = c && c.rotate ? c.rotate.rotateBackward : "Rotate counterclockwise",\n      f = c && c.rotate ? c.rotate.rotateForward : "Rotate clockwise",\n      d = r === exports.RotateDirection.Backward ? l : f,\n      s = r === exports.RotateDirection.Backward ? o.createElement(a, null) : o.createElement(i, null);\n  return o.createElement(e.Tooltip, {\n    ariaControlsSuffix: "rotate",\n    position: e.Position.BottomCenter,\n    target: o.createElement(e.MinimalButton, {\n      ariaLabel: d,\n      onClick: n\n    }, s),\n    content: function () {\n      return d;\n    },\n    offset: u\n  });\n},\n    f = function (t) {\n  var e = t.children,\n      r = t.direction,\n      n = t.store,\n      c = function (t) {\n    var e = o.useState(t.get("rotation") || 0),\n        r = e[0],\n        n = e[1],\n        c = function (t) {\n      n(t);\n    };\n\n    return o.useEffect(function () {\n      return t.subscribe("rotation", c), function () {\n        t.unsubscribe("rotation", c);\n      };\n    }, []), {\n      rotation: r\n    };\n  }(n).rotation;\n\n  return (e || function (t) {\n    return o.createElement(l, {\n      direction: t.direction,\n      onClick: t.onClick\n    });\n  })({\n    direction: r,\n    onClick: function () {\n      var t = n.get("rotate");\n\n      if (t) {\n        var e = r === exports.RotateDirection.Backward ? -90 : 90;\n        t(360 === c || -360 === c ? e : c + e);\n      }\n    }\n  });\n},\n    d = function (t) {\n  var r = t.direction,\n      n = t.onClick,\n      c = o.useContext(e.LocalizationContext).l10n,\n      u = c && c.rotate ? c.rotate.rotateBackward : "Rotate counterclockwise",\n      l = c && c.rotate ? c.rotate.rotateForward : "Rotate clockwise",\n      f = r === exports.RotateDirection.Backward ? u : l,\n      d = r === exports.RotateDirection.Backward ? o.createElement(a, null) : o.createElement(i, null);\n  return o.createElement(e.MenuItem, {\n    icon: d,\n    onClick: n\n  }, f);\n};\n\nexports.RotateBackwardIcon = a, exports.RotateForwardIcon = i, exports.rotatePlugin = function () {\n  var t = o.useMemo(function () {\n    return e.createStore({\n      rotation: 0\n    });\n  }, []),\n      r = function (e) {\n    return o.createElement(f, c({}, e, {\n      store: t\n    }));\n  };\n\n  return {\n    install: function (e) {\n      t.update("rotate", e.rotate);\n    },\n    onViewerStateChange: function (e) {\n      return t.update("rotation", e.rotation), e;\n    },\n    Rotate: r,\n    RotateBackwardButton: function () {\n      return o.createElement(r, {\n        direction: exports.RotateDirection.Backward\n      }, function (t) {\n        return o.createElement(l, c({}, t));\n      });\n    },\n    RotateBackwardMenuItem: function (t) {\n      return o.createElement(r, {\n        direction: exports.RotateDirection.Backward\n      }, function (e) {\n        return o.createElement(d, {\n          direction: e.direction,\n          onClick: function () {\n            e.onClick(), t.onClick();\n          }\n        });\n      });\n    },\n    RotateForwardButton: function () {\n      return o.createElement(r, {\n        direction: exports.RotateDirection.Forward\n      }, function (t) {\n        return o.createElement(l, c({}, t));\n      });\n    },\n    RotateForwardMenuItem: function (t) {\n      return o.createElement(r, {\n        direction: exports.RotateDirection.Forward\n      }, function (e) {\n        return o.createElement(d, {\n          direction: e.direction,\n          onClick: function () {\n            e.onClick(), t.onClick();\n          }\n        });\n      });\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2966\n')},4203:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/**\n * A React component to view a PDF document\n *\n * @see https://react-pdf-viewer.dev\n * @license https://react-pdf-viewer.dev/license\n * @copyright 2019-2021 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n\n\nif (true) {\n  module.exports = __webpack_require__(2966);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYW5tYXJjaGl2ZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtcGRmLXZpZXdlci9yb3RhdGUvbGliL2luZGV4LmpzPzg2YzAiXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFYTs7QUFFYixJQUFJQSxJQUFKLEVBQTJDO0FBQ3ZDQyw0Q0FBQTtBQUNILENBRkQsTUFFTyIsImZpbGUiOiI0MjAzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIFJlYWN0IGNvbXBvbmVudCB0byB2aWV3IGEgUERGIGRvY3VtZW50XG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0LXBkZi12aWV3ZXIuZGV2XG4gKiBAbGljZW5zZSBodHRwczovL3JlYWN0LXBkZi12aWV3ZXIuZGV2L2xpY2Vuc2VcbiAqIEBjb3B5cmlnaHQgMjAxOS0yMDIxIE5ndXllbiBIdXUgUGh1b2MgPG1lQHBodW9jLm5nPlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JvdGF0ZS5taW4uanMnKTtcbn0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yb3RhdGUuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4203\n")},407:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: !0\n}));\n\nvar e = __webpack_require__(5466),\n    r = __webpack_require__(2672);\n\nfunction t(e) {\n  if (e && e.__esModule) return e;\n  var r = Object.create(null);\n  return e && Object.keys(e).forEach(function (t) {\n    if ("default" !== t) {\n      var o = Object.getOwnPropertyDescriptor(e, t);\n      Object.defineProperty(r, t, o.get ? o : {\n        enumerable: !0,\n        get: function () {\n          return e[t];\n        }\n      });\n    }\n  }), r.default = e, Object.freeze(r);\n}\n\nvar o,\n    c = t(e);\nexports.ScrollMode = void 0, (o = exports.ScrollMode || (exports.ScrollMode = {})).Horizontal = "Horizontal", o.Vertical = "Vertical", o.Wrapped = "Wrapped";\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n\nvar l = function () {\n  return (l = Object.assign || function (e) {\n    for (var r, t = 1, o = arguments.length; t < o; t++) for (var c in r = arguments[t]) Object.prototype.hasOwnProperty.call(r, c) && (e[c] = r[c]);\n\n    return e;\n  }).apply(this, arguments);\n},\n    n = function () {\n  return c.createElement(r.Icon, {\n    size: 16\n  }, c.createElement("path", {\n    d: "M6.5,21.5c0,0.552-0.448,1-1,1h-4c-0.552,0-1-0.448-1-1v-20c0-0.552,0.448-1,1-1h4c0.552,0,1,0.448,1,1V21.5z\\n            M14.5,21.5c0,0.552-0.448,1-1,1h-4c-0.552,0-1-0.448-1-1v-20c0-0.552,0.448-1,1-1h4c0.552,0,1,0.448,1,1V21.5z\\n            M22.5,21.5 c0,0.552-0.448,1-1,1h-4c-0.552,0-1-0.448-1-1v-20c0-0.552,0.448-1,1-1h4c0.552,0,1,0.448,1,1V21.5z"\n  }));\n},\n    i = function () {\n  return c.createElement(r.Icon, {\n    size: 16\n  }, c.createElement("path", {\n    d: "M23.5,5.5c0,0.552-0.448,1-1,1h-21c-0.552,0-1-0.448-1-1v-3c0-0.552,0.448-1,1-1h21c0.552,0,1,0.448,1,1V5.5z\\n            M23.5,13.5c0,0.552-0.448,1-1,1h-21c-0.552,0-1-0.448-1-1v-3c0-0.552,0.448-1,1-1h21c0.552,0,1,0.448,1,1V13.5z\\n            M23.5,21.5 c0,0.552-0.448,1-1,1h-21c-0.552,0-1-0.448-1-1v-3c0-0.552,0.448-1,1-1h21c0.552,0,1,0.448,1,1V21.5z"\n  }));\n},\n    a = function () {\n  return c.createElement(r.Icon, {\n    size: 16\n  }, c.createElement("path", {\n    d: "M10.5,9.5c0,0.552-0.448,1-1,1h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V9.5z\\n            M23.5,9.5c0,0.552-0.448,1-1,1h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V9.5z\\n            M10.5,22.5 c0,0.552-0.448,1-1,1h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V22.5z\\n            M23.5,22.5c0,0.552-0.448,1-1,1 h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V22.5z"\n  }));\n},\n    s = function (e) {\n  var t = e.children,\n      o = e.mode,\n      l = e.onClick,\n      s = c.useContext(r.LocalizationContext).l10n,\n      d = "",\n      u = c.createElement(i, null);\n\n  switch (o) {\n    case exports.ScrollMode.Horizontal:\n      d = s && s.scrollMode ? s.scrollMode.horizontalScrolling : "Horizontal scrolling", u = c.createElement(n, null);\n      break;\n\n    case exports.ScrollMode.Wrapped:\n      d = s && s.scrollMode ? s.scrollMode.wrappedScrolling : "Wrapped scrolling", u = c.createElement(a, null);\n      break;\n\n    case exports.ScrollMode.Vertical:\n    default:\n      d = s && s.scrollMode ? s.scrollMode.verticalScrolling : "Vertical scrolling", u = c.createElement(i, null);\n  }\n\n  return t({\n    icon: u,\n    label: d,\n    onClick: l\n  });\n},\n    d = {\n  left: 0,\n  top: 8\n},\n    u = function (e) {\n  var t = e.isSelected,\n      o = e.mode,\n      l = e.onClick;\n  return c.createElement(s, {\n    mode: o,\n    onClick: l\n  }, function (e) {\n    return c.createElement(r.Tooltip, {\n      ariaControlsSuffix: "scroll-mode-switch",\n      position: r.Position.BottomCenter,\n      target: c.createElement(r.MinimalButton, {\n        ariaLabel: e.label,\n        isSelected: t,\n        onClick: e.onClick\n      }, e.icon),\n      content: function () {\n        return e.label;\n      },\n      offset: d\n    });\n  });\n},\n    m = function (e) {\n  var r = c.useState(e.get("scrollMode") || exports.ScrollMode.Vertical),\n      t = r[0],\n      o = r[1],\n      l = function (e) {\n    o(e);\n  };\n\n  return c.useEffect(function () {\n    return e.subscribe("scrollMode", l), function () {\n      e.unsubscribe("scrollMode", l);\n    };\n  }, []), {\n    scrollMode: t,\n    switchTo: function (r) {\n      var t = e.get("getPagesContainer");\n\n      if (t) {\n        var o = t();\n\n        if (o) {\n          switch (r) {\n            case exports.ScrollMode.Vertical:\n              o.classList.add("rpv-scroll-mode__vertical"), o.classList.remove("rpv-scroll-mode__horizontal"), o.classList.remove("rpv-scroll-mode__wrapped");\n              break;\n\n            case exports.ScrollMode.Horizontal:\n              o.classList.add("rpv-scroll-mode__horizontal"), o.classList.remove("rpv-scroll-mode__vertical"), o.classList.remove("rpv-scroll-mode__wrapped");\n              break;\n\n            case exports.ScrollMode.Wrapped:\n              o.classList.add("rpv-scroll-mode__wrapped"), o.classList.remove("rpv-scroll-mode__vertical"), o.classList.remove("rpv-scroll-mode__horizontal");\n          }\n\n          e.update("scrollMode", r);\n        }\n      }\n    }\n  };\n},\n    p = function (e) {\n  var r = e.children,\n      t = e.mode,\n      o = e.store,\n      l = m(o),\n      n = l.scrollMode,\n      i = l.switchTo,\n      a = n === t;\n  return (r || function (e) {\n    return c.createElement(u, {\n      isSelected: a,\n      mode: e.mode,\n      onClick: e.onClick\n    });\n  })({\n    isSelected: a,\n    mode: t,\n    onClick: function () {\n      return i(t);\n    }\n  });\n},\n    f = function (e) {\n  var t = e.isSelected,\n      o = e.mode,\n      l = e.onClick;\n  return c.createElement(s, {\n    mode: o,\n    onClick: l\n  }, function (e) {\n    return c.createElement(r.MenuItem, {\n      checked: t,\n      icon: e.icon,\n      onClick: e.onClick\n    }, e.label);\n  });\n},\n    v = function (e) {\n  var t = e.store,\n      o = c.useContext(r.ThemeContext).direction === r.TextDirection.RightToLeft,\n      l = m(t).switchTo,\n      n = function (e) {\n    var r = e();\n\n    if (r) {\n      o ? r.classList.add("rpv-scroll-mode--rtl") : r.classList.remove("rpv-scroll-mode--rtl");\n      var c = t.get("scrollMode") || exports.ScrollMode.Vertical;\n      c !== exports.ScrollMode.Vertical && l(c);\n    }\n  };\n\n  return c.useEffect(function () {\n    return t.subscribe("getPagesContainer", n), function () {\n      t.unsubscribe("getPagesContainer", n);\n    };\n  }, []), c.createElement(c.Fragment, null);\n};\n\nexports.HorizontalScrollingIcon = n, exports.VerticalScrollingIcon = i, exports.WrappedScrollingIcon = a, exports.scrollModePlugin = function (e) {\n  var t = c.useMemo(function () {\n    return r.createStore({\n      scrollMode: e && e.scrollMode ? e.scrollMode : exports.ScrollMode.Vertical\n    });\n  }, []),\n      o = function (e) {\n    return c.createElement(p, l({}, e, {\n      store: t\n    }));\n  };\n\n  return {\n    install: function (e) {\n      t.update("getPagesContainer", e.getPagesContainer);\n    },\n    renderViewer: function (e) {\n      var r = e.slot;\n      return r && r.children && (r.children = c.createElement(c.Fragment, null, c.createElement(v, {\n        store: t\n      }), r.children)), r;\n    },\n    SwitchScrollMode: o,\n    SwitchScrollModeButton: function (e) {\n      return c.createElement(o, {\n        mode: e.mode\n      }, function (e) {\n        return c.createElement(u, {\n          isSelected: e.isSelected,\n          mode: e.mode,\n          onClick: function () {\n            e.onClick();\n          }\n        });\n      });\n    },\n    SwitchScrollModeMenuItem: function (e) {\n      return c.createElement(o, {\n        mode: e.mode\n      }, function (r) {\n        return c.createElement(f, {\n          isSelected: r.isSelected,\n          mode: r.mode,\n          onClick: function () {\n            r.onClick(), e.onClick();\n          }\n        });\n      });\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///407\n')},4376:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/**\n * A React component to view a PDF document\n *\n * @see https://react-pdf-viewer.dev\n * @license https://react-pdf-viewer.dev/license\n * @copyright 2019-2021 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n\n\nif (true) {\n  module.exports = __webpack_require__(407);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYW5tYXJjaGl2ZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtcGRmLXZpZXdlci9zY3JvbGwtbW9kZS9saWIvaW5kZXguanM/Yjk3ZSJdLCJuYW1lcyI6WyJwcm9jZXNzIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVhOztBQUViLElBQUlBLElBQUosRUFBMkM7QUFDdkNDLDJDQUFBO0FBQ0gsQ0FGRCxNQUVPIiwiZmlsZSI6IjQzNzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgUmVhY3QgY29tcG9uZW50IHRvIHZpZXcgYSBQREYgZG9jdW1lbnRcbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3QtcGRmLXZpZXdlci5kZXZcbiAqIEBsaWNlbnNlIGh0dHBzOi8vcmVhY3QtcGRmLXZpZXdlci5kZXYvbGljZW5zZVxuICogQGNvcHlyaWdodCAyMDE5LTIwMjEgTmd1eWVuIEh1dSBQaHVvYyA8bWVAcGh1b2Mubmc+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2Nyb2xsLW1vZGUubWluLmpzJyk7XG59IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2Nyb2xsLW1vZGUuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4376\n")},2974:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: !0\n}));\n\nvar e = __webpack_require__(5466),\n    t = __webpack_require__(2672);\n\nfunction n(e) {\n  if (e && e.__esModule) return e;\n  var t = Object.create(null);\n  return e && Object.keys(e).forEach(function (n) {\n    if ("default" !== n) {\n      var r = Object.getOwnPropertyDescriptor(e, n);\n      Object.defineProperty(t, n, r.get ? r : {\n        enumerable: !0,\n        get: function () {\n          return e[n];\n        }\n      });\n    }\n  }), t.default = e, Object.freeze(t);\n}\n\nvar r = n(e),\n    o = function () {\n  return (o = Object.assign || function (e) {\n    for (var t, n = 1, r = arguments.length; n < r; n++) for (var o in t = arguments[n]) Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);\n\n    return e;\n  }).apply(this, arguments);\n},\n    a = new RegExp(" "),\n    c = function (e) {\n  var t = e.wholeWords ? " " + e.keyword + " " : e.keyword,\n      n = e.matchCase ? "g" : "gi";\n  return new RegExp(t, n);\n},\n    u = function (e, t, n) {\n  return e instanceof RegExp ? e : "string" == typeof e ? "" === e ? a : c({\n    keyword: e,\n    matchCase: t || !1,\n    wholeWords: n || !1\n  }) : (void 0 !== t && (e.matchCase = t), void 0 !== n && (e.wholeWords = n), c(e));\n},\n    s = function (e) {\n  var t,\n      n = function (e) {\n    var t = r.useRef(e.get("doc")),\n        n = function (e) {\n      t.current = e;\n    };\n\n    return r.useEffect(function () {\n      return e.subscribe("doc", n), function () {\n        e.unsubscribe("doc", n);\n      };\n    }, []), t;\n  }(e),\n      o = r.useState([]),\n      c = o[0],\n      s = o[1],\n      i = r.useState([]),\n      l = i[0],\n      h = i[1],\n      f = r.useState(0),\n      d = f[0],\n      p = f[1],\n      m = r.useState(!1),\n      g = m[0],\n      v = m[1],\n      x = r.useRef([]),\n      y = r.useState(!1),\n      E = y[0],\n      b = y[1],\n      S = function () {\n    return !0;\n  },\n      w = r.useCallback(function () {\n    return e.get("targetPageFilter") || S;\n  }, [e.get("targetPageFilter")]),\n      C = function (e) {\n    if (0 === c.length || 0 === l.length) return null;\n    var t = Math.max(1, Math.min(l.length, e));\n    return p(t), I(l[t - 1]);\n  },\n      P = function (e) {\n    return s("" === e ? [] : [e]);\n  },\n      I = function (t) {\n    var n = e.get("jumpToPage");\n    return n && n(t.pageIndex), e.update("matchPosition", {\n      matchIndex: t.matchIndex,\n      pageIndex: t.pageIndex\n    }), t;\n  },\n      _ = function (t, r, o) {\n    var a = n.current;\n    if (!a) return Promise.resolve([]);\n    var c = a.numPages,\n        s = t.map(function (e) {\n      return u(e, r, o);\n    });\n    return e.update("keyword", s), p(0), h([]), new Promise(function (e, t) {\n      (0 === x.current.length ? function () {\n        var e = n.current;\n        if (!e) return Promise.resolve([]);\n        var t = Array(e.numPages).fill(0).map(function (t, n) {\n          return e.getPage(n + 1).then(function (e) {\n            return e.getTextContent();\n          }).then(function (e) {\n            var t = e.items.map(function (e) {\n              return e.str || "";\n            }).join("");\n            return Promise.resolve({\n              pageContent: t,\n              pageIndex: n\n            });\n          });\n        });\n        return Promise.all(t).then(function (e) {\n          return e.sort(function (e, t) {\n            return e.pageIndex - t.pageIndex;\n          }), Promise.resolve(e.map(function (e) {\n            return e.pageContent;\n          }));\n        });\n      }().then(function (e) {\n        return x.current = e, Promise.resolve(e);\n      }) : Promise.resolve(x.current)).then(function (t) {\n        var n = [];\n        t.forEach(function (e, t) {\n          w()({\n            pageIndex: t,\n            numPages: c\n          }) && s.forEach(function (r) {\n            for (var o, a = 0; null !== (o = r.exec(e));) n.push({\n              keyword: r,\n              matchIndex: a,\n              pageIndex: t,\n              pageText: e,\n              startIndex: o.index,\n              endIndex: r.lastIndex\n            }), a++;\n          });\n        }), h(n), n.length > 0 && (p(1), I(n[0])), e(n);\n      });\n    });\n  };\n\n  return r.useEffect(function () {\n    x.current = [];\n  }, [n.current]), {\n    clearKeyword: function () {\n      0 !== c.length && (e.update("keyword", [a]), P(""), p(0), h([]), v(!1), b(!1));\n    },\n    changeMatchCase: function (e) {\n      v(e), c.length > 0 && _(c, e, E);\n    },\n    changeWholeWords: function (e) {\n      b(e), c.length > 0 && _(c, g, e);\n    },\n    currentMatch: d,\n    jumpToMatch: C,\n    jumpToNextMatch: function () {\n      return C(d + 1);\n    },\n    jumpToPreviousMatch: function () {\n      return C(d - 1);\n    },\n    keywords: c,\n    matchCase: g,\n    numberOfMatches: l.length,\n    wholeWords: E,\n    search: function () {\n      return _(c, g, E);\n    },\n    searchFor: _,\n    setKeywords: s,\n    keyword: 0 === c.length ? "" : (t = c[0], t instanceof RegExp ? t.source : "string" == typeof t ? t : t.keyword),\n    setKeyword: P,\n    setTargetPages: function (t) {\n      e.update("targetPageFilter", t);\n    }\n  };\n},\n    i = function (e) {\n  var t = e.children,\n      n = e.store,\n      r = s(n);\n  return t(o({}, r));\n},\n    l = function (e) {\n  var n = e.containerRef,\n      o = e.store,\n      a = function (e) {\n    if (!e.shiftKey && !e.altKey && "f" === e.key && (t.isMac() ? e.metaKey && !e.ctrlKey : e.ctrlKey)) {\n      var r = n.current;\n      r && document.activeElement && r.contains(document.activeElement) && (e.preventDefault(), o.update("areShortcutsPressed", !0));\n    }\n  };\n\n  return r.useEffect(function () {\n    if (n.current) return document.addEventListener("keydown", a), function () {\n      document.removeEventListener("keydown", a);\n    };\n  }, [n.current]), r.createElement(r.Fragment, null);\n},\n    h = function () {\n  return r.createElement(t.Icon, {\n    size: 16\n  }, r.createElement("path", {\n    d: "M0.541,5.627L11.666,18.2c0.183,0.207,0.499,0.226,0.706,0.043c0.015-0.014,0.03-0.028,0.043-0.043\\n            L23.541,5.627"\n  }));\n},\n    f = function () {\n  return r.createElement(t.Icon, {\n    size: 16\n  }, r.createElement("path", {\n    d: "M23.535,18.373L12.409,5.8c-0.183-0.207-0.499-0.226-0.706-0.043C11.688,5.77,11.674,5.785,11.66,5.8\\n            L0.535,18.373"\n  }));\n},\n    d = {\n  left: 0,\n  top: 8\n},\n    p = function (e) {\n  var n = e.store,\n      o = e.onToggle,\n      a = r.useContext(t.LocalizationContext).l10n,\n      c = r.useContext(t.ThemeContext).direction,\n      u = r.useState(!1),\n      i = u[0],\n      l = u[1],\n      p = c === t.TextDirection.RightToLeft,\n      m = s(n),\n      g = m.clearKeyword,\n      v = m.changeMatchCase,\n      x = m.changeWholeWords,\n      y = m.currentMatch,\n      E = m.jumpToNextMatch,\n      b = m.jumpToPreviousMatch,\n      S = m.keyword,\n      w = m.matchCase,\n      C = m.numberOfMatches,\n      P = m.wholeWords,\n      I = m.search,\n      _ = m.setKeyword,\n      k = a && a.search ? a.search.enterToSearch : "Enter to search",\n      T = a && a.search ? a.search.previousMatch : "Previous match",\n      M = a && a.search ? a.search.nextMatch : "Next match";\n  return r.createElement("div", {\n    className: "rpv-search__popover"\n  }, r.createElement("div", {\n    className: "rpv-search__popover-input-counter"\n  }, r.createElement(t.TextBox, {\n    ariaLabel: k,\n    autoFocus: !0,\n    placeholder: k,\n    type: "text",\n    value: S,\n    onChange: _,\n    onKeyDown: function (e) {\n      "Enter" === e.key && S && (l(!0), I().then(function (e) {\n        return l(!1);\n      }));\n    }\n  }), r.createElement("div", {\n    className: t.classNames({\n      "rpv-search__popover-counter": !0,\n      "rpv-search__popover-counter--ltr": !p,\n      "rpv-search__popover-counter--rtl": p\n    })\n  }, i && r.createElement(t.Spinner, {\n    size: "1rem"\n  }), !i && r.createElement("span", null, y, "/", C))), r.createElement("label", {\n    className: "rpv-search__popover-label"\n  }, r.createElement("input", {\n    className: "rpv-search__popover-label-checkbox",\n    checked: w,\n    type: "checkbox",\n    onChange: function (e) {\n      v(e.target.checked);\n    }\n  }), " ", a && a.search ? a.search.matchCase : "Match case"), r.createElement("label", {\n    className: "rpv-search__popover-label"\n  }, r.createElement("input", {\n    className: "rpv-search__popover-label-checkbox",\n    checked: P,\n    type: "checkbox",\n    onChange: function (e) {\n      x(e.target.checked);\n    }\n  }), " ", a && a.search ? a.search.wholeWords : "Whole words"), r.createElement("div", {\n    className: "rpv-search__popover-footer"\n  }, r.createElement("div", {\n    className: "rpv-search__popover-footer-item"\n  }, r.createElement(t.Tooltip, {\n    ariaControlsSuffix: "search-previous-match",\n    position: p ? t.Position.BottomRight : t.Position.BottomCenter,\n    target: r.createElement(t.MinimalButton, {\n      ariaLabel: T,\n      isDisabled: y <= 1,\n      onClick: b\n    }, r.createElement(f, null)),\n    content: function () {\n      return T;\n    },\n    offset: d\n  })), r.createElement("div", {\n    className: "rpv-search__popover-footer-item"\n  }, r.createElement(t.Tooltip, {\n    ariaControlsSuffix: "search-next-match",\n    position: t.Position.BottomCenter,\n    target: r.createElement(t.MinimalButton, {\n      ariaLabel: M,\n      isDisabled: y > C - 1,\n      onClick: E\n    }, r.createElement(h, null)),\n    content: function () {\n      return M;\n    },\n    offset: d\n  })), r.createElement("div", {\n    className: t.classNames({\n      "rpv-search__popover-footer-button": !0,\n      "rpv-search__popover-footer-button--ltr": !p,\n      "rpv-search__popover-footer-button--rtl": p\n    })\n  }, r.createElement(t.Button, {\n    onClick: function () {\n      o(), g();\n    }\n  }, a && a.search ? a.search.close : "Close"))));\n},\n    m = function () {\n  return r.createElement(t.Icon, {\n    ignoreDirection: !0,\n    size: 16\n  }, r.createElement("path", {\n    d: "M10.5,0.5c5.523,0,10,4.477,10,10s-4.477,10-10,10s-10-4.477-10-10S4.977,0.5,10.5,0.5z\\n            M23.5,23.5\\n            l-5.929-5.929"\n  }));\n},\n    g = function (e) {\n  var n = e.children,\n      o = e.onClick,\n      a = r.useContext(t.LocalizationContext).l10n,\n      c = a && a.search ? a.search.search : "Search";\n  return n({\n    icon: r.createElement(m, null),\n    label: c,\n    onClick: o\n  });\n},\n    v = {\n  left: 0,\n  top: 8\n},\n    x = function (e) {\n  var n = e.enableShortcuts,\n      o = e.store,\n      a = e.onClick,\n      c = n ? t.isMac() ? "Meta+F" : "Ctrl+F" : "",\n      u = function (e) {\n    e && a();\n  };\n\n  return r.useEffect(function () {\n    return o.subscribe("areShortcutsPressed", u), function () {\n      o.unsubscribe("areShortcutsPressed", u);\n    };\n  }, []), r.createElement(g, {\n    onClick: a\n  }, function (e) {\n    return r.createElement(t.Tooltip, {\n      ariaControlsSuffix: "search-popover",\n      position: t.Position.BottomCenter,\n      target: r.createElement(t.MinimalButton, {\n        ariaKeyShortcuts: c,\n        ariaLabel: e.label,\n        onClick: a\n      }, e.icon),\n      content: function () {\n        return e.label;\n      },\n      offset: v\n    });\n  });\n},\n    y = {\n  left: 0,\n  top: 8\n},\n    E = function (e) {\n  var n = e.children,\n      a = e.enableShortcuts,\n      c = e.store,\n      u = r.useContext(t.ThemeContext).direction === t.TextDirection.RightToLeft ? t.Position.BottomRight : t.Position.BottomLeft,\n      s = n || function (e) {\n    return r.createElement(x, o({\n      enableShortcuts: a,\n      store: c\n    }, e));\n  };\n\n  return r.createElement(t.Popover, {\n    ariaControlsSuffix: "search",\n    position: u,\n    target: function (e) {\n      return s({\n        onClick: e\n      });\n    },\n    content: function (e) {\n      return r.createElement(p, {\n        store: c,\n        onToggle: e\n      });\n    },\n    offset: y,\n    closeOnClickOutside: !1,\n    closeOnEscape: !0\n  });\n},\n    b = function (e) {\n  var t = e.parentNode;\n  t && t.removeChild(e);\n},\n    S = function (e) {\n  var t = e.parentNode;\n\n  if (t) {\n    var n = document.createRange();\n    n.selectNodeContents(e), function (e, t) {\n      b(e);\n      var n = t.parentNode;\n      n && n.insertBefore(e, t), b(t);\n    }(n.extractContents(), e), t.normalize();\n  }\n},\n    w = function (e) {\n  var n = e.numPages,\n      o = e.pageIndex,\n      c = e.store,\n      u = e.onHighlightKeyword,\n      s = r.useState({\n    matchIndex: -1,\n    pageIndex: -1\n  }),\n      i = s[0],\n      l = s[1],\n      h = r.useState([a]),\n      f = h[0],\n      d = h[1],\n      p = r.useState({\n    pageIndex: o,\n    scale: 1,\n    status: t.LayerRenderStatus.PreRender\n  }),\n      m = p[0],\n      g = p[1],\n      v = r.useRef(null),\n      x = r.useRef([]),\n      y = function () {\n    return !0;\n  },\n      E = r.useCallback(function () {\n    return c.get("targetPageFilter") || y;\n  }, [c.get("targetPageFilter")]),\n      b = function (e) {\n    for (var t = e.querySelectorAll("span.rpv-search__highlight"), n = t.length, r = 0; r < n; r++) t[r].parentElement.removeChild(t[r]);\n  },\n      w = function (e) {\n    var t = x.current;\n\n    if (0 !== t.length) {\n      var n = [].slice.call(e.querySelectorAll(".rpv-core__text-layer-text")),\n          r = t.map(function (e) {\n        return e.char;\n      }).join("");\n      f.forEach(function (o) {\n        if (o.source.trim()) {\n          for (var a, c = -1 === o.flags.indexOf("g") ? new RegExp(o, o.flags + "g") : o, s = []; null !== (a = c.exec(r));) s.push({\n            keyword: c,\n            startIndex: a.index,\n            endIndex: c.lastIndex\n          });\n\n          s.map(function (e) {\n            return {\n              keyword: e.keyword,\n              indexes: t.slice(e.startIndex, e.endIndex)\n            };\n          }).forEach(function (t) {\n            var r = t.indexes.reduce(function (e, t) {\n              return e[t.spanIndex] = (e[t.spanIndex] || []).concat([t]), e;\n            }, {});\n            Object.values(r).forEach(function (r) {\n              !function (e, t, n, r) {\n                var o = document.createRange(),\n                    a = n.firstChild;\n\n                if (a) {\n                  var c = r[0].charIndexInSpan,\n                      s = 1 === r.length ? c : r[r.length - 1].charIndexInSpan;\n                  o.setStart(a, c), o.setEnd(a, s + 1);\n                  var i = document.createElement("span");\n                  o.surroundContents(i);\n                  var l = i.getBoundingClientRect(),\n                      h = t.getBoundingClientRect(),\n                      f = document.createElement("span");\n                  t.insertBefore(f, t.firstChild), f.style.left = 100 * (l.left - h.left) / h.width + "%", f.style.top = 100 * (l.top - h.top) / h.height + "%", f.style.width = 100 * l.width / h.width + "%", f.style.height = 100 * l.height / h.height + "%", f.classList.add("rpv-search__highlight"), f.setAttribute("title", e.source.trim()), S(i), u && u({\n                    highlightEle: f,\n                    keyword: e\n                  });\n                }\n              }(t.keyword, e, n[r[0].spanIndex], r);\n            });\n          });\n        }\n      });\n    }\n  },\n      C = function (e) {\n    e && e.length > 0 && d(e);\n  },\n      P = function (e) {\n    return l(e);\n  },\n      I = function (e) {\n    if (e.has(o)) {\n      var t = e.get(o);\n      t && g({\n        ele: t.ele,\n        pageIndex: o,\n        scale: t.scale,\n        status: t.status\n      });\n    }\n  },\n      _ = function () {\n    return 0 === f.length || 1 === f.length && "" === f[0].source.trim();\n  };\n\n  r.useEffect(function () {\n    if (!_() && m.status === t.LayerRenderStatus.DidRender && !x.current.length) {\n      var e = m.ele,\n          n = [].slice.call(e.querySelectorAll(".rpv-core__text-layer-text")).map(function (e) {\n        return e.textContent;\n      }).reduce(function (e, t, n) {\n        return e.concat(t.split("").map(function (e, t) {\n          return {\n            char: e,\n            charIndexInSpan: t,\n            spanIndex: n\n          };\n        }));\n      }, [{\n        char: "",\n        charIndexInSpan: 0,\n        spanIndex: 0\n      }]).slice(1);\n      x.current = n;\n    }\n  }, [f, m.status]), r.useEffect(function () {\n    if (!_() && m.ele && m.status === t.LayerRenderStatus.DidRender && E()({\n      pageIndex: o,\n      numPages: n\n    })) {\n      var e = m.ele;\n      b(e), w(e), k();\n    }\n  }, [f, i, m.status, x.current]), r.useEffect(function () {\n    _() && m.ele && m.status === t.LayerRenderStatus.DidRender && b(m.ele);\n  }, [f, m.status]);\n\n  var k = function () {\n    if (i.pageIndex === o && m.ele && m.status === t.LayerRenderStatus.DidRender) {\n      var e = m.ele,\n          n = e.querySelectorAll(".rpv-search__highlight");\n\n      if (i.matchIndex < n.length) {\n        var r = n[i.matchIndex],\n            a = function (e, t) {\n          for (var n = e.offsetTop, r = e.offsetLeft, o = e.parentElement; o && o !== t;) n += o.offsetTop, r += o.offsetLeft, o = o.parentElement;\n\n          return {\n            left: r,\n            top: n\n          };\n        }(r, e),\n            u = a.left,\n            s = a.top,\n            l = c.get("jumpToDestination");\n\n        l && (l(o, (e.getBoundingClientRect().height - s) / m.scale, u / m.scale, m.scale), v.current && v.current.classList.remove("rpv-search__highlight--current"), v.current = r, r.classList.add("rpv-search__highlight--current"));\n      }\n    }\n  };\n\n  return r.useEffect(function () {\n    return c.subscribe("keyword", C), c.subscribe("matchPosition", P), c.subscribe("renderStatus", I), function () {\n      c.unsubscribe("keyword", C), c.unsubscribe("matchPosition", P), c.unsubscribe("renderStatus", I);\n    };\n  }, []), r.createElement(r.Fragment, null);\n};\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n\n\nexports.NextIcon = h, exports.PreviousIcon = f, exports.SearchIcon = m, exports.searchPlugin = function (e) {\n  var n = r.useMemo(function () {\n    return Object.assign({}, {\n      enableShortcuts: !0,\n      onHighlightKeyword: function () {}\n    }, e);\n  }, []),\n      c = r.useMemo(function () {\n    return t.createStore({\n      renderStatus: new Map()\n    });\n  }, []),\n      h = s(c),\n      f = h.clearKeyword,\n      d = h.jumpToMatch,\n      p = h.jumpToNextMatch,\n      m = h.jumpToPreviousMatch,\n      g = h.searchFor,\n      v = h.setKeywords,\n      y = h.setTargetPages,\n      b = function (e) {\n    return r.createElement(E, o({\n      enableShortcuts: n.enableShortcuts\n    }, e, {\n      store: c\n    }));\n  };\n\n  return {\n    install: function (t) {\n      var n = e && e.keyword ? function (e) {\n        return Array.isArray(e) ? e.map(function (e) {\n          return u(e);\n        }) : [u(e)];\n      }(e.keyword) : [a];\n      c.update("jumpToDestination", t.jumpToDestination), c.update("jumpToPage", t.jumpToPage), c.update("keyword", n);\n    },\n    renderViewer: function (e) {\n      var t = e.slot;\n      return t.subSlot && (t.subSlot.children = r.createElement(r.Fragment, null, n.enableShortcuts && r.createElement(l, {\n        containerRef: e.containerRef,\n        store: c\n      }), Array(e.doc.numPages).fill(0).map(function (t, o) {\n        return r.createElement(w, {\n          key: o,\n          numPages: e.doc.numPages,\n          pageIndex: o,\n          store: c,\n          onHighlightKeyword: n.onHighlightKeyword\n        });\n      }), t.subSlot.children)), t;\n    },\n    uninstall: function (e) {\n      var t = c.get("renderStatus");\n      t && t.clear();\n    },\n    onDocumentLoad: function (e) {\n      c.update("doc", e.doc);\n    },\n    onTextLayerRender: function (e) {\n      var t = c.get("renderStatus");\n      t && (t = t.set(e.pageIndex, e), c.update("renderStatus", t));\n    },\n    Search: function (e) {\n      return r.createElement(i, o({}, e, {\n        store: c\n      }));\n    },\n    ShowSearchPopover: b,\n    ShowSearchPopoverButton: function () {\n      return r.createElement(b, null, function (e) {\n        return r.createElement(x, o({\n          enableShortcuts: n.enableShortcuts,\n          store: c\n        }, e));\n      });\n    },\n    clearHighlights: function () {\n      f();\n    },\n    highlight: function (e) {\n      var t = Array.isArray(e) ? e : [e];\n      return v(t), g(t);\n    },\n    jumpToMatch: d,\n    jumpToNextMatch: p,\n    jumpToPreviousMatch: m,\n    setTargetPages: y\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2974\n')},2069:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/**\n * A React component to view a PDF document\n *\n * @see https://react-pdf-viewer.dev\n * @license https://react-pdf-viewer.dev/license\n * @copyright 2019-2021 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n\n\nif (true) {\n  module.exports = __webpack_require__(2974);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYW5tYXJjaGl2ZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtcGRmLXZpZXdlci9zZWFyY2gvbGliL2luZGV4LmpzP2Q0MjkiXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFYTs7QUFFYixJQUFJQSxJQUFKLEVBQTJDO0FBQ3ZDQyw0Q0FBQTtBQUNILENBRkQsTUFFTyIsImZpbGUiOiIyMDY5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIFJlYWN0IGNvbXBvbmVudCB0byB2aWV3IGEgUERGIGRvY3VtZW50XG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0LXBkZi12aWV3ZXIuZGV2XG4gKiBAbGljZW5zZSBodHRwczovL3JlYWN0LXBkZi12aWV3ZXIuZGV2L2xpY2Vuc2VcbiAqIEBjb3B5cmlnaHQgMjAxOS0yMDIxIE5ndXllbiBIdXUgUGh1b2MgPG1lQHBodW9jLm5nPlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NlYXJjaC5taW4uanMnKTtcbn0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zZWFyY2guanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2069\n")},6949:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: !0\n}));\n\nvar e = __webpack_require__(5466),\n    t = __webpack_require__(2672);\n\nfunction n(e) {\n  if (e && e.__esModule) return e;\n  var t = Object.create(null);\n  return e && Object.keys(e).forEach(function (n) {\n    if ("default" !== n) {\n      var o = Object.getOwnPropertyDescriptor(e, n);\n      Object.defineProperty(t, n, o.get ? o : {\n        enumerable: !0,\n        get: function () {\n          return e[n];\n        }\n      });\n    }\n  }), t.default = e, Object.freeze(t);\n}\n\nvar o,\n    r = n(e);\nexports.SelectionMode = void 0, (o = exports.SelectionMode || (exports.SelectionMode = {})).Hand = "Hand", o.Text = "Text";\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n\nvar c = function () {\n  return (c = Object.assign || function (e) {\n    for (var t, n = 1, o = arguments.length; n < o; n++) for (var r in t = arguments[n]) Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);\n\n    return e;\n  }).apply(this, arguments);\n},\n    i = function () {\n  return r.createElement(t.Icon, {\n    size: 16\n  }, r.createElement("path", {\n    d: "M11.5,5.5v-2C11.5,2.672,12.172,2,13,2s1.5,0.672,1.5,1.5v2 M14.5,11.5v-6C14.5,4.672,15.172,4,16,4\\n            c0.828,0,1.5,0.672,1.5,1.5v3 M17.5,13V8.5C17.5,7.672,18.172,7,19,7s1.5,0.672,1.5,1.5v10c0,2.761-2.239,5-5,5h-3.335\\n            c-1.712-0.001-3.305-0.876-4.223-2.321C6.22,18.467,4.083,14,4.083,14c-0.378-0.545-0.242-1.292,0.303-1.67\\n            c0.446-0.309,1.044-0.281,1.458,0.07L8.5,15.5v-10C8.5,4.672,9.172,4,10,4s1.5,0.672,1.5,1.5v6"\n  }));\n},\n    l = function () {\n  return r.createElement(t.Icon, {\n    size: 16\n  }, r.createElement("path", {\n    d: "M13.675,11.671l2.941-2.941c0.195-0.196,0.195-0.512-0.001-0.707C16.563,7.971,16.5,7.931,16.43,7.906\\n            L4.168,3.527C3.908,3.434,3.622,3.57,3.529,3.83c-0.039,0.109-0.039,0.228,0,0.336l4.379,12.262\\n            c0.093,0.26,0.379,0.396,0.639,0.303c0.07-0.025,0.133-0.065,0.185-0.117l2.943-2.943l6.146,6.146c0.195,0.195,0.512,0.195,0.707,0\\n            l1.293-1.293c0.195-0.195,0.195-0.512,0-0.707L13.675,11.671z"\n  }));\n},\n    u = function (e) {\n  var n = e.children,\n      o = e.mode,\n      c = e.onClick,\n      u = r.useContext(t.LocalizationContext).l10n,\n      s = "",\n      a = r.createElement(l, null);\n\n  switch (o) {\n    case exports.SelectionMode.Hand:\n      s = u && u.selectionMode ? u.selectionMode.handTool : "Hand tool", a = r.createElement(i, null);\n      break;\n\n    case exports.SelectionMode.Text:\n    default:\n      s = u && u.selectionMode ? u.selectionMode.textSelectionTool : "Text selection tool", a = r.createElement(l, null);\n  }\n\n  return n({\n    icon: a,\n    label: s,\n    onClick: c\n  });\n},\n    s = {\n  left: 0,\n  top: 8\n},\n    a = function (e) {\n  var n = e.isSelected,\n      o = e.mode,\n      c = e.onClick;\n  return r.createElement(u, {\n    mode: o,\n    onClick: c\n  }, function (e) {\n    return r.createElement(t.Tooltip, {\n      ariaControlsSuffix: "selection-mode-switch",\n      position: t.Position.BottomCenter,\n      target: r.createElement(t.MinimalButton, {\n        ariaLabel: e.label,\n        isSelected: n,\n        onClick: e.onClick\n      }, e.icon),\n      content: function () {\n        return e.label;\n      },\n      offset: s\n    });\n  });\n},\n    d = function (e) {\n  var t = e.children,\n      n = e.mode,\n      o = e.store,\n      c = n === o.get("selectionMode");\n  return (t || function (e) {\n    return r.createElement(a, {\n      isSelected: c,\n      mode: e.mode,\n      onClick: e.onClick\n    });\n  })({\n    isSelected: c,\n    mode: n,\n    onClick: function () {\n      return o.update("selectionMode", n);\n    }\n  });\n},\n    m = function (e) {\n  var n = e.isSelected,\n      o = e.mode,\n      c = e.onClick;\n  return r.createElement(u, {\n    mode: o,\n    onClick: c\n  }, function (e) {\n    return r.createElement(t.MenuItem, {\n      checked: n,\n      icon: e.icon,\n      onClick: e.onClick\n    }, e.label);\n  });\n},\n    f = function (e) {\n  var t = e.store,\n      n = r.useRef(null),\n      o = r.useState(exports.SelectionMode.Text),\n      c = o[0],\n      i = o[1],\n      l = r.useRef({\n    top: 0,\n    left: 0,\n    x: 0,\n    y: 0\n  }),\n      u = function (e) {\n    var t = n.current;\n    t && (t.scrollTop = l.current.top - (e.clientY - l.current.y), t.scrollLeft = l.current.left - (e.clientX - l.current.x));\n  },\n      s = function () {\n    var e = n.current;\n    e && (e.classList.add("rpv-selection-mode__grab"), e.classList.remove("rpv-selection-mode__grabbing"), document.removeEventListener("mousemove", u), document.removeEventListener("mouseup", s));\n  },\n      a = function (e) {\n    var t = n.current;\n    t && c !== exports.SelectionMode.Text && (t.classList.remove("rpv-selection-mode__grab"), t.classList.add("rpv-selection-mode__grabbing"), e.preventDefault(), e.stopPropagation(), l.current = {\n      left: t.scrollLeft,\n      top: t.scrollTop,\n      x: e.clientX,\n      y: e.clientY\n    }, document.addEventListener("mousemove", u), document.addEventListener("mouseup", s));\n  },\n      d = function (e) {\n    n.current = e();\n  },\n      m = function (e) {\n    i(e);\n  };\n\n  return r.useEffect(function () {\n    var e = n.current;\n    if (e) return c === exports.SelectionMode.Hand ? e.classList.add("rpv-selection-mode__grab") : e.classList.remove("rpv-selection-mode__grab"), e.addEventListener("mousedown", a), function () {\n      e.removeEventListener("mousedown", a);\n    };\n  }, [c]), r.useEffect(function () {\n    return t.subscribe("getPagesContainer", d), t.subscribe("selectionMode", m), function () {\n      t.unsubscribe("getPagesContainer", d), t.unsubscribe("selectionMode", m);\n    };\n  }, []), r.createElement(r.Fragment, null);\n};\n\nexports.HandToolIcon = i, exports.TextSelectionIcon = l, exports.selectionModePlugin = function (e) {\n  var n = r.useMemo(function () {\n    return t.createStore();\n  }, []),\n      o = function (e) {\n    return r.createElement(d, c({}, e, {\n      store: n\n    }));\n  };\n\n  return {\n    install: function (t) {\n      n.update("selectionMode", e && e.selectionMode ? e.selectionMode : exports.SelectionMode.Text), n.update("getPagesContainer", t.getPagesContainer);\n    },\n    renderViewer: function (e) {\n      var t = e.slot;\n      return t.subSlot && t.subSlot.children && (t.subSlot.children = r.createElement(r.Fragment, null, r.createElement(f, {\n        store: n\n      }), t.subSlot.children)), t;\n    },\n    SwitchSelectionMode: o,\n    SwitchSelectionModeButton: function (e) {\n      return r.createElement(o, {\n        mode: e.mode\n      }, function (e) {\n        return r.createElement(a, {\n          isSelected: e.isSelected,\n          mode: e.mode,\n          onClick: function () {\n            e.onClick();\n          }\n        });\n      });\n    },\n    SwitchSelectionModeMenuItem: function (e) {\n      return r.createElement(o, {\n        mode: e.mode\n      }, function (t) {\n        return r.createElement(m, {\n          isSelected: t.isSelected,\n          mode: t.mode,\n          onClick: function () {\n            t.onClick(), e.onClick();\n          }\n        });\n      });\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6949\n')},4240:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/**\n * A React component to view a PDF document\n *\n * @see https://react-pdf-viewer.dev\n * @license https://react-pdf-viewer.dev/license\n * @copyright 2019-2021 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n\n\nif (true) {\n  module.exports = __webpack_require__(6949);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYW5tYXJjaGl2ZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtcGRmLXZpZXdlci9zZWxlY3Rpb24tbW9kZS9saWIvaW5kZXguanM/ODliZCJdLCJuYW1lcyI6WyJwcm9jZXNzIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVhOztBQUViLElBQUlBLElBQUosRUFBMkM7QUFDdkNDLDRDQUFBO0FBQ0gsQ0FGRCxNQUVPIiwiZmlsZSI6IjQyNDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgUmVhY3QgY29tcG9uZW50IHRvIHZpZXcgYSBQREYgZG9jdW1lbnRcbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3QtcGRmLXZpZXdlci5kZXZcbiAqIEBsaWNlbnNlIGh0dHBzOi8vcmVhY3QtcGRmLXZpZXdlci5kZXYvbGljZW5zZVxuICogQGNvcHlyaWdodCAyMDE5LTIwMjEgTmd1eWVuIEh1dSBQaHVvYyA8bWVAcGh1b2Mubmc+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2VsZWN0aW9uLW1vZGUubWluLmpzJyk7XG59IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2VsZWN0aW9uLW1vZGUuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4240\n")},3143:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: !0\n}));\n\nvar e = __webpack_require__(5466),\n    t = __webpack_require__(2672);\n\nfunction n(e) {\n  if (e && e.__esModule) return e;\n  var t = Object.create(null);\n  return e && Object.keys(e).forEach(function (n) {\n    if ("default" !== n) {\n      var r = Object.getOwnPropertyDescriptor(e, n);\n      Object.defineProperty(t, n, r.get ? r : {\n        enumerable: !0,\n        get: function () {\n          return e[n];\n        }\n      });\n    }\n  }), t.default = e, Object.freeze(t);\n}\n\nvar r = n(e),\n    c = function () {\n  return (c = Object.assign || function (e) {\n    for (var t, n = 1, r = arguments.length; n < r; n++) for (var c in t = arguments[n]) Object.prototype.hasOwnProperty.call(t, c) && (e[c] = t[c]);\n\n    return e;\n  }).apply(this, arguments);\n},\n    o = function () {\n  return r.createElement(t.Icon, {\n    size: 16\n  }, r.createElement("path", {\n    d: "M19.5,15.106l2.4-2.4a1,1,0,0,0,0-1.414l-2.4-2.4V5.5a1,1,0,0,0-1-1H15.106l-2.4-2.4a1,1,0,0,0-1.414,0l-2.4,2.4H5.5a1,1,0,0,0-1,1V8.894l-2.4,2.4a1,1,0,0,0,0,1.414l2.4,2.4V18.5a1,1,0,0,0,1,1H8.894l2.4,2.4a1,1,0,0,0,1.414,0l2.4-2.4H18.5a1,1,0,0,0,1-1Z"\n  }), r.createElement("path", {\n    d: "M10,6.349a6,6,0,0,1,0,11.3,6,6,0,1,0,0-11.3Z"\n  }));\n},\n    a = function () {\n  return r.createElement(t.Icon, {\n    size: 16\n  }, r.createElement("path", {\n    d: "M19.491,15.106l2.4-2.4a1,1,0,0,0,0-1.414l-2.4-2.4V5.5a1,1,0,0,0-1-1H15.1L12.7,2.1a1,1,0,0,0-1.414,0l-2.4,2.4H5.491a1,1,0,0,0-1,1V8.894l-2.4,2.4a1,1,0,0,0,0,1.414l2.4,2.4V18.5a1,1,0,0,0,1,1H8.885l2.4,2.4a1,1,0,0,0,1.414,0l2.4-2.4h3.394a1,1,0,0,0,1-1Z"\n  }), r.createElement("path", {\n    d: "M11.491,6c4,0,6,2.686,6,6s-2,6-6,6Z"\n  }));\n},\n    l = {\n  left: 0,\n  top: 8\n},\n    i = function (e) {\n  var n = e.onClick,\n      c = r.useContext(t.ThemeContext),\n      i = r.useContext(t.LocalizationContext).l10n,\n      u = "dark" === c.currentTheme,\n      h = i && i.theme ? u ? i.theme.switchLightTheme : i.theme.switchDarkTheme : u ? "Switch to the light theme" : "Switch to the dark theme";\n  return r.createElement(t.Tooltip, {\n    ariaControlsSuffix: "theme-switch",\n    position: t.Position.BottomCenter,\n    target: r.createElement(t.MinimalButton, {\n      ariaLabel: h,\n      onClick: n\n    }, u ? r.createElement(a, null) : r.createElement(o, null)),\n    content: function () {\n      return h;\n    },\n    offset: l\n  });\n},\n    u = function (e) {\n  var n = e.children,\n      c = r.useContext(t.ThemeContext);\n  return (n || function (e) {\n    return r.createElement(i, {\n      onClick: e.onClick\n    });\n  })({\n    onClick: function () {\n      return c.setCurrentTheme("dark" === c.currentTheme ? "light" : "dark");\n    }\n  });\n},\n    h = function (e) {\n  var n = e.onClick,\n      c = r.useContext(t.ThemeContext),\n      l = r.useContext(t.LocalizationContext).l10n,\n      i = "dark" === c.currentTheme,\n      u = l && l.theme ? i ? l.theme.switchLightTheme : l.theme.switchDarkTheme : i ? "Switch to the light theme" : "Switch to the dark theme";\n  return r.createElement(t.MenuItem, {\n    icon: i ? r.createElement(a, null) : r.createElement(o, null),\n    onClick: n\n  }, u);\n};\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n\n\nexports.DarkIcon = o, exports.LightIcon = a, exports.themePlugin = function () {\n  var e = function (e) {\n    return r.createElement(u, c({}, e));\n  };\n\n  return {\n    SwitchTheme: e,\n    SwitchThemeButton: function () {\n      return r.createElement(e, null, function (e) {\n        return r.createElement(i, c({}, e));\n      });\n    },\n    SwitchThemeMenuItem: function (t) {\n      return r.createElement(e, null, function (e) {\n        return r.createElement(h, {\n          onClick: function () {\n            e.onClick(), t.onClick();\n          }\n        });\n      });\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYW5tYXJjaGl2ZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtcGRmLXZpZXdlci90aGVtZS9saWIvY2pzL3RoZW1lLm1pbi5qcz8yYzhiIl0sIm5hbWVzIjpbIk9iamVjdCIsInZhbHVlIiwiZSIsInJlcXVpcmUiLCJ0IiwibiIsIl9fZXNNb2R1bGUiLCJjcmVhdGUiLCJrZXlzIiwiZm9yRWFjaCIsInIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsImVudW1lcmFibGUiLCJkZWZhdWx0IiwiZnJlZXplIiwiYyIsImFzc2lnbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwibyIsImNyZWF0ZUVsZW1lbnQiLCJJY29uIiwic2l6ZSIsImQiLCJhIiwibCIsImxlZnQiLCJ0b3AiLCJpIiwib25DbGljayIsInVzZUNvbnRleHQiLCJUaGVtZUNvbnRleHQiLCJMb2NhbGl6YXRpb25Db250ZXh0IiwibDEwbiIsInUiLCJjdXJyZW50VGhlbWUiLCJoIiwidGhlbWUiLCJzd2l0Y2hMaWdodFRoZW1lIiwic3dpdGNoRGFya1RoZW1lIiwiVG9vbHRpcCIsImFyaWFDb250cm9sc1N1ZmZpeCIsInBvc2l0aW9uIiwiUG9zaXRpb24iLCJCb3R0b21DZW50ZXIiLCJ0YXJnZXQiLCJNaW5pbWFsQnV0dG9uIiwiYXJpYUxhYmVsIiwiY29udGVudCIsIm9mZnNldCIsImNoaWxkcmVuIiwic2V0Q3VycmVudFRoZW1lIiwiTWVudUl0ZW0iLCJpY29uIiwiZXhwb3J0cyIsIlN3aXRjaFRoZW1lIiwiU3dpdGNoVGhlbWVCdXR0b24iLCJTd2l0Y2hUaGVtZU1lbnVJdGVtIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFBQUEsOENBQTJDO0FBQUNDLE9BQUssRUFBQyxDQUFDO0FBQVIsQ0FBM0M7O0FBQXVELElBQUlDLENBQUMsR0FBQ0MsbUJBQU8sQ0FBQyxJQUFELENBQWI7QUFBQSxJQUF1QkMsQ0FBQyxHQUFDRCxtQkFBTyxDQUFDLElBQUQsQ0FBaEM7O0FBQTJELFNBQVNFLENBQVQsQ0FBV0gsQ0FBWCxFQUFhO0FBQUMsTUFBR0EsQ0FBQyxJQUFFQSxDQUFDLENBQUNJLFVBQVIsRUFBbUIsT0FBT0osQ0FBUDtBQUFTLE1BQUlFLENBQUMsR0FBQ0osTUFBTSxDQUFDTyxNQUFQLENBQWMsSUFBZCxDQUFOO0FBQTBCLFNBQU9MLENBQUMsSUFBRUYsTUFBTSxDQUFDUSxJQUFQLENBQVlOLENBQVosRUFBZU8sT0FBZixDQUF3QixVQUFTSixDQUFULEVBQVc7QUFBQyxRQUFHLGNBQVlBLENBQWYsRUFBaUI7QUFBQyxVQUFJSyxDQUFDLEdBQUNWLE1BQU0sQ0FBQ1csd0JBQVAsQ0FBZ0NULENBQWhDLEVBQWtDRyxDQUFsQyxDQUFOO0FBQTJDTCxZQUFNLENBQUNZLGNBQVAsQ0FBc0JSLENBQXRCLEVBQXdCQyxDQUF4QixFQUEwQkssQ0FBQyxDQUFDRyxHQUFGLEdBQU1ILENBQU4sR0FBUTtBQUFDSSxrQkFBVSxFQUFDLENBQUMsQ0FBYjtBQUFlRCxXQUFHLEVBQUMsWUFBVTtBQUFDLGlCQUFPWCxDQUFDLENBQUNHLENBQUQsQ0FBUjtBQUFZO0FBQTFDLE9BQWxDO0FBQStFO0FBQUMsR0FBakwsQ0FBSCxFQUF1TEQsQ0FBQyxDQUFDVyxPQUFGLEdBQVViLENBQWpNLEVBQW1NRixNQUFNLENBQUNnQixNQUFQLENBQWNaLENBQWQsQ0FBMU07QUFBMk47O0FBQUEsSUFBSU0sQ0FBQyxHQUFDTCxDQUFDLENBQUNILENBQUQsQ0FBUDtBQUFBLElBQVdlLENBQUMsR0FBQyxZQUFVO0FBQUMsU0FBTSxDQUFDQSxDQUFDLEdBQUNqQixNQUFNLENBQUNrQixNQUFQLElBQWUsVUFBU2hCLENBQVQsRUFBVztBQUFDLFNBQUksSUFBSUUsQ0FBSixFQUFNQyxDQUFDLEdBQUMsQ0FBUixFQUFVSyxDQUFDLEdBQUNTLFNBQVMsQ0FBQ0MsTUFBMUIsRUFBaUNmLENBQUMsR0FBQ0ssQ0FBbkMsRUFBcUNMLENBQUMsRUFBdEMsRUFBeUMsS0FBSSxJQUFJWSxDQUFSLElBQWFiLENBQUMsR0FBQ2UsU0FBUyxDQUFDZCxDQUFELENBQXhCLEVBQTRCTCxNQUFNLENBQUNxQixTQUFQLENBQWlCQyxjQUFqQixDQUFnQ0MsSUFBaEMsQ0FBcUNuQixDQUFyQyxFQUF1Q2EsQ0FBdkMsTUFBNENmLENBQUMsQ0FBQ2UsQ0FBRCxDQUFELEdBQUtiLENBQUMsQ0FBQ2EsQ0FBRCxDQUFsRDs7QUFBdUQsV0FBT2YsQ0FBUDtBQUFTLEdBQW5LLEVBQXFLc0IsS0FBckssQ0FBMkssSUFBM0ssRUFBZ0xMLFNBQWhMLENBQU47QUFBaU0sQ0FBek47QUFBQSxJQUEwTk0sQ0FBQyxHQUFDLFlBQVU7QUFBQyxTQUFPZixDQUFDLENBQUNnQixhQUFGLENBQWdCdEIsQ0FBQyxDQUFDdUIsSUFBbEIsRUFBdUI7QUFBQ0MsUUFBSSxFQUFDO0FBQU4sR0FBdkIsRUFBaUNsQixDQUFDLENBQUNnQixhQUFGLENBQWdCLE1BQWhCLEVBQXVCO0FBQUNHLEtBQUMsRUFBQztBQUFILEdBQXZCLENBQWpDLEVBQXNUbkIsQ0FBQyxDQUFDZ0IsYUFBRixDQUFnQixNQUFoQixFQUF1QjtBQUFDRyxLQUFDLEVBQUM7QUFBSCxHQUF2QixDQUF0VCxDQUFQO0FBQXlZLENBQWhuQjtBQUFBLElBQWluQkMsQ0FBQyxHQUFDLFlBQVU7QUFBQyxTQUFPcEIsQ0FBQyxDQUFDZ0IsYUFBRixDQUFnQnRCLENBQUMsQ0FBQ3VCLElBQWxCLEVBQXVCO0FBQUNDLFFBQUksRUFBQztBQUFOLEdBQXZCLEVBQWlDbEIsQ0FBQyxDQUFDZ0IsYUFBRixDQUFnQixNQUFoQixFQUF1QjtBQUFDRyxLQUFDLEVBQUM7QUFBSCxHQUF2QixDQUFqQyxFQUF5VG5CLENBQUMsQ0FBQ2dCLGFBQUYsQ0FBZ0IsTUFBaEIsRUFBdUI7QUFBQ0csS0FBQyxFQUFDO0FBQUgsR0FBdkIsQ0FBelQsQ0FBUDtBQUFtWSxDQUFqZ0M7QUFBQSxJQUFrZ0NFLENBQUMsR0FBQztBQUFDQyxNQUFJLEVBQUMsQ0FBTjtBQUFRQyxLQUFHLEVBQUM7QUFBWixDQUFwZ0M7QUFBQSxJQUFtaENDLENBQUMsR0FBQyxVQUFTaEMsQ0FBVCxFQUFXO0FBQUMsTUFBSUcsQ0FBQyxHQUFDSCxDQUFDLENBQUNpQyxPQUFSO0FBQUEsTUFBZ0JsQixDQUFDLEdBQUNQLENBQUMsQ0FBQzBCLFVBQUYsQ0FBYWhDLENBQUMsQ0FBQ2lDLFlBQWYsQ0FBbEI7QUFBQSxNQUErQ0gsQ0FBQyxHQUFDeEIsQ0FBQyxDQUFDMEIsVUFBRixDQUFhaEMsQ0FBQyxDQUFDa0MsbUJBQWYsRUFBb0NDLElBQXJGO0FBQUEsTUFBMEZDLENBQUMsR0FBQyxXQUFTdkIsQ0FBQyxDQUFDd0IsWUFBdkc7QUFBQSxNQUFvSEMsQ0FBQyxHQUFDUixDQUFDLElBQUVBLENBQUMsQ0FBQ1MsS0FBTCxHQUFXSCxDQUFDLEdBQUNOLENBQUMsQ0FBQ1MsS0FBRixDQUFRQyxnQkFBVCxHQUEwQlYsQ0FBQyxDQUFDUyxLQUFGLENBQVFFLGVBQTlDLEdBQThETCxDQUFDLEdBQUMsMkJBQUQsR0FBNkIsMEJBQWxOO0FBQTZPLFNBQU85QixDQUFDLENBQUNnQixhQUFGLENBQWdCdEIsQ0FBQyxDQUFDMEMsT0FBbEIsRUFBMEI7QUFBQ0Msc0JBQWtCLEVBQUMsY0FBcEI7QUFBbUNDLFlBQVEsRUFBQzVDLENBQUMsQ0FBQzZDLFFBQUYsQ0FBV0MsWUFBdkQ7QUFBb0VDLFVBQU0sRUFBQ3pDLENBQUMsQ0FBQ2dCLGFBQUYsQ0FBZ0J0QixDQUFDLENBQUNnRCxhQUFsQixFQUFnQztBQUFDQyxlQUFTLEVBQUNYLENBQVg7QUFBYVAsYUFBTyxFQUFDOUI7QUFBckIsS0FBaEMsRUFBd0RtQyxDQUFDLEdBQUM5QixDQUFDLENBQUNnQixhQUFGLENBQWdCSSxDQUFoQixFQUFrQixJQUFsQixDQUFELEdBQXlCcEIsQ0FBQyxDQUFDZ0IsYUFBRixDQUFnQkQsQ0FBaEIsRUFBa0IsSUFBbEIsQ0FBbEYsQ0FBM0U7QUFBc0w2QixXQUFPLEVBQUMsWUFBVTtBQUFDLGFBQU9aLENBQVA7QUFBUyxLQUFsTjtBQUFtTmEsVUFBTSxFQUFDeEI7QUFBMU4sR0FBMUIsQ0FBUDtBQUErUCxDQUE3Z0Q7QUFBQSxJQUE4Z0RTLENBQUMsR0FBQyxVQUFTdEMsQ0FBVCxFQUFXO0FBQUMsTUFBSUcsQ0FBQyxHQUFDSCxDQUFDLENBQUNzRCxRQUFSO0FBQUEsTUFBaUJ2QyxDQUFDLEdBQUNQLENBQUMsQ0FBQzBCLFVBQUYsQ0FBYWhDLENBQUMsQ0FBQ2lDLFlBQWYsQ0FBbkI7QUFBZ0QsU0FBTSxDQUFDaEMsQ0FBQyxJQUFFLFVBQVNILENBQVQsRUFBVztBQUFDLFdBQU9RLENBQUMsQ0FBQ2dCLGFBQUYsQ0FBZ0JRLENBQWhCLEVBQWtCO0FBQUNDLGFBQU8sRUFBQ2pDLENBQUMsQ0FBQ2lDO0FBQVgsS0FBbEIsQ0FBUDtBQUE4QyxHQUE5RCxFQUFnRTtBQUFDQSxXQUFPLEVBQUMsWUFBVTtBQUFDLGFBQU9sQixDQUFDLENBQUN3QyxlQUFGLENBQWtCLFdBQVN4QyxDQUFDLENBQUN3QixZQUFYLEdBQXdCLE9BQXhCLEdBQWdDLE1BQWxELENBQVA7QUFBaUU7QUFBckYsR0FBaEUsQ0FBTjtBQUE4SixDQUExdUQ7QUFBQSxJQUEydURDLENBQUMsR0FBQyxVQUFTeEMsQ0FBVCxFQUFXO0FBQUMsTUFBSUcsQ0FBQyxHQUFDSCxDQUFDLENBQUNpQyxPQUFSO0FBQUEsTUFBZ0JsQixDQUFDLEdBQUNQLENBQUMsQ0FBQzBCLFVBQUYsQ0FBYWhDLENBQUMsQ0FBQ2lDLFlBQWYsQ0FBbEI7QUFBQSxNQUErQ04sQ0FBQyxHQUFDckIsQ0FBQyxDQUFDMEIsVUFBRixDQUFhaEMsQ0FBQyxDQUFDa0MsbUJBQWYsRUFBb0NDLElBQXJGO0FBQUEsTUFBMEZMLENBQUMsR0FBQyxXQUFTakIsQ0FBQyxDQUFDd0IsWUFBdkc7QUFBQSxNQUFvSEQsQ0FBQyxHQUFDVCxDQUFDLElBQUVBLENBQUMsQ0FBQ1ksS0FBTCxHQUFXVCxDQUFDLEdBQUNILENBQUMsQ0FBQ1ksS0FBRixDQUFRQyxnQkFBVCxHQUEwQmIsQ0FBQyxDQUFDWSxLQUFGLENBQVFFLGVBQTlDLEdBQThEWCxDQUFDLEdBQUMsMkJBQUQsR0FBNkIsMEJBQWxOO0FBQTZPLFNBQU94QixDQUFDLENBQUNnQixhQUFGLENBQWdCdEIsQ0FBQyxDQUFDc0QsUUFBbEIsRUFBMkI7QUFBQ0MsUUFBSSxFQUFDekIsQ0FBQyxHQUFDeEIsQ0FBQyxDQUFDZ0IsYUFBRixDQUFnQkksQ0FBaEIsRUFBa0IsSUFBbEIsQ0FBRCxHQUF5QnBCLENBQUMsQ0FBQ2dCLGFBQUYsQ0FBZ0JELENBQWhCLEVBQWtCLElBQWxCLENBQWhDO0FBQXdEVSxXQUFPLEVBQUM5QjtBQUFoRSxHQUEzQixFQUE4Rm1DLENBQTlGLENBQVA7QUFBd0csQ0FBOWtFO0FBQzlaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUFnRm9CLGdCQUFBLEdBQWlCbkMsQ0FBakIsRUFBbUJtQyxpQkFBQSxHQUFrQjlCLENBQXJDLEVBQXVDOEIsbUJBQUEsR0FBb0IsWUFBVTtBQUFDLE1BQUkxRCxDQUFDLEdBQUMsVUFBU0EsQ0FBVCxFQUFXO0FBQUMsV0FBT1EsQ0FBQyxDQUFDZ0IsYUFBRixDQUFnQmMsQ0FBaEIsRUFBa0J2QixDQUFDLENBQUMsRUFBRCxFQUFJZixDQUFKLENBQW5CLENBQVA7QUFBa0MsR0FBcEQ7O0FBQXFELFNBQU07QUFBQzJELGVBQVcsRUFBQzNELENBQWI7QUFBZTRELHFCQUFpQixFQUFDLFlBQVU7QUFBQyxhQUFPcEQsQ0FBQyxDQUFDZ0IsYUFBRixDQUFnQnhCLENBQWhCLEVBQWtCLElBQWxCLEVBQXdCLFVBQVNBLENBQVQsRUFBVztBQUFDLGVBQU9RLENBQUMsQ0FBQ2dCLGFBQUYsQ0FBZ0JRLENBQWhCLEVBQWtCakIsQ0FBQyxDQUFDLEVBQUQsRUFBSWYsQ0FBSixDQUFuQixDQUFQO0FBQWtDLE9BQXRFLENBQVA7QUFBZ0YsS0FBNUg7QUFBNkg2RCx1QkFBbUIsRUFBQyxVQUFTM0QsQ0FBVCxFQUFXO0FBQUMsYUFBT00sQ0FBQyxDQUFDZ0IsYUFBRixDQUFnQnhCLENBQWhCLEVBQWtCLElBQWxCLEVBQXdCLFVBQVNBLENBQVQsRUFBVztBQUFDLGVBQU9RLENBQUMsQ0FBQ2dCLGFBQUYsQ0FBZ0JnQixDQUFoQixFQUFrQjtBQUFDUCxpQkFBTyxFQUFDLFlBQVU7QUFBQ2pDLGFBQUMsQ0FBQ2lDLE9BQUYsSUFBWS9CLENBQUMsQ0FBQytCLE9BQUYsRUFBWjtBQUF3QjtBQUE1QyxTQUFsQixDQUFQO0FBQXdFLE9BQTVHLENBQVA7QUFBc0g7QUFBblIsR0FBTjtBQUEyUixDQUF0WiIsImZpbGUiOiIzMTQzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGU9cmVxdWlyZShcInJlYWN0XCIpLHQ9cmVxdWlyZShcIkByZWFjdC1wZGYtdmlld2VyL2NvcmVcIik7ZnVuY3Rpb24gbihlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9T2JqZWN0LmNyZWF0ZShudWxsKTtyZXR1cm4gZSYmT2JqZWN0LmtleXMoZSkuZm9yRWFjaCgoZnVuY3Rpb24obil7aWYoXCJkZWZhdWx0XCIhPT1uKXt2YXIgcj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsbik7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbixyLmdldD9yOntlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlW25dfX0pfX0pKSx0LmRlZmF1bHQ9ZSxPYmplY3QuZnJlZXplKHQpfXZhciByPW4oZSksYz1mdW5jdGlvbigpe3JldHVybihjPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPTEscj1hcmd1bWVudHMubGVuZ3RoO248cjtuKyspZm9yKHZhciBjIGluIHQ9YXJndW1lbnRzW25dKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGMpJiYoZVtjXT10W2NdKTtyZXR1cm4gZX0pLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sbz1mdW5jdGlvbigpe3JldHVybiByLmNyZWF0ZUVsZW1lbnQodC5JY29uLHtzaXplOjE2fSxyLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIse2Q6XCJNMTkuNSwxNS4xMDZsMi40LTIuNGExLDEsMCwwLDAsMC0xLjQxNGwtMi40LTIuNFY1LjVhMSwxLDAsMCwwLTEtMUgxNS4xMDZsLTIuNC0yLjRhMSwxLDAsMCwwLTEuNDE0LDBsLTIuNCwyLjRINS41YTEsMSwwLDAsMC0xLDFWOC44OTRsLTIuNCwyLjRhMSwxLDAsMCwwLDAsMS40MTRsMi40LDIuNFYxOC41YTEsMSwwLDAsMCwxLDFIOC44OTRsMi40LDIuNGExLDEsMCwwLDAsMS40MTQsMGwyLjQtMi40SDE4LjVhMSwxLDAsMCwwLDEtMVpcIn0pLHIuY3JlYXRlRWxlbWVudChcInBhdGhcIix7ZDpcIk0xMCw2LjM0OWE2LDYsMCwwLDEsMCwxMS4zLDYsNiwwLDEsMCwwLTExLjNaXCJ9KSl9LGE9ZnVuY3Rpb24oKXtyZXR1cm4gci5jcmVhdGVFbGVtZW50KHQuSWNvbix7c2l6ZToxNn0sci5jcmVhdGVFbGVtZW50KFwicGF0aFwiLHtkOlwiTTE5LjQ5MSwxNS4xMDZsMi40LTIuNGExLDEsMCwwLDAsMC0xLjQxNGwtMi40LTIuNFY1LjVhMSwxLDAsMCwwLTEtMUgxNS4xTDEyLjcsMi4xYTEsMSwwLDAsMC0xLjQxNCwwbC0yLjQsMi40SDUuNDkxYTEsMSwwLDAsMC0xLDFWOC44OTRsLTIuNCwyLjRhMSwxLDAsMCwwLDAsMS40MTRsMi40LDIuNFYxOC41YTEsMSwwLDAsMCwxLDFIOC44ODVsMi40LDIuNGExLDEsMCwwLDAsMS40MTQsMGwyLjQtMi40aDMuMzk0YTEsMSwwLDAsMCwxLTFaXCJ9KSxyLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIse2Q6XCJNMTEuNDkxLDZjNCwwLDYsMi42ODYsNiw2cy0yLDYtNiw2WlwifSkpfSxsPXtsZWZ0OjAsdG9wOjh9LGk9ZnVuY3Rpb24oZSl7dmFyIG49ZS5vbkNsaWNrLGM9ci51c2VDb250ZXh0KHQuVGhlbWVDb250ZXh0KSxpPXIudXNlQ29udGV4dCh0LkxvY2FsaXphdGlvbkNvbnRleHQpLmwxMG4sdT1cImRhcmtcIj09PWMuY3VycmVudFRoZW1lLGg9aSYmaS50aGVtZT91P2kudGhlbWUuc3dpdGNoTGlnaHRUaGVtZTppLnRoZW1lLnN3aXRjaERhcmtUaGVtZTp1P1wiU3dpdGNoIHRvIHRoZSBsaWdodCB0aGVtZVwiOlwiU3dpdGNoIHRvIHRoZSBkYXJrIHRoZW1lXCI7cmV0dXJuIHIuY3JlYXRlRWxlbWVudCh0LlRvb2x0aXAse2FyaWFDb250cm9sc1N1ZmZpeDpcInRoZW1lLXN3aXRjaFwiLHBvc2l0aW9uOnQuUG9zaXRpb24uQm90dG9tQ2VudGVyLHRhcmdldDpyLmNyZWF0ZUVsZW1lbnQodC5NaW5pbWFsQnV0dG9uLHthcmlhTGFiZWw6aCxvbkNsaWNrOm59LHU/ci5jcmVhdGVFbGVtZW50KGEsbnVsbCk6ci5jcmVhdGVFbGVtZW50KG8sbnVsbCkpLGNvbnRlbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gaH0sb2Zmc2V0Omx9KX0sdT1mdW5jdGlvbihlKXt2YXIgbj1lLmNoaWxkcmVuLGM9ci51c2VDb250ZXh0KHQuVGhlbWVDb250ZXh0KTtyZXR1cm4obnx8ZnVuY3Rpb24oZSl7cmV0dXJuIHIuY3JlYXRlRWxlbWVudChpLHtvbkNsaWNrOmUub25DbGlja30pfSkoe29uQ2xpY2s6ZnVuY3Rpb24oKXtyZXR1cm4gYy5zZXRDdXJyZW50VGhlbWUoXCJkYXJrXCI9PT1jLmN1cnJlbnRUaGVtZT9cImxpZ2h0XCI6XCJkYXJrXCIpfX0pfSxoPWZ1bmN0aW9uKGUpe3ZhciBuPWUub25DbGljayxjPXIudXNlQ29udGV4dCh0LlRoZW1lQ29udGV4dCksbD1yLnVzZUNvbnRleHQodC5Mb2NhbGl6YXRpb25Db250ZXh0KS5sMTBuLGk9XCJkYXJrXCI9PT1jLmN1cnJlbnRUaGVtZSx1PWwmJmwudGhlbWU/aT9sLnRoZW1lLnN3aXRjaExpZ2h0VGhlbWU6bC50aGVtZS5zd2l0Y2hEYXJrVGhlbWU6aT9cIlN3aXRjaCB0byB0aGUgbGlnaHQgdGhlbWVcIjpcIlN3aXRjaCB0byB0aGUgZGFyayB0aGVtZVwiO3JldHVybiByLmNyZWF0ZUVsZW1lbnQodC5NZW51SXRlbSx7aWNvbjppP3IuY3JlYXRlRWxlbWVudChhLG51bGwpOnIuY3JlYXRlRWxlbWVudChvLG51bGwpLG9uQ2xpY2s6bn0sdSl9O1xuLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovZXhwb3J0cy5EYXJrSWNvbj1vLGV4cG9ydHMuTGlnaHRJY29uPWEsZXhwb3J0cy50aGVtZVBsdWdpbj1mdW5jdGlvbigpe3ZhciBlPWZ1bmN0aW9uKGUpe3JldHVybiByLmNyZWF0ZUVsZW1lbnQodSxjKHt9LGUpKX07cmV0dXJue1N3aXRjaFRoZW1lOmUsU3dpdGNoVGhlbWVCdXR0b246ZnVuY3Rpb24oKXtyZXR1cm4gci5jcmVhdGVFbGVtZW50KGUsbnVsbCwoZnVuY3Rpb24oZSl7cmV0dXJuIHIuY3JlYXRlRWxlbWVudChpLGMoe30sZSkpfSkpfSxTd2l0Y2hUaGVtZU1lbnVJdGVtOmZ1bmN0aW9uKHQpe3JldHVybiByLmNyZWF0ZUVsZW1lbnQoZSxudWxsLChmdW5jdGlvbihlKXtyZXR1cm4gci5jcmVhdGVFbGVtZW50KGgse29uQ2xpY2s6ZnVuY3Rpb24oKXtlLm9uQ2xpY2soKSx0Lm9uQ2xpY2soKX19KX0pKX19fTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3143\n')},8099:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/**\n * A React component to view a PDF document\n *\n * @see https://react-pdf-viewer.dev\n * @license https://react-pdf-viewer.dev/license\n * @copyright 2019-2021 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n\n\nif (true) {\n  module.exports = __webpack_require__(3143);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYW5tYXJjaGl2ZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtcGRmLXZpZXdlci90aGVtZS9saWIvaW5kZXguanM/Y2NlNCJdLCJuYW1lcyI6WyJwcm9jZXNzIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVhOztBQUViLElBQUlBLElBQUosRUFBMkM7QUFDdkNDLDRDQUFBO0FBQ0gsQ0FGRCxNQUVPIiwiZmlsZSI6IjgwOTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgUmVhY3QgY29tcG9uZW50IHRvIHZpZXcgYSBQREYgZG9jdW1lbnRcbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3QtcGRmLXZpZXdlci5kZXZcbiAqIEBsaWNlbnNlIGh0dHBzOi8vcmVhY3QtcGRmLXZpZXdlci5kZXYvbGljZW5zZVxuICogQGNvcHlyaWdodCAyMDE5LTIwMjEgTmd1eWVuIEh1dSBQaHVvYyA8bWVAcGh1b2Mubmc+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvdGhlbWUubWluLmpzJyk7XG59IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvdGhlbWUuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8099\n")},7863:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('var __webpack_unused_export__;\n\n\n__webpack_unused_export__ = ({\n  value: !0\n});\n\nvar e = __webpack_require__(5466),\n    t = __webpack_require__(6114),\n    r = __webpack_require__(8039),\n    n = __webpack_require__(8119),\n    o = __webpack_require__(633),\n    l = __webpack_require__(9263),\n    a = __webpack_require__(3504),\n    i = __webpack_require__(4203),\n    c = __webpack_require__(4376),\n    m = __webpack_require__(2069),\n    u = __webpack_require__(4240),\n    s = __webpack_require__(8099),\n    d = __webpack_require__(4828),\n    p = __webpack_require__(2672);\n\nfunction v(e) {\n  if (e && e.__esModule) return e;\n  var t = Object.create(null);\n  return e && Object.keys(e).forEach(function (r) {\n    if ("default" !== r) {\n      var n = Object.getOwnPropertyDescriptor(e, r);\n      Object.defineProperty(t, r, n.get ? n : {\n        enumerable: !0,\n        get: function () {\n          return e[r];\n        }\n      });\n    }\n  }), t.default = e, Object.freeze(t);\n}\n\nvar _ = v(e),\n    E = function () {\n  return (E = Object.assign || function (e) {\n    for (var t, r = 1, n = arguments.length; r < n; r++) for (var o in t = arguments[r]) Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);\n\n    return e;\n  }).apply(this, arguments);\n},\n    P = function () {\n  return _.createElement(p.Icon, {\n    size: 16\n  }, _.createElement("path", {\n    d: "M12,0.5c1.381,0,2.5,1.119,2.5,2.5S13.381,5.5,12,5.5S9.5,4.381,9.5,3S10.619,0.5,12,0.5z\\n            M12,9.5\\n            c1.381,0,2.5,1.119,2.5,2.5s-1.119,2.5-2.5,2.5S9.5,13.381,9.5,12S10.619,9.5,12,9.5z\\n            M12,18.5c1.381,0,2.5,1.119,2.5,2.5\\n            s-1.119,2.5-2.5,2.5S9.5,22.381,9.5,21S10.619,18.5,12,18.5z"\n  }));\n},\n    g = {\n  left: 0,\n  top: 8\n},\n    M = function (e) {\n  var t = e.toolbarSlot,\n      r = _.useContext(p.LocalizationContext).l10n,\n      n = _.useContext(p.ThemeContext).direction === p.TextDirection.RightToLeft ? p.Position.BottomLeft : p.Position.BottomRight,\n      o = t.DownloadMenuItem,\n      l = t.EnterFullScreenMenuItem,\n      a = t.GoToFirstPageMenuItem,\n      i = t.GoToLastPageMenuItem,\n      m = t.GoToNextPageMenuItem,\n      s = t.GoToPreviousPageMenuItem,\n      d = t.OpenMenuItem,\n      v = t.PrintMenuItem,\n      E = t.RotateBackwardMenuItem,\n      M = t.RotateForwardMenuItem,\n      h = t.ShowPropertiesMenuItem,\n      f = t.SwitchScrollModeMenuItem,\n      S = t.SwitchSelectionModeMenuItem,\n      I = t.SwitchThemeMenuItem;\n\n  return _.createElement(p.Popover, {\n    ariaControlsSuffix: "toolbar-more-actions",\n    ariaHasPopup: "menu",\n    position: n,\n    target: function (e, t) {\n      var o = r && r.toolbar ? r.toolbar.moreActions : "More actions";\n      return _.createElement(p.Tooltip, {\n        ariaControlsSuffix: "toolbar-more-actions",\n        position: n,\n        target: _.createElement(p.MinimalButton, {\n          ariaLabel: o,\n          onClick: e,\n          isSelected: t\n        }, _.createElement(P, null)),\n        content: function () {\n          return o;\n        },\n        offset: g\n      });\n    },\n    content: function (e) {\n      return _.createElement(p.Menu, null, _.createElement("div", {\n        className: "rpv-core__display--block rpv-core__display--hidden-medium"\n      }, _.createElement(I, {\n        onClick: e\n      })), _.createElement("div", {\n        className: "rpv-core__display--block rpv-core__display--hidden-medium"\n      }, _.createElement(l, {\n        onClick: e\n      })), _.createElement("div", {\n        className: "rpv-core__display--block rpv-core__display--hidden-medium"\n      }, _.createElement(d, null)), _.createElement("div", {\n        className: "rpv-core__display--block rpv-core__display--hidden-medium"\n      }, _.createElement(v, {\n        onClick: e\n      })), _.createElement("div", {\n        className: "rpv-core__display--block rpv-core__display--hidden-medium"\n      }, _.createElement(o, {\n        onClick: e\n      })), _.createElement("div", {\n        className: "rpv-core__display--block rpv-core__display--hidden-medium"\n      }, _.createElement(p.MenuDivider, null)), _.createElement(a, {\n        onClick: e\n      }), _.createElement("div", {\n        className: "rpv-core__display--block rpv-core__display--hidden-medium"\n      }, _.createElement(s, {\n        onClick: e\n      })), _.createElement("div", {\n        className: "rpv-core__display--block rpv-core__display--hidden-medium"\n      }, _.createElement(m, {\n        onClick: e\n      })), _.createElement(i, {\n        onClick: e\n      }), _.createElement(p.MenuDivider, null), _.createElement(M, {\n        onClick: e\n      }), _.createElement(E, {\n        onClick: e\n      }), _.createElement(p.MenuDivider, null), _.createElement(S, {\n        mode: u.SelectionMode.Text,\n        onClick: e\n      }), _.createElement(S, {\n        mode: u.SelectionMode.Hand,\n        onClick: e\n      }), _.createElement(p.MenuDivider, null), _.createElement(f, {\n        mode: c.ScrollMode.Vertical,\n        onClick: e\n      }), _.createElement(f, {\n        mode: c.ScrollMode.Horizontal,\n        onClick: e\n      }), _.createElement(f, {\n        mode: c.ScrollMode.Wrapped,\n        onClick: e\n      }), _.createElement(p.MenuDivider, null), _.createElement(h, {\n        onClick: e\n      }));\n    },\n    offset: g,\n    closeOnClickOutside: !0,\n    closeOnEscape: !0\n  });\n},\n    h = function (e) {\n  var t = _.useContext(p.ThemeContext).direction === p.TextDirection.RightToLeft,\n      r = e.CurrentPageInput,\n      n = e.Download,\n      o = e.EnterFullScreen,\n      l = e.GoToNextPage,\n      a = e.GoToPreviousPage,\n      i = e.NumberOfPages,\n      c = e.Open,\n      m = e.Print,\n      u = e.ShowSearchPopover,\n      s = e.SwitchTheme,\n      d = e.Zoom,\n      v = e.ZoomIn,\n      E = e.ZoomOut;\n  return _.createElement("div", {\n    "data-testid": "toolbar",\n    className: p.classNames({\n      "rpv-toolbar": !0,\n      "rpv-toolbar--rtl": t\n    }),\n    role: "toolbar",\n    "aria-orientation": "horizontal"\n  }, _.createElement("div", {\n    className: "rpv-toolbar__left"\n  }, _.createElement("div", {\n    className: "rpv-toolbar__item"\n  }, _.createElement(u, null)), _.createElement("div", {\n    className: "rpv-core__display--hidden rpv-core__display--block-small"\n  }, _.createElement("div", {\n    className: "rpv-toolbar__item"\n  }, _.createElement(a, null))), _.createElement("div", {\n    className: "rpv-toolbar__item"\n  }, _.createElement(r, null), _.createElement("span", {\n    className: "rpv-toolbar__label"\n  }, "/ ", _.createElement(i, null))), _.createElement("div", {\n    className: "rpv-core__display--hidden rpv-core__display--block-small"\n  }, _.createElement("div", {\n    className: "rpv-toolbar__item"\n  }, _.createElement(l, null)))), _.createElement("div", {\n    className: "rpv-toolbar__center"\n  }, _.createElement("div", {\n    className: "rpv-toolbar__item"\n  }, _.createElement(E, null)), _.createElement("div", {\n    className: "rpv-core__display--hidden rpv-core__display--block-small"\n  }, _.createElement("div", {\n    className: "rpv-toolbar__item"\n  }, _.createElement(d, null))), _.createElement("div", {\n    className: "rpv-toolbar__item"\n  }, _.createElement(v, null))), _.createElement("div", {\n    className: "rpv-toolbar__right"\n  }, _.createElement("div", {\n    className: "rpv-core__display--hidden rpv-core__display--block-medium"\n  }, _.createElement("div", {\n    className: "rpv-toolbar__item"\n  }, _.createElement(s, null))), _.createElement("div", {\n    className: "rpv-core__display--hidden rpv-core__display--block-medium"\n  }, _.createElement("div", {\n    className: "rpv-toolbar__item"\n  }, _.createElement(o, null))), _.createElement("div", {\n    className: "rpv-core__display--hidden rpv-core__display--block-medium"\n  }, _.createElement("div", {\n    className: "rpv-toolbar__item"\n  }, _.createElement(c, null))), _.createElement("div", {\n    className: "rpv-core__display--hidden rpv-core__display--block-medium"\n  }, _.createElement("div", {\n    className: "rpv-toolbar__item"\n  }, _.createElement(n, null))), _.createElement("div", {\n    className: "rpv-core__display--hidden rpv-core__display--block-medium"\n  }, _.createElement("div", {\n    className: "rpv-toolbar__item"\n  }, _.createElement(m, null))), _.createElement("div", {\n    className: "rpv-toolbar__item"\n  }, _.createElement(M, {\n    toolbarSlot: e\n  }))));\n},\n    f = function (e) {\n  var t = e.children,\n      r = e.slot;\n  return (t || h)(r);\n};\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n\n\n__webpack_unused_export__ = M, __webpack_unused_export__ = P, exports.toolbarPlugin = function (e) {\n  var p = t.fullScreenPlugin(e ? e.fullScreenPlugin : {}),\n      v = r.getFilePlugin(e ? e.getFilePlugin : {}),\n      P = n.openPlugin(e ? e.openPlugin : {}),\n      g = o.pageNavigationPlugin(),\n      M = l.printPlugin(e ? e.printPlugin : {}),\n      h = a.propertiesPlugin(),\n      S = i.rotatePlugin(),\n      I = c.scrollModePlugin(e ? e.scrollModePlugin : {}),\n      b = m.searchPlugin(e ? e.searchPlugin : {}),\n      w = u.selectionModePlugin(e ? e.selectionModePlugin : {}),\n      N = s.themePlugin(),\n      y = d.zoomPlugin(e ? e.zoomPlugin : {}),\n      T = [p, v, P, g, M, h, S, I, b, w, N, y];\n  return {\n    fullScreenPluginInstance: p,\n    getFilePluginInstance: v,\n    openPluginInstance: P,\n    pageNavigationPluginInstance: g,\n    printPluginInstance: M,\n    propertiesPluginInstance: h,\n    rotatePluginInstance: S,\n    scrollModePluginInstance: I,\n    searchPluginInstance: b,\n    selectionModePluginInstance: w,\n    themePluginInstance: N,\n    zoomPluginInstance: y,\n    install: function (e) {\n      T.forEach(function (t) {\n        t.install && t.install(e);\n      });\n    },\n    renderViewer: function (e) {\n      var t = e.slot;\n      return T.forEach(function (r) {\n        r.renderViewer && (t = r.renderViewer(E(E({}, e), {\n          slot: t\n        })));\n      }), t;\n    },\n    uninstall: function (e) {\n      T.forEach(function (t) {\n        t.uninstall && t.uninstall(e);\n      });\n    },\n    onDocumentLoad: function (e) {\n      T.forEach(function (t) {\n        t.onDocumentLoad && t.onDocumentLoad(e);\n      });\n    },\n    onTextLayerRender: function (e) {\n      T.forEach(function (t) {\n        t.onTextLayerRender && t.onTextLayerRender(e);\n      });\n    },\n    onViewerStateChange: function (e) {\n      var t = e;\n      return T.forEach(function (e) {\n        e.onViewerStateChange && (t = e.onViewerStateChange(t));\n      }), t;\n    },\n    Toolbar: function (e) {\n      var t = p.EnterFullScreen,\n          r = p.EnterFullScreenMenuItem,\n          n = v.Download,\n          o = v.DownloadMenuItem,\n          l = P.Open,\n          a = P.OpenMenuItem,\n          i = g.CurrentPageInput,\n          c = g.CurrentPageLabel,\n          m = g.GoToFirstPage,\n          u = g.GoToFirstPageMenuItem,\n          s = g.GoToLastPage,\n          d = g.GoToLastPageMenuItem,\n          T = g.GoToNextPage,\n          k = g.GoToNextPageMenuItem,\n          C = g.GoToPreviousPage,\n          O = g.GoToPreviousPageMenuItem,\n          x = M.Print,\n          G = M.PrintMenuItem,\n          F = h.ShowProperties,\n          L = h.ShowPropertiesMenuItem,\n          D = S.Rotate,\n          q = S.RotateBackwardMenuItem,\n          R = S.RotateForwardMenuItem,\n          Z = I.SwitchScrollMode,\n          z = I.SwitchScrollModeMenuItem,\n          j = b.Search,\n          V = b.ShowSearchPopover,\n          B = w.SwitchSelectionMode,\n          H = w.SwitchSelectionModeMenuItem,\n          A = N.SwitchTheme,\n          W = N.SwitchThemeMenuItem,\n          J = y.CurrentScale,\n          K = y.Zoom,\n          Q = y.ZoomIn,\n          U = y.ZoomInMenuItem,\n          X = y.ZoomOut,\n          Y = y.ZoomOutMenuItem;\n      return _.createElement(f, E({}, e, {\n        slot: {\n          CurrentPageInput: i,\n          CurrentPageLabel: c,\n          CurrentScale: J,\n          Download: n,\n          DownloadMenuItem: o,\n          EnterFullScreen: t,\n          EnterFullScreenMenuItem: r,\n          GoToFirstPage: m,\n          GoToFirstPageMenuItem: u,\n          GoToLastPage: s,\n          GoToLastPageMenuItem: d,\n          GoToNextPage: T,\n          GoToNextPageMenuItem: k,\n          GoToPreviousPage: C,\n          GoToPreviousPageMenuItem: O,\n          NumberOfPages: function () {\n            return _.createElement(c, null, function (e) {\n              return _.createElement(_.Fragment, null, e.numberOfPages);\n            });\n          },\n          Open: l,\n          OpenMenuItem: a,\n          Print: x,\n          PrintMenuItem: G,\n          Rotate: D,\n          RotateBackwardMenuItem: q,\n          RotateForwardMenuItem: R,\n          Search: j,\n          ShowProperties: F,\n          ShowPropertiesMenuItem: L,\n          ShowSearchPopover: V,\n          SwitchScrollMode: Z,\n          SwitchScrollModeMenuItem: z,\n          SwitchSelectionMode: B,\n          SwitchSelectionModeMenuItem: H,\n          SwitchTheme: A,\n          SwitchThemeMenuItem: W,\n          Zoom: K,\n          ZoomIn: Q,\n          ZoomInMenuItem: U,\n          ZoomOut: X,\n          ZoomOutMenuItem: Y\n        }\n      }));\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7863\n')},7990:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/**\n * A React component to view a PDF document\n *\n * @see https://react-pdf-viewer.dev\n * @license https://react-pdf-viewer.dev/license\n * @copyright 2019-2021 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n\n\nif (true) {\n  module.exports = __webpack_require__(7863);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYW5tYXJjaGl2ZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtcGRmLXZpZXdlci90b29sYmFyL2xpYi9pbmRleC5qcz9kMGM3Il0sIm5hbWVzIjpbInByb2Nlc3MiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRWE7O0FBRWIsSUFBSUEsSUFBSixFQUEyQztBQUN2Q0MsNENBQUE7QUFDSCxDQUZELE1BRU8iLCJmaWxlIjoiNzk5MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBSZWFjdCBjb21wb25lbnQgdG8gdmlldyBhIFBERiBkb2N1bWVudFxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdC1wZGYtdmlld2VyLmRldlxuICogQGxpY2Vuc2UgaHR0cHM6Ly9yZWFjdC1wZGYtdmlld2VyLmRldi9saWNlbnNlXG4gKiBAY29weXJpZ2h0IDIwMTktMjAyMSBOZ3V5ZW4gSHV1IFBodW9jIDxtZUBwaHVvYy5uZz5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy90b29sYmFyLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3Rvb2xiYXIuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7990\n")},4248:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: !0\n}));\n\nvar e = __webpack_require__(5466),\n    t = __webpack_require__(2672);\n\nfunction n(e) {\n  if (e && e.__esModule) return e;\n  var t = Object.create(null);\n  return e && Object.keys(e).forEach(function (n) {\n    if ("default" !== n) {\n      var o = Object.getOwnPropertyDescriptor(e, n);\n      Object.defineProperty(t, n, o.get ? o : {\n        enumerable: !0,\n        get: function () {\n          return e[n];\n        }\n      });\n    }\n  }), t.default = e, Object.freeze(t);\n}\n\nvar o = n(e),\n    r = function () {\n  return (r = Object.assign || function (e) {\n    for (var t, n = 1, o = arguments.length; n < o; n++) for (var r in t = arguments[n]) Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);\n\n    return e;\n  }).apply(this, arguments);\n},\n    c = function (e) {\n  var t = o.useState(e.get("scale") || 0),\n      n = t[0],\n      r = t[1],\n      c = function (e) {\n    r(e);\n  };\n\n  return o.useEffect(function () {\n    return e.subscribe("scale", c), function () {\n      e.unsubscribe("scale", c);\n    };\n  }, []), {\n    scale: n\n  };\n},\n    a = function (e) {\n  var t = e.children,\n      n = e.store;\n  return (t || function (e) {\n    return o.createElement(o.Fragment, null, Math.round(100 * e.scale) + "%");\n  })({\n    scale: c(n).scale\n  });\n},\n    u = [.1, .2, .3, .4, .5, .6, .7, .8, .9, 1, 1.1, 1.3, 1.5, 1.7, 1.9, 2.1, 2.4, 2.7, 3, 3.3, 3.7, 4.1, 4.6, 5.1, 5.7, 6.3, 7, 7.7, 8.5, 9.4, 10],\n    i = function (e) {\n  return u.find(function (t) {\n    return t > e;\n  }) || e;\n},\n    l = function (e) {\n  var t = u.findIndex(function (t) {\n    return t >= e;\n  });\n  return -1 === t || 0 === t ? e : u[t - 1];\n},\n    m = function (e) {\n  var n = e.containerRef,\n      r = e.store,\n      c = function (e) {\n    if (!e.shiftKey && !e.altKey && (t.isMac() ? e.metaKey : e.ctrlKey)) {\n      var o = n.current;\n\n      if (o && document.activeElement && o.contains(document.activeElement)) {\n        var c = r.get("zoom");\n\n        if (c) {\n          var a = r.get("scale") || 1,\n              u = 1;\n\n          switch (e.key) {\n            case "-":\n              u = l(a);\n              break;\n\n            case "=":\n              u = i(a);\n              break;\n\n            case "0":\n              u = 1;\n              break;\n\n            default:\n              u = a;\n          }\n\n          u !== a && (e.preventDefault(), c(u));\n        }\n      }\n    }\n  };\n\n  return o.useEffect(function () {\n    if (n.current) return document.addEventListener("keydown", c), function () {\n      document.removeEventListener("keydown", c);\n    };\n  }, [n.current]), o.createElement(o.Fragment, null);\n},\n    s = [.5, .75, 1, 1.25, 1.5, 2, 3, 4],\n    f = {\n  left: 0,\n  top: 8\n},\n    p = function (e) {\n  var n = e.scale,\n      r = e.onZoom,\n      c = o.useContext(t.LocalizationContext).l10n,\n      a = o.useContext(t.ThemeContext).direction === t.TextDirection.RightToLeft,\n      u = c && c.zoom ? c.zoom.zoomDocument : "Zoom document";\n  return o.createElement(t.Popover, {\n    ariaControlsSuffix: "zoom",\n    ariaHasPopup: "menu",\n    position: t.Position.BottomCenter,\n    target: function (e) {\n      return o.createElement(t.MinimalButton, {\n        ariaLabel: u,\n        onClick: function () {\n          e();\n        }\n      }, o.createElement("span", {\n        className: "rpv-zoom__popover-target"\n      }, o.createElement("span", {\n        "data-testid": "zoom__popover-target-scale",\n        className: t.classNames({\n          "rpv-zoom__popover-target-scale": !0,\n          "rpv-zoom__popover-target-scale--ltr": !a,\n          "rpv-zoom__popover-target-scale--rtl": a\n        })\n      }, Math.round(100 * n), "%"), o.createElement("span", {\n        className: "rpv-zoom__popover-target-arrow"\n      })));\n    },\n    content: function (e) {\n      return o.createElement(t.Menu, null, Object.keys(t.SpecialZoomLevel).map(function (n) {\n        var a = n;\n        return o.createElement(t.MenuItem, {\n          key: a,\n          onClick: function () {\n            e(), r(a);\n          }\n        }, function (e) {\n          switch (e) {\n            case t.SpecialZoomLevel.ActualSize:\n              return c && c.zoom ? c.zoom.actualSize : "Actual size";\n\n            case t.SpecialZoomLevel.PageFit:\n              return c && c.zoom ? c.zoom.pageFit : "Page fit";\n\n            case t.SpecialZoomLevel.PageWidth:\n              return c && c.zoom ? c.zoom.pageWidth : "Page width";\n          }\n        }(a));\n      }), o.createElement(t.MenuDivider, null), s.map(function (n) {\n        return o.createElement(t.MenuItem, {\n          key: n,\n          onClick: function () {\n            e(), r(n);\n          }\n        }, Math.round(100 * n) + "%");\n      }));\n    },\n    offset: f,\n    closeOnClickOutside: !0,\n    closeOnEscape: !0\n  });\n},\n    v = function (e) {\n  var t = e.children,\n      n = e.store;\n  return (t || function (e) {\n    return o.createElement(p, {\n      scale: e.scale,\n      onZoom: e.onZoom\n    });\n  })({\n    scale: c(n).scale,\n    onZoom: function (e) {\n      var t = n.get("zoom");\n      t && t(e);\n    }\n  });\n},\n    z = function () {\n  return o.createElement(t.Icon, {\n    ignoreDirection: !0,\n    size: 16\n  }, o.createElement("path", {\n    d: "M10.5,0.499c5.523,0,10,4.477,10,10s-4.477,10-10,10s-10-4.477-10-10S4.977,0.499,10.5,0.499z\\n            M23.5,23.499\\n            l-5.929-5.929\\n            M5.5,10.499h10\\n            M10.5,5.499v10"\n  }));\n},\n    E = {\n  left: 0,\n  top: 8\n},\n    d = function (e) {\n  var n = e.enableShortcuts,\n      r = e.onClick,\n      c = o.useContext(t.LocalizationContext).l10n,\n      a = c && c.zoom ? c.zoom.zoomIn : "Zoom in",\n      u = n ? t.isMac() ? "Meta+=" : "Ctrl+=" : "";\n  return o.createElement(t.Tooltip, {\n    ariaControlsSuffix: "zoom-in",\n    position: t.Position.BottomCenter,\n    target: o.createElement(t.MinimalButton, {\n      ariaKeyShortcuts: u,\n      ariaLabel: a,\n      onClick: r\n    }, o.createElement(z, null)),\n    content: function () {\n      return a;\n    },\n    offset: E\n  });\n},\n    C = function (e) {\n  var t = e.children,\n      n = e.enableShortcuts,\n      o = e.store,\n      r = c(o).scale;\n  return (t || d)({\n    enableShortcuts: n,\n    onClick: function () {\n      var e = o.get("zoom");\n      e && e(i(r));\n    }\n  });\n},\n    h = function () {\n  return o.createElement(t.Icon, {\n    ignoreDirection: !0,\n    size: 16\n  }, o.createElement("path", {\n    d: "M10.5,0.499c5.523,0,10,4.477,10,10s-4.477,10-10,10s-10-4.477-10-10S4.977,0.499,10.5,0.499z\\n            M23.5,23.499\\n            l-5.929-5.929\\n            M5.5,10.499h10"\n  }));\n},\n    g = {\n  left: 0,\n  top: 8\n},\n    b = function (e) {\n  var n = e.enableShortcuts,\n      r = e.onClick,\n      c = o.useContext(t.LocalizationContext).l10n,\n      a = c && c.zoom ? c.zoom.zoomOut : "Zoom out",\n      u = n ? t.isMac() ? "Meta+-" : "Ctrl+-" : "";\n  return o.createElement(t.Tooltip, {\n    ariaControlsSuffix: "zoom-out",\n    position: t.Position.BottomCenter,\n    target: o.createElement(t.MinimalButton, {\n      ariaKeyShortcuts: u,\n      ariaLabel: a,\n      onClick: r\n    }, o.createElement(h, null)),\n    content: function () {\n      return a;\n    },\n    offset: g\n  });\n},\n    k = function (e) {\n  var t = e.children,\n      n = e.enableShortcuts,\n      o = e.store,\n      r = c(o).scale;\n  return (t || b)({\n    enableShortcuts: n,\n    onClick: function () {\n      var e = o.get("zoom");\n      e && e(l(r));\n    }\n  });\n},\n    M = function (e) {\n  var n = e.onClick,\n      r = o.useContext(t.LocalizationContext).l10n,\n      c = r && r.zoom ? r.zoom.zoomIn : "Zoom in";\n  return o.createElement(t.MenuItem, {\n    icon: o.createElement(z, null),\n    onClick: n\n  }, c);\n},\n    S = function (e) {\n  var n = e.onClick,\n      r = o.useContext(t.LocalizationContext).l10n,\n      c = r && r.zoom ? r.zoom.zoomOut : "Zoom out";\n  return o.createElement(t.MenuItem, {\n    icon: o.createElement(h, null),\n    onClick: n\n  }, c);\n};\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n\n\nexports.ZoomInIcon = z, exports.ZoomOutIcon = h, exports.zoomPlugin = function (e) {\n  var n = o.useMemo(function () {\n    return Object.assign({}, {\n      enableShortcuts: !0\n    }, e);\n  }, []),\n      c = o.useMemo(function () {\n    return t.createStore({});\n  }, []),\n      u = function (e) {\n    return o.createElement(C, r({\n      enableShortcuts: n.enableShortcuts\n    }, e, {\n      store: c\n    }));\n  },\n      i = function (e) {\n    return o.createElement(k, r({\n      enableShortcuts: n.enableShortcuts\n    }, e, {\n      store: c\n    }));\n  },\n      l = function (e) {\n    return o.createElement(v, r({}, e, {\n      store: c\n    }));\n  };\n\n  return {\n    renderViewer: function (e) {\n      var t = e.slot;\n      if (!n.enableShortcuts) return t;\n      var a = {\n        children: o.createElement(o.Fragment, null, o.createElement(m, {\n          containerRef: e.containerRef,\n          store: c\n        }), t.children)\n      };\n      return r(r({}, t), a);\n    },\n    install: function (e) {\n      c.update("zoom", e.zoom);\n    },\n    onViewerStateChange: function (e) {\n      return c.update("scale", e.scale), e;\n    },\n    zoomTo: function (e) {\n      var t = c.get("zoom");\n      t && t(e);\n    },\n    CurrentScale: function (e) {\n      return o.createElement(a, r({}, e, {\n        store: c\n      }));\n    },\n    ZoomIn: u,\n    ZoomInButton: function () {\n      return o.createElement(u, null, function (e) {\n        return o.createElement(d, r({}, e));\n      });\n    },\n    ZoomInMenuItem: function (e) {\n      return o.createElement(u, null, function (t) {\n        return o.createElement(M, {\n          onClick: function () {\n            t.onClick(), e.onClick();\n          }\n        });\n      });\n    },\n    ZoomOut: i,\n    ZoomOutButton: function () {\n      return o.createElement(i, null, function (e) {\n        return o.createElement(b, r({}, e));\n      });\n    },\n    ZoomOutMenuItem: function (e) {\n      return o.createElement(i, null, function (t) {\n        return o.createElement(S, {\n          onClick: function () {\n            t.onClick(), e.onClick();\n          }\n        });\n      });\n    },\n    Zoom: l,\n    ZoomPopover: function () {\n      return o.createElement(l, null, function (e) {\n        return o.createElement(p, r({}, e));\n      });\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYW5tYXJjaGl2ZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtcGRmLXZpZXdlci96b29tL2xpYi9janMvem9vbS5taW4uanM/ZGVmMiJdLCJuYW1lcyI6WyJPYmplY3QiLCJ2YWx1ZSIsImUiLCJyZXF1aXJlIiwidCIsIm4iLCJfX2VzTW9kdWxlIiwiY3JlYXRlIiwia2V5cyIsImZvckVhY2giLCJvIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJlbnVtZXJhYmxlIiwiZGVmYXVsdCIsImZyZWV6ZSIsInIiLCJhc3NpZ24iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsImMiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInN1YnNjcmliZSIsInVuc3Vic2NyaWJlIiwic2NhbGUiLCJhIiwiY2hpbGRyZW4iLCJzdG9yZSIsImNyZWF0ZUVsZW1lbnQiLCJGcmFnbWVudCIsIk1hdGgiLCJyb3VuZCIsInUiLCJpIiwiZmluZCIsImwiLCJmaW5kSW5kZXgiLCJtIiwiY29udGFpbmVyUmVmIiwic2hpZnRLZXkiLCJhbHRLZXkiLCJpc01hYyIsIm1ldGFLZXkiLCJjdHJsS2V5IiwiY3VycmVudCIsImRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsImNvbnRhaW5zIiwia2V5IiwicHJldmVudERlZmF1bHQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInMiLCJmIiwibGVmdCIsInRvcCIsInAiLCJvblpvb20iLCJ1c2VDb250ZXh0IiwiTG9jYWxpemF0aW9uQ29udGV4dCIsImwxMG4iLCJUaGVtZUNvbnRleHQiLCJkaXJlY3Rpb24iLCJUZXh0RGlyZWN0aW9uIiwiUmlnaHRUb0xlZnQiLCJ6b29tIiwiem9vbURvY3VtZW50IiwiUG9wb3ZlciIsImFyaWFDb250cm9sc1N1ZmZpeCIsImFyaWFIYXNQb3B1cCIsInBvc2l0aW9uIiwiUG9zaXRpb24iLCJCb3R0b21DZW50ZXIiLCJ0YXJnZXQiLCJNaW5pbWFsQnV0dG9uIiwiYXJpYUxhYmVsIiwib25DbGljayIsImNsYXNzTmFtZSIsImNsYXNzTmFtZXMiLCJjb250ZW50IiwiTWVudSIsIlNwZWNpYWxab29tTGV2ZWwiLCJtYXAiLCJNZW51SXRlbSIsIkFjdHVhbFNpemUiLCJhY3R1YWxTaXplIiwiUGFnZUZpdCIsInBhZ2VGaXQiLCJQYWdlV2lkdGgiLCJwYWdlV2lkdGgiLCJNZW51RGl2aWRlciIsIm9mZnNldCIsImNsb3NlT25DbGlja091dHNpZGUiLCJjbG9zZU9uRXNjYXBlIiwidiIsInoiLCJJY29uIiwiaWdub3JlRGlyZWN0aW9uIiwic2l6ZSIsImQiLCJFIiwiZW5hYmxlU2hvcnRjdXRzIiwiem9vbUluIiwiVG9vbHRpcCIsImFyaWFLZXlTaG9ydGN1dHMiLCJDIiwiaCIsImciLCJiIiwiem9vbU91dCIsImsiLCJNIiwiaWNvbiIsIlMiLCJleHBvcnRzIiwidXNlTWVtbyIsImNyZWF0ZVN0b3JlIiwicmVuZGVyVmlld2VyIiwic2xvdCIsImluc3RhbGwiLCJ1cGRhdGUiLCJvblZpZXdlclN0YXRlQ2hhbmdlIiwiem9vbVRvIiwiQ3VycmVudFNjYWxlIiwiWm9vbUluIiwiWm9vbUluQnV0dG9uIiwiWm9vbUluTWVudUl0ZW0iLCJab29tT3V0IiwiWm9vbU91dEJ1dHRvbiIsIlpvb21PdXRNZW51SXRlbSIsIlpvb20iLCJab29tUG9wb3ZlciJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBQUFBLDhDQUEyQztBQUFDQyxPQUFLLEVBQUMsQ0FBQztBQUFSLENBQTNDOztBQUF1RCxJQUFJQyxDQUFDLEdBQUNDLG1CQUFPLENBQUMsSUFBRCxDQUFiO0FBQUEsSUFBdUJDLENBQUMsR0FBQ0QsbUJBQU8sQ0FBQyxJQUFELENBQWhDOztBQUEyRCxTQUFTRSxDQUFULENBQVdILENBQVgsRUFBYTtBQUFDLE1BQUdBLENBQUMsSUFBRUEsQ0FBQyxDQUFDSSxVQUFSLEVBQW1CLE9BQU9KLENBQVA7QUFBUyxNQUFJRSxDQUFDLEdBQUNKLE1BQU0sQ0FBQ08sTUFBUCxDQUFjLElBQWQsQ0FBTjtBQUEwQixTQUFPTCxDQUFDLElBQUVGLE1BQU0sQ0FBQ1EsSUFBUCxDQUFZTixDQUFaLEVBQWVPLE9BQWYsQ0FBd0IsVUFBU0osQ0FBVCxFQUFXO0FBQUMsUUFBRyxjQUFZQSxDQUFmLEVBQWlCO0FBQUMsVUFBSUssQ0FBQyxHQUFDVixNQUFNLENBQUNXLHdCQUFQLENBQWdDVCxDQUFoQyxFQUFrQ0csQ0FBbEMsQ0FBTjtBQUEyQ0wsWUFBTSxDQUFDWSxjQUFQLENBQXNCUixDQUF0QixFQUF3QkMsQ0FBeEIsRUFBMEJLLENBQUMsQ0FBQ0csR0FBRixHQUFNSCxDQUFOLEdBQVE7QUFBQ0ksa0JBQVUsRUFBQyxDQUFDLENBQWI7QUFBZUQsV0FBRyxFQUFDLFlBQVU7QUFBQyxpQkFBT1gsQ0FBQyxDQUFDRyxDQUFELENBQVI7QUFBWTtBQUExQyxPQUFsQztBQUErRTtBQUFDLEdBQWpMLENBQUgsRUFBdUxELENBQUMsQ0FBQ1csT0FBRixHQUFVYixDQUFqTSxFQUFtTUYsTUFBTSxDQUFDZ0IsTUFBUCxDQUFjWixDQUFkLENBQTFNO0FBQTJOOztBQUFBLElBQUlNLENBQUMsR0FBQ0wsQ0FBQyxDQUFDSCxDQUFELENBQVA7QUFBQSxJQUFXZSxDQUFDLEdBQUMsWUFBVTtBQUFDLFNBQU0sQ0FBQ0EsQ0FBQyxHQUFDakIsTUFBTSxDQUFDa0IsTUFBUCxJQUFlLFVBQVNoQixDQUFULEVBQVc7QUFBQyxTQUFJLElBQUlFLENBQUosRUFBTUMsQ0FBQyxHQUFDLENBQVIsRUFBVUssQ0FBQyxHQUFDUyxTQUFTLENBQUNDLE1BQTFCLEVBQWlDZixDQUFDLEdBQUNLLENBQW5DLEVBQXFDTCxDQUFDLEVBQXRDLEVBQXlDLEtBQUksSUFBSVksQ0FBUixJQUFhYixDQUFDLEdBQUNlLFNBQVMsQ0FBQ2QsQ0FBRCxDQUF4QixFQUE0QkwsTUFBTSxDQUFDcUIsU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFDbkIsQ0FBckMsRUFBdUNhLENBQXZDLE1BQTRDZixDQUFDLENBQUNlLENBQUQsQ0FBRCxHQUFLYixDQUFDLENBQUNhLENBQUQsQ0FBbEQ7O0FBQXVELFdBQU9mLENBQVA7QUFBUyxHQUFuSyxFQUFxS3NCLEtBQXJLLENBQTJLLElBQTNLLEVBQWdMTCxTQUFoTCxDQUFOO0FBQWlNLENBQXpOO0FBQUEsSUFBME5NLENBQUMsR0FBQyxVQUFTdkIsQ0FBVCxFQUFXO0FBQUMsTUFBSUUsQ0FBQyxHQUFDTSxDQUFDLENBQUNnQixRQUFGLENBQVd4QixDQUFDLENBQUNXLEdBQUYsQ0FBTSxPQUFOLEtBQWdCLENBQTNCLENBQU47QUFBQSxNQUFvQ1IsQ0FBQyxHQUFDRCxDQUFDLENBQUMsQ0FBRCxDQUF2QztBQUFBLE1BQTJDYSxDQUFDLEdBQUNiLENBQUMsQ0FBQyxDQUFELENBQTlDO0FBQUEsTUFBa0RxQixDQUFDLEdBQUMsVUFBU3ZCLENBQVQsRUFBVztBQUFDZSxLQUFDLENBQUNmLENBQUQsQ0FBRDtBQUFLLEdBQXJFOztBQUFzRSxTQUFPUSxDQUFDLENBQUNpQixTQUFGLENBQWEsWUFBVTtBQUFDLFdBQU96QixDQUFDLENBQUMwQixTQUFGLENBQVksT0FBWixFQUFvQkgsQ0FBcEIsR0FBdUIsWUFBVTtBQUFDdkIsT0FBQyxDQUFDMkIsV0FBRixDQUFjLE9BQWQsRUFBc0JKLENBQXRCO0FBQXlCLEtBQWxFO0FBQW1FLEdBQTNGLEVBQTZGLEVBQTdGLEdBQWlHO0FBQUNLLFNBQUssRUFBQ3pCO0FBQVAsR0FBeEc7QUFBa0gsQ0FBaGE7QUFBQSxJQUFpYTBCLENBQUMsR0FBQyxVQUFTN0IsQ0FBVCxFQUFXO0FBQUMsTUFBSUUsQ0FBQyxHQUFDRixDQUFDLENBQUM4QixRQUFSO0FBQUEsTUFBaUIzQixDQUFDLEdBQUNILENBQUMsQ0FBQytCLEtBQXJCO0FBQTJCLFNBQU0sQ0FBQzdCLENBQUMsSUFBRSxVQUFTRixDQUFULEVBQVc7QUFBQyxXQUFPUSxDQUFDLENBQUN3QixhQUFGLENBQWdCeEIsQ0FBQyxDQUFDeUIsUUFBbEIsRUFBMkIsSUFBM0IsRUFBZ0NDLElBQUksQ0FBQ0MsS0FBTCxDQUFXLE1BQUluQyxDQUFDLENBQUM0QixLQUFqQixJQUF3QixHQUF4RCxDQUFQO0FBQW9FLEdBQXBGLEVBQXNGO0FBQUNBLFNBQUssRUFBQ0wsQ0FBQyxDQUFDcEIsQ0FBRCxDQUFELENBQUt5QjtBQUFaLEdBQXRGLENBQU47QUFBZ0gsQ0FBMWpCO0FBQUEsSUFBMmpCUSxDQUFDLEdBQUMsQ0FBQyxFQUFELEVBQUksRUFBSixFQUFPLEVBQVAsRUFBVSxFQUFWLEVBQWEsRUFBYixFQUFnQixFQUFoQixFQUFtQixFQUFuQixFQUFzQixFQUF0QixFQUF5QixFQUF6QixFQUE0QixDQUE1QixFQUE4QixHQUE5QixFQUFrQyxHQUFsQyxFQUFzQyxHQUF0QyxFQUEwQyxHQUExQyxFQUE4QyxHQUE5QyxFQUFrRCxHQUFsRCxFQUFzRCxHQUF0RCxFQUEwRCxHQUExRCxFQUE4RCxDQUE5RCxFQUFnRSxHQUFoRSxFQUFvRSxHQUFwRSxFQUF3RSxHQUF4RSxFQUE0RSxHQUE1RSxFQUFnRixHQUFoRixFQUFvRixHQUFwRixFQUF3RixHQUF4RixFQUE0RixDQUE1RixFQUE4RixHQUE5RixFQUFrRyxHQUFsRyxFQUFzRyxHQUF0RyxFQUEwRyxFQUExRyxDQUE3akI7QUFBQSxJQUEycUJDLENBQUMsR0FBQyxVQUFTckMsQ0FBVCxFQUFXO0FBQUMsU0FBT29DLENBQUMsQ0FBQ0UsSUFBRixDQUFRLFVBQVNwQyxDQUFULEVBQVc7QUFBQyxXQUFPQSxDQUFDLEdBQUNGLENBQVQ7QUFBVyxHQUEvQixLQUFtQ0EsQ0FBMUM7QUFBNEMsQ0FBcnVCO0FBQUEsSUFBc3VCdUMsQ0FBQyxHQUFDLFVBQVN2QyxDQUFULEVBQVc7QUFBQyxNQUFJRSxDQUFDLEdBQUNrQyxDQUFDLENBQUNJLFNBQUYsQ0FBYSxVQUFTdEMsQ0FBVCxFQUFXO0FBQUMsV0FBT0EsQ0FBQyxJQUFFRixDQUFWO0FBQVksR0FBckMsQ0FBTjtBQUE4QyxTQUFNLENBQUMsQ0FBRCxLQUFLRSxDQUFMLElBQVEsTUFBSUEsQ0FBWixHQUFjRixDQUFkLEdBQWdCb0MsQ0FBQyxDQUFDbEMsQ0FBQyxHQUFDLENBQUgsQ0FBdkI7QUFBNkIsQ0FBL3pCO0FBQUEsSUFBZzBCdUMsQ0FBQyxHQUFDLFVBQVN6QyxDQUFULEVBQVc7QUFBQyxNQUFJRyxDQUFDLEdBQUNILENBQUMsQ0FBQzBDLFlBQVI7QUFBQSxNQUFxQjNCLENBQUMsR0FBQ2YsQ0FBQyxDQUFDK0IsS0FBekI7QUFBQSxNQUErQlIsQ0FBQyxHQUFDLFVBQVN2QixDQUFULEVBQVc7QUFBQyxRQUFHLENBQUNBLENBQUMsQ0FBQzJDLFFBQUgsSUFBYSxDQUFDM0MsQ0FBQyxDQUFDNEMsTUFBaEIsS0FBeUIxQyxDQUFDLENBQUMyQyxLQUFGLEtBQVU3QyxDQUFDLENBQUM4QyxPQUFaLEdBQW9COUMsQ0FBQyxDQUFDK0MsT0FBL0MsQ0FBSCxFQUEyRDtBQUFDLFVBQUl2QyxDQUFDLEdBQUNMLENBQUMsQ0FBQzZDLE9BQVI7O0FBQWdCLFVBQUd4QyxDQUFDLElBQUV5QyxRQUFRLENBQUNDLGFBQVosSUFBMkIxQyxDQUFDLENBQUMyQyxRQUFGLENBQVdGLFFBQVEsQ0FBQ0MsYUFBcEIsQ0FBOUIsRUFBaUU7QUFBQyxZQUFJM0IsQ0FBQyxHQUFDUixDQUFDLENBQUNKLEdBQUYsQ0FBTSxNQUFOLENBQU47O0FBQW9CLFlBQUdZLENBQUgsRUFBSztBQUFDLGNBQUlNLENBQUMsR0FBQ2QsQ0FBQyxDQUFDSixHQUFGLENBQU0sT0FBTixLQUFnQixDQUF0QjtBQUFBLGNBQXdCeUIsQ0FBQyxHQUFDLENBQTFCOztBQUE0QixrQkFBT3BDLENBQUMsQ0FBQ29ELEdBQVQ7QUFBYyxpQkFBSSxHQUFKO0FBQVFoQixlQUFDLEdBQUNHLENBQUMsQ0FBQ1YsQ0FBRCxDQUFIO0FBQU87O0FBQU0saUJBQUksR0FBSjtBQUFRTyxlQUFDLEdBQUNDLENBQUMsQ0FBQ1IsQ0FBRCxDQUFIO0FBQU87O0FBQU0saUJBQUksR0FBSjtBQUFRTyxlQUFDLEdBQUMsQ0FBRjtBQUFJOztBQUFNO0FBQVFBLGVBQUMsR0FBQ1AsQ0FBRjtBQUFsRjs7QUFBc0ZPLFdBQUMsS0FBR1AsQ0FBSixLQUFRN0IsQ0FBQyxDQUFDcUQsY0FBRixJQUFtQjlCLENBQUMsQ0FBQ2EsQ0FBRCxDQUE1QjtBQUFpQztBQUFDO0FBQUM7QUFBQyxHQUEzVzs7QUFBNFcsU0FBTzVCLENBQUMsQ0FBQ2lCLFNBQUYsQ0FBYSxZQUFVO0FBQUMsUUFBR3RCLENBQUMsQ0FBQzZDLE9BQUwsRUFBYSxPQUFPQyxRQUFRLENBQUNLLGdCQUFULENBQTBCLFNBQTFCLEVBQW9DL0IsQ0FBcEMsR0FBdUMsWUFBVTtBQUFDMEIsY0FBUSxDQUFDTSxtQkFBVCxDQUE2QixTQUE3QixFQUF1Q2hDLENBQXZDO0FBQTBDLEtBQW5HO0FBQW9HLEdBQXpJLEVBQTJJLENBQUNwQixDQUFDLENBQUM2QyxPQUFILENBQTNJLEdBQXdKeEMsQ0FBQyxDQUFDd0IsYUFBRixDQUFnQnhCLENBQUMsQ0FBQ3lCLFFBQWxCLEVBQTJCLElBQTNCLENBQS9KO0FBQWdNLENBQTEzQztBQUFBLElBQTIzQ3VCLENBQUMsR0FBQyxDQUFDLEVBQUQsRUFBSSxHQUFKLEVBQVEsQ0FBUixFQUFVLElBQVYsRUFBZSxHQUFmLEVBQW1CLENBQW5CLEVBQXFCLENBQXJCLEVBQXVCLENBQXZCLENBQTczQztBQUFBLElBQXU1Q0MsQ0FBQyxHQUFDO0FBQUNDLE1BQUksRUFBQyxDQUFOO0FBQVFDLEtBQUcsRUFBQztBQUFaLENBQXo1QztBQUFBLElBQXc2Q0MsQ0FBQyxHQUFDLFVBQVM1RCxDQUFULEVBQVc7QUFBQyxNQUFJRyxDQUFDLEdBQUNILENBQUMsQ0FBQzRCLEtBQVI7QUFBQSxNQUFjYixDQUFDLEdBQUNmLENBQUMsQ0FBQzZELE1BQWxCO0FBQUEsTUFBeUJ0QyxDQUFDLEdBQUNmLENBQUMsQ0FBQ3NELFVBQUYsQ0FBYTVELENBQUMsQ0FBQzZELG1CQUFmLEVBQW9DQyxJQUEvRDtBQUFBLE1BQW9FbkMsQ0FBQyxHQUFDckIsQ0FBQyxDQUFDc0QsVUFBRixDQUFhNUQsQ0FBQyxDQUFDK0QsWUFBZixFQUE2QkMsU0FBN0IsS0FBeUNoRSxDQUFDLENBQUNpRSxhQUFGLENBQWdCQyxXQUEvSDtBQUFBLE1BQTJJaEMsQ0FBQyxHQUFDYixDQUFDLElBQUVBLENBQUMsQ0FBQzhDLElBQUwsR0FBVTlDLENBQUMsQ0FBQzhDLElBQUYsQ0FBT0MsWUFBakIsR0FBOEIsZUFBM0s7QUFBMkwsU0FBTzlELENBQUMsQ0FBQ3dCLGFBQUYsQ0FBZ0I5QixDQUFDLENBQUNxRSxPQUFsQixFQUEwQjtBQUFDQyxzQkFBa0IsRUFBQyxNQUFwQjtBQUEyQkMsZ0JBQVksRUFBQyxNQUF4QztBQUErQ0MsWUFBUSxFQUFDeEUsQ0FBQyxDQUFDeUUsUUFBRixDQUFXQyxZQUFuRTtBQUFnRkMsVUFBTSxFQUFDLFVBQVM3RSxDQUFULEVBQVc7QUFBQyxhQUFPUSxDQUFDLENBQUN3QixhQUFGLENBQWdCOUIsQ0FBQyxDQUFDNEUsYUFBbEIsRUFBZ0M7QUFBQ0MsaUJBQVMsRUFBQzNDLENBQVg7QUFBYTRDLGVBQU8sRUFBQyxZQUFVO0FBQUNoRixXQUFDO0FBQUc7QUFBcEMsT0FBaEMsRUFBc0VRLENBQUMsQ0FBQ3dCLGFBQUYsQ0FBZ0IsTUFBaEIsRUFBdUI7QUFBQ2lELGlCQUFTLEVBQUM7QUFBWCxPQUF2QixFQUE4RHpFLENBQUMsQ0FBQ3dCLGFBQUYsQ0FBZ0IsTUFBaEIsRUFBdUI7QUFBQyx1QkFBYyw0QkFBZjtBQUE0Q2lELGlCQUFTLEVBQUMvRSxDQUFDLENBQUNnRixVQUFGLENBQWE7QUFBQyw0Q0FBaUMsQ0FBQyxDQUFuQztBQUFxQyxpREFBc0MsQ0FBQ3JELENBQTVFO0FBQThFLGlEQUFzQ0E7QUFBcEgsU0FBYjtBQUF0RCxPQUF2QixFQUFtTkssSUFBSSxDQUFDQyxLQUFMLENBQVcsTUFBSWhDLENBQWYsQ0FBbk4sRUFBcU8sR0FBck8sQ0FBOUQsRUFBd1NLLENBQUMsQ0FBQ3dCLGFBQUYsQ0FBZ0IsTUFBaEIsRUFBdUI7QUFBQ2lELGlCQUFTLEVBQUM7QUFBWCxPQUF2QixDQUF4UyxDQUF0RSxDQUFQO0FBQTRiLEtBQS9oQjtBQUFnaUJFLFdBQU8sRUFBQyxVQUFTbkYsQ0FBVCxFQUFXO0FBQUMsYUFBT1EsQ0FBQyxDQUFDd0IsYUFBRixDQUFnQjlCLENBQUMsQ0FBQ2tGLElBQWxCLEVBQXVCLElBQXZCLEVBQTRCdEYsTUFBTSxDQUFDUSxJQUFQLENBQVlKLENBQUMsQ0FBQ21GLGdCQUFkLEVBQWdDQyxHQUFoQyxDQUFxQyxVQUFTbkYsQ0FBVCxFQUFXO0FBQUMsWUFBSTBCLENBQUMsR0FBQzFCLENBQU47QUFBUSxlQUFPSyxDQUFDLENBQUN3QixhQUFGLENBQWdCOUIsQ0FBQyxDQUFDcUYsUUFBbEIsRUFBMkI7QUFBQ25DLGFBQUcsRUFBQ3ZCLENBQUw7QUFBT21ELGlCQUFPLEVBQUMsWUFBVTtBQUFDaEYsYUFBQyxJQUFHZSxDQUFDLENBQUNjLENBQUQsQ0FBTDtBQUFTO0FBQW5DLFNBQTNCLEVBQWdFLFVBQVM3QixDQUFULEVBQVc7QUFBQyxrQkFBT0EsQ0FBUDtBQUFVLGlCQUFLRSxDQUFDLENBQUNtRixnQkFBRixDQUFtQkcsVUFBeEI7QUFBbUMscUJBQU9qRSxDQUFDLElBQUVBLENBQUMsQ0FBQzhDLElBQUwsR0FBVTlDLENBQUMsQ0FBQzhDLElBQUYsQ0FBT29CLFVBQWpCLEdBQTRCLGFBQW5DOztBQUFpRCxpQkFBS3ZGLENBQUMsQ0FBQ21GLGdCQUFGLENBQW1CSyxPQUF4QjtBQUFnQyxxQkFBT25FLENBQUMsSUFBRUEsQ0FBQyxDQUFDOEMsSUFBTCxHQUFVOUMsQ0FBQyxDQUFDOEMsSUFBRixDQUFPc0IsT0FBakIsR0FBeUIsVUFBaEM7O0FBQTJDLGlCQUFLekYsQ0FBQyxDQUFDbUYsZ0JBQUYsQ0FBbUJPLFNBQXhCO0FBQWtDLHFCQUFPckUsQ0FBQyxJQUFFQSxDQUFDLENBQUM4QyxJQUFMLEdBQVU5QyxDQUFDLENBQUM4QyxJQUFGLENBQU93QixTQUFqQixHQUEyQixZQUFsQztBQUEzTTtBQUEyUCxTQUF2USxDQUF3UWhFLENBQXhRLENBQWhFLENBQVA7QUFBbVYsT0FBNVksQ0FBNUIsRUFBMmFyQixDQUFDLENBQUN3QixhQUFGLENBQWdCOUIsQ0FBQyxDQUFDNEYsV0FBbEIsRUFBOEIsSUFBOUIsQ0FBM2EsRUFBK2N0QyxDQUFDLENBQUM4QixHQUFGLENBQU8sVUFBU25GLENBQVQsRUFBVztBQUFDLGVBQU9LLENBQUMsQ0FBQ3dCLGFBQUYsQ0FBZ0I5QixDQUFDLENBQUNxRixRQUFsQixFQUEyQjtBQUFDbkMsYUFBRyxFQUFDakQsQ0FBTDtBQUFPNkUsaUJBQU8sRUFBQyxZQUFVO0FBQUNoRixhQUFDLElBQUdlLENBQUMsQ0FBQ1osQ0FBRCxDQUFMO0FBQVM7QUFBbkMsU0FBM0IsRUFBZ0UrQixJQUFJLENBQUNDLEtBQUwsQ0FBVyxNQUFJaEMsQ0FBZixJQUFrQixHQUFsRixDQUFQO0FBQThGLE9BQWpILENBQS9jLENBQVA7QUFBMmtCLEtBQS9uQztBQUFnb0M0RixVQUFNLEVBQUN0QyxDQUF2b0M7QUFBeW9DdUMsdUJBQW1CLEVBQUMsQ0FBQyxDQUE5cEM7QUFBZ3FDQyxpQkFBYSxFQUFDLENBQUM7QUFBL3FDLEdBQTFCLENBQVA7QUFBb3RDLENBQXIwRjtBQUFBLElBQXMwRkMsQ0FBQyxHQUFDLFVBQVNsRyxDQUFULEVBQVc7QUFBQyxNQUFJRSxDQUFDLEdBQUNGLENBQUMsQ0FBQzhCLFFBQVI7QUFBQSxNQUFpQjNCLENBQUMsR0FBQ0gsQ0FBQyxDQUFDK0IsS0FBckI7QUFBMkIsU0FBTSxDQUFDN0IsQ0FBQyxJQUFFLFVBQVNGLENBQVQsRUFBVztBQUFDLFdBQU9RLENBQUMsQ0FBQ3dCLGFBQUYsQ0FBZ0I0QixDQUFoQixFQUFrQjtBQUFDaEMsV0FBSyxFQUFDNUIsQ0FBQyxDQUFDNEIsS0FBVDtBQUFlaUMsWUFBTSxFQUFDN0QsQ0FBQyxDQUFDNkQ7QUFBeEIsS0FBbEIsQ0FBUDtBQUEwRCxHQUExRSxFQUE0RTtBQUFDakMsU0FBSyxFQUFDTCxDQUFDLENBQUNwQixDQUFELENBQUQsQ0FBS3lCLEtBQVo7QUFBa0JpQyxVQUFNLEVBQUMsVUFBUzdELENBQVQsRUFBVztBQUFDLFVBQUlFLENBQUMsR0FBQ0MsQ0FBQyxDQUFDUSxHQUFGLENBQU0sTUFBTixDQUFOO0FBQW9CVCxPQUFDLElBQUVBLENBQUMsQ0FBQ0YsQ0FBRCxDQUFKO0FBQVE7QUFBakUsR0FBNUUsQ0FBTjtBQUFzSixDQUFyZ0c7QUFBQSxJQUFzZ0dtRyxDQUFDLEdBQUMsWUFBVTtBQUFDLFNBQU8zRixDQUFDLENBQUN3QixhQUFGLENBQWdCOUIsQ0FBQyxDQUFDa0csSUFBbEIsRUFBdUI7QUFBQ0MsbUJBQWUsRUFBQyxDQUFDLENBQWxCO0FBQW9CQyxRQUFJLEVBQUM7QUFBekIsR0FBdkIsRUFBb0Q5RixDQUFDLENBQUN3QixhQUFGLENBQWdCLE1BQWhCLEVBQXVCO0FBQUN1RSxLQUFDLEVBQUM7QUFBSCxHQUF2QixDQUFwRCxDQUFQO0FBQWtTLENBQXJ6RztBQUFBLElBQXN6R0MsQ0FBQyxHQUFDO0FBQUM5QyxNQUFJLEVBQUMsQ0FBTjtBQUFRQyxLQUFHLEVBQUM7QUFBWixDQUF4ekc7QUFBQSxJQUF1MEc0QyxDQUFDLEdBQUMsVUFBU3ZHLENBQVQsRUFBVztBQUFDLE1BQUlHLENBQUMsR0FBQ0gsQ0FBQyxDQUFDeUcsZUFBUjtBQUFBLE1BQXdCMUYsQ0FBQyxHQUFDZixDQUFDLENBQUNnRixPQUE1QjtBQUFBLE1BQW9DekQsQ0FBQyxHQUFDZixDQUFDLENBQUNzRCxVQUFGLENBQWE1RCxDQUFDLENBQUM2RCxtQkFBZixFQUFvQ0MsSUFBMUU7QUFBQSxNQUErRW5DLENBQUMsR0FBQ04sQ0FBQyxJQUFFQSxDQUFDLENBQUM4QyxJQUFMLEdBQVU5QyxDQUFDLENBQUM4QyxJQUFGLENBQU9xQyxNQUFqQixHQUF3QixTQUF6RztBQUFBLE1BQW1IdEUsQ0FBQyxHQUFDakMsQ0FBQyxHQUFDRCxDQUFDLENBQUMyQyxLQUFGLEtBQVUsUUFBVixHQUFtQixRQUFwQixHQUE2QixFQUFuSjtBQUFzSixTQUFPckMsQ0FBQyxDQUFDd0IsYUFBRixDQUFnQjlCLENBQUMsQ0FBQ3lHLE9BQWxCLEVBQTBCO0FBQUNuQyxzQkFBa0IsRUFBQyxTQUFwQjtBQUE4QkUsWUFBUSxFQUFDeEUsQ0FBQyxDQUFDeUUsUUFBRixDQUFXQyxZQUFsRDtBQUErREMsVUFBTSxFQUFDckUsQ0FBQyxDQUFDd0IsYUFBRixDQUFnQjlCLENBQUMsQ0FBQzRFLGFBQWxCLEVBQWdDO0FBQUM4QixzQkFBZ0IsRUFBQ3hFLENBQWxCO0FBQW9CMkMsZUFBUyxFQUFDbEQsQ0FBOUI7QUFBZ0NtRCxhQUFPLEVBQUNqRTtBQUF4QyxLQUFoQyxFQUEyRVAsQ0FBQyxDQUFDd0IsYUFBRixDQUFnQm1FLENBQWhCLEVBQWtCLElBQWxCLENBQTNFLENBQXRFO0FBQTBLaEIsV0FBTyxFQUFDLFlBQVU7QUFBQyxhQUFPdEQsQ0FBUDtBQUFTLEtBQXRNO0FBQXVNa0UsVUFBTSxFQUFDUztBQUE5TSxHQUExQixDQUFQO0FBQW1QLENBQTl0SDtBQUFBLElBQSt0SEssQ0FBQyxHQUFDLFVBQVM3RyxDQUFULEVBQVc7QUFBQyxNQUFJRSxDQUFDLEdBQUNGLENBQUMsQ0FBQzhCLFFBQVI7QUFBQSxNQUFpQjNCLENBQUMsR0FBQ0gsQ0FBQyxDQUFDeUcsZUFBckI7QUFBQSxNQUFxQ2pHLENBQUMsR0FBQ1IsQ0FBQyxDQUFDK0IsS0FBekM7QUFBQSxNQUErQ2hCLENBQUMsR0FBQ1EsQ0FBQyxDQUFDZixDQUFELENBQUQsQ0FBS29CLEtBQXREO0FBQTRELFNBQU0sQ0FBQzFCLENBQUMsSUFBRXFHLENBQUosRUFBTztBQUFDRSxtQkFBZSxFQUFDdEcsQ0FBakI7QUFBbUI2RSxXQUFPLEVBQUMsWUFBVTtBQUFDLFVBQUloRixDQUFDLEdBQUNRLENBQUMsQ0FBQ0csR0FBRixDQUFNLE1BQU4sQ0FBTjtBQUFvQlgsT0FBQyxJQUFFQSxDQUFDLENBQUNxQyxDQUFDLENBQUN0QixDQUFELENBQUYsQ0FBSjtBQUFXO0FBQXJFLEdBQVAsQ0FBTjtBQUFxRixDQUE5M0g7QUFBQSxJQUErM0grRixDQUFDLEdBQUMsWUFBVTtBQUFDLFNBQU90RyxDQUFDLENBQUN3QixhQUFGLENBQWdCOUIsQ0FBQyxDQUFDa0csSUFBbEIsRUFBdUI7QUFBQ0MsbUJBQWUsRUFBQyxDQUFDLENBQWxCO0FBQW9CQyxRQUFJLEVBQUM7QUFBekIsR0FBdkIsRUFBb0Q5RixDQUFDLENBQUN3QixhQUFGLENBQWdCLE1BQWhCLEVBQXVCO0FBQUN1RSxLQUFDLEVBQUM7QUFBSCxHQUF2QixDQUFwRCxDQUFQO0FBQXNRLENBQWxwSTtBQUFBLElBQW1wSVEsQ0FBQyxHQUFDO0FBQUNyRCxNQUFJLEVBQUMsQ0FBTjtBQUFRQyxLQUFHLEVBQUM7QUFBWixDQUFycEk7QUFBQSxJQUFvcUlxRCxDQUFDLEdBQUMsVUFBU2hILENBQVQsRUFBVztBQUFDLE1BQUlHLENBQUMsR0FBQ0gsQ0FBQyxDQUFDeUcsZUFBUjtBQUFBLE1BQXdCMUYsQ0FBQyxHQUFDZixDQUFDLENBQUNnRixPQUE1QjtBQUFBLE1BQW9DekQsQ0FBQyxHQUFDZixDQUFDLENBQUNzRCxVQUFGLENBQWE1RCxDQUFDLENBQUM2RCxtQkFBZixFQUFvQ0MsSUFBMUU7QUFBQSxNQUErRW5DLENBQUMsR0FBQ04sQ0FBQyxJQUFFQSxDQUFDLENBQUM4QyxJQUFMLEdBQVU5QyxDQUFDLENBQUM4QyxJQUFGLENBQU80QyxPQUFqQixHQUF5QixVQUExRztBQUFBLE1BQXFIN0UsQ0FBQyxHQUFDakMsQ0FBQyxHQUFDRCxDQUFDLENBQUMyQyxLQUFGLEtBQVUsUUFBVixHQUFtQixRQUFwQixHQUE2QixFQUFySjtBQUF3SixTQUFPckMsQ0FBQyxDQUFDd0IsYUFBRixDQUFnQjlCLENBQUMsQ0FBQ3lHLE9BQWxCLEVBQTBCO0FBQUNuQyxzQkFBa0IsRUFBQyxVQUFwQjtBQUErQkUsWUFBUSxFQUFDeEUsQ0FBQyxDQUFDeUUsUUFBRixDQUFXQyxZQUFuRDtBQUFnRUMsVUFBTSxFQUFDckUsQ0FBQyxDQUFDd0IsYUFBRixDQUFnQjlCLENBQUMsQ0FBQzRFLGFBQWxCLEVBQWdDO0FBQUM4QixzQkFBZ0IsRUFBQ3hFLENBQWxCO0FBQW9CMkMsZUFBUyxFQUFDbEQsQ0FBOUI7QUFBZ0NtRCxhQUFPLEVBQUNqRTtBQUF4QyxLQUFoQyxFQUEyRVAsQ0FBQyxDQUFDd0IsYUFBRixDQUFnQjhFLENBQWhCLEVBQWtCLElBQWxCLENBQTNFLENBQXZFO0FBQTJLM0IsV0FBTyxFQUFDLFlBQVU7QUFBQyxhQUFPdEQsQ0FBUDtBQUFTLEtBQXZNO0FBQXdNa0UsVUFBTSxFQUFDZ0I7QUFBL00sR0FBMUIsQ0FBUDtBQUFvUCxDQUE5ako7QUFBQSxJQUErakpHLENBQUMsR0FBQyxVQUFTbEgsQ0FBVCxFQUFXO0FBQUMsTUFBSUUsQ0FBQyxHQUFDRixDQUFDLENBQUM4QixRQUFSO0FBQUEsTUFBaUIzQixDQUFDLEdBQUNILENBQUMsQ0FBQ3lHLGVBQXJCO0FBQUEsTUFBcUNqRyxDQUFDLEdBQUNSLENBQUMsQ0FBQytCLEtBQXpDO0FBQUEsTUFBK0NoQixDQUFDLEdBQUNRLENBQUMsQ0FBQ2YsQ0FBRCxDQUFELENBQUtvQixLQUF0RDtBQUE0RCxTQUFNLENBQUMxQixDQUFDLElBQUU4RyxDQUFKLEVBQU87QUFBQ1AsbUJBQWUsRUFBQ3RHLENBQWpCO0FBQW1CNkUsV0FBTyxFQUFDLFlBQVU7QUFBQyxVQUFJaEYsQ0FBQyxHQUFDUSxDQUFDLENBQUNHLEdBQUYsQ0FBTSxNQUFOLENBQU47QUFBb0JYLE9BQUMsSUFBRUEsQ0FBQyxDQUFDdUMsQ0FBQyxDQUFDeEIsQ0FBRCxDQUFGLENBQUo7QUFBVztBQUFyRSxHQUFQLENBQU47QUFBcUYsQ0FBOXRKO0FBQUEsSUFBK3RKb0csQ0FBQyxHQUFDLFVBQVNuSCxDQUFULEVBQVc7QUFBQyxNQUFJRyxDQUFDLEdBQUNILENBQUMsQ0FBQ2dGLE9BQVI7QUFBQSxNQUFnQmpFLENBQUMsR0FBQ1AsQ0FBQyxDQUFDc0QsVUFBRixDQUFhNUQsQ0FBQyxDQUFDNkQsbUJBQWYsRUFBb0NDLElBQXREO0FBQUEsTUFBMkR6QyxDQUFDLEdBQUNSLENBQUMsSUFBRUEsQ0FBQyxDQUFDc0QsSUFBTCxHQUFVdEQsQ0FBQyxDQUFDc0QsSUFBRixDQUFPcUMsTUFBakIsR0FBd0IsU0FBckY7QUFBK0YsU0FBT2xHLENBQUMsQ0FBQ3dCLGFBQUYsQ0FBZ0I5QixDQUFDLENBQUNxRixRQUFsQixFQUEyQjtBQUFDNkIsUUFBSSxFQUFDNUcsQ0FBQyxDQUFDd0IsYUFBRixDQUFnQm1FLENBQWhCLEVBQWtCLElBQWxCLENBQU47QUFBOEJuQixXQUFPLEVBQUM3RTtBQUF0QyxHQUEzQixFQUFvRW9CLENBQXBFLENBQVA7QUFBOEUsQ0FBMTVKO0FBQUEsSUFBMjVKOEYsQ0FBQyxHQUFDLFVBQVNySCxDQUFULEVBQVc7QUFBQyxNQUFJRyxDQUFDLEdBQUNILENBQUMsQ0FBQ2dGLE9BQVI7QUFBQSxNQUFnQmpFLENBQUMsR0FBQ1AsQ0FBQyxDQUFDc0QsVUFBRixDQUFhNUQsQ0FBQyxDQUFDNkQsbUJBQWYsRUFBb0NDLElBQXREO0FBQUEsTUFBMkR6QyxDQUFDLEdBQUNSLENBQUMsSUFBRUEsQ0FBQyxDQUFDc0QsSUFBTCxHQUFVdEQsQ0FBQyxDQUFDc0QsSUFBRixDQUFPNEMsT0FBakIsR0FBeUIsVUFBdEY7QUFBaUcsU0FBT3pHLENBQUMsQ0FBQ3dCLGFBQUYsQ0FBZ0I5QixDQUFDLENBQUNxRixRQUFsQixFQUEyQjtBQUFDNkIsUUFBSSxFQUFDNUcsQ0FBQyxDQUFDd0IsYUFBRixDQUFnQjhFLENBQWhCLEVBQWtCLElBQWxCLENBQU47QUFBOEI5QixXQUFPLEVBQUM3RTtBQUF0QyxHQUEzQixFQUFvRW9CLENBQXBFLENBQVA7QUFBOEUsQ0FBeGxLO0FBQzlaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUFnRitGLGtCQUFBLEdBQW1CbkIsQ0FBbkIsRUFBcUJtQixtQkFBQSxHQUFvQlIsQ0FBekMsRUFBMkNRLGtCQUFBLEdBQW1CLFVBQVN0SCxDQUFULEVBQVc7QUFBQyxNQUFJRyxDQUFDLEdBQUNLLENBQUMsQ0FBQytHLE9BQUYsQ0FBVyxZQUFVO0FBQUMsV0FBT3pILE1BQU0sQ0FBQ2tCLE1BQVAsQ0FBYyxFQUFkLEVBQWlCO0FBQUN5RixxQkFBZSxFQUFDLENBQUM7QUFBbEIsS0FBakIsRUFBc0N6RyxDQUF0QyxDQUFQO0FBQWdELEdBQXRFLEVBQXdFLEVBQXhFLENBQU47QUFBQSxNQUFrRnVCLENBQUMsR0FBQ2YsQ0FBQyxDQUFDK0csT0FBRixDQUFXLFlBQVU7QUFBQyxXQUFPckgsQ0FBQyxDQUFDc0gsV0FBRixDQUFjLEVBQWQsQ0FBUDtBQUF5QixHQUEvQyxFQUFpRCxFQUFqRCxDQUFwRjtBQUFBLE1BQXlJcEYsQ0FBQyxHQUFDLFVBQVNwQyxDQUFULEVBQVc7QUFBQyxXQUFPUSxDQUFDLENBQUN3QixhQUFGLENBQWdCNkUsQ0FBaEIsRUFBa0I5RixDQUFDLENBQUM7QUFBQzBGLHFCQUFlLEVBQUN0RyxDQUFDLENBQUNzRztBQUFuQixLQUFELEVBQXFDekcsQ0FBckMsRUFBdUM7QUFBQytCLFdBQUssRUFBQ1I7QUFBUCxLQUF2QyxDQUFuQixDQUFQO0FBQTZFLEdBQXBPO0FBQUEsTUFBcU9jLENBQUMsR0FBQyxVQUFTckMsQ0FBVCxFQUFXO0FBQUMsV0FBT1EsQ0FBQyxDQUFDd0IsYUFBRixDQUFnQmtGLENBQWhCLEVBQWtCbkcsQ0FBQyxDQUFDO0FBQUMwRixxQkFBZSxFQUFDdEcsQ0FBQyxDQUFDc0c7QUFBbkIsS0FBRCxFQUFxQ3pHLENBQXJDLEVBQXVDO0FBQUMrQixXQUFLLEVBQUNSO0FBQVAsS0FBdkMsQ0FBbkIsQ0FBUDtBQUE2RSxHQUFoVTtBQUFBLE1BQWlVZ0IsQ0FBQyxHQUFDLFVBQVN2QyxDQUFULEVBQVc7QUFBQyxXQUFPUSxDQUFDLENBQUN3QixhQUFGLENBQWdCa0UsQ0FBaEIsRUFBa0JuRixDQUFDLENBQUMsRUFBRCxFQUFJZixDQUFKLEVBQU07QUFBQytCLFdBQUssRUFBQ1I7QUFBUCxLQUFOLENBQW5CLENBQVA7QUFBNEMsR0FBM1g7O0FBQTRYLFNBQU07QUFBQ2tHLGdCQUFZLEVBQUMsVUFBU3pILENBQVQsRUFBVztBQUFDLFVBQUlFLENBQUMsR0FBQ0YsQ0FBQyxDQUFDMEgsSUFBUjtBQUFhLFVBQUcsQ0FBQ3ZILENBQUMsQ0FBQ3NHLGVBQU4sRUFBc0IsT0FBT3ZHLENBQVA7QUFBUyxVQUFJMkIsQ0FBQyxHQUFDO0FBQUNDLGdCQUFRLEVBQUN0QixDQUFDLENBQUN3QixhQUFGLENBQWdCeEIsQ0FBQyxDQUFDeUIsUUFBbEIsRUFBMkIsSUFBM0IsRUFBZ0N6QixDQUFDLENBQUN3QixhQUFGLENBQWdCUyxDQUFoQixFQUFrQjtBQUFDQyxzQkFBWSxFQUFDMUMsQ0FBQyxDQUFDMEMsWUFBaEI7QUFBNkJYLGVBQUssRUFBQ1I7QUFBbkMsU0FBbEIsQ0FBaEMsRUFBeUZyQixDQUFDLENBQUM0QixRQUEzRjtBQUFWLE9BQU47QUFBc0gsYUFBT2YsQ0FBQyxDQUFDQSxDQUFDLENBQUMsRUFBRCxFQUFJYixDQUFKLENBQUYsRUFBUzJCLENBQVQsQ0FBUjtBQUFvQixLQUFoTjtBQUFpTjhGLFdBQU8sRUFBQyxVQUFTM0gsQ0FBVCxFQUFXO0FBQUN1QixPQUFDLENBQUNxRyxNQUFGLENBQVMsTUFBVCxFQUFnQjVILENBQUMsQ0FBQ3FFLElBQWxCO0FBQXdCLEtBQTdQO0FBQThQd0QsdUJBQW1CLEVBQUMsVUFBUzdILENBQVQsRUFBVztBQUFDLGFBQU91QixDQUFDLENBQUNxRyxNQUFGLENBQVMsT0FBVCxFQUFpQjVILENBQUMsQ0FBQzRCLEtBQW5CLEdBQTBCNUIsQ0FBakM7QUFBbUMsS0FBalU7QUFBa1U4SCxVQUFNLEVBQUMsVUFBUzlILENBQVQsRUFBVztBQUFDLFVBQUlFLENBQUMsR0FBQ3FCLENBQUMsQ0FBQ1osR0FBRixDQUFNLE1BQU4sQ0FBTjtBQUFvQlQsT0FBQyxJQUFFQSxDQUFDLENBQUNGLENBQUQsQ0FBSjtBQUFRLEtBQWpYO0FBQWtYK0gsZ0JBQVksRUFBQyxVQUFTL0gsQ0FBVCxFQUFXO0FBQUMsYUFBT1EsQ0FBQyxDQUFDd0IsYUFBRixDQUFnQkgsQ0FBaEIsRUFBa0JkLENBQUMsQ0FBQyxFQUFELEVBQUlmLENBQUosRUFBTTtBQUFDK0IsYUFBSyxFQUFDUjtBQUFQLE9BQU4sQ0FBbkIsQ0FBUDtBQUE0QyxLQUF2YjtBQUF3YnlHLFVBQU0sRUFBQzVGLENBQS9iO0FBQWljNkYsZ0JBQVksRUFBQyxZQUFVO0FBQUMsYUFBT3pILENBQUMsQ0FBQ3dCLGFBQUYsQ0FBZ0JJLENBQWhCLEVBQWtCLElBQWxCLEVBQXdCLFVBQVNwQyxDQUFULEVBQVc7QUFBQyxlQUFPUSxDQUFDLENBQUN3QixhQUFGLENBQWdCdUUsQ0FBaEIsRUFBa0J4RixDQUFDLENBQUMsRUFBRCxFQUFJZixDQUFKLENBQW5CLENBQVA7QUFBa0MsT0FBdEUsQ0FBUDtBQUFnRixLQUF6aUI7QUFBMGlCa0ksa0JBQWMsRUFBQyxVQUFTbEksQ0FBVCxFQUFXO0FBQUMsYUFBT1EsQ0FBQyxDQUFDd0IsYUFBRixDQUFnQkksQ0FBaEIsRUFBa0IsSUFBbEIsRUFBd0IsVUFBU2xDLENBQVQsRUFBVztBQUFDLGVBQU9NLENBQUMsQ0FBQ3dCLGFBQUYsQ0FBZ0JtRixDQUFoQixFQUFrQjtBQUFDbkMsaUJBQU8sRUFBQyxZQUFVO0FBQUM5RSxhQUFDLENBQUM4RSxPQUFGLElBQVloRixDQUFDLENBQUNnRixPQUFGLEVBQVo7QUFBd0I7QUFBNUMsU0FBbEIsQ0FBUDtBQUF3RSxPQUE1RyxDQUFQO0FBQXNILEtBQTNyQjtBQUE0ckJtRCxXQUFPLEVBQUM5RixDQUFwc0I7QUFBc3NCK0YsaUJBQWEsRUFBQyxZQUFVO0FBQUMsYUFBTzVILENBQUMsQ0FBQ3dCLGFBQUYsQ0FBZ0JLLENBQWhCLEVBQWtCLElBQWxCLEVBQXdCLFVBQVNyQyxDQUFULEVBQVc7QUFBQyxlQUFPUSxDQUFDLENBQUN3QixhQUFGLENBQWdCZ0YsQ0FBaEIsRUFBa0JqRyxDQUFDLENBQUMsRUFBRCxFQUFJZixDQUFKLENBQW5CLENBQVA7QUFBa0MsT0FBdEUsQ0FBUDtBQUFnRixLQUEveUI7QUFBZ3pCcUksbUJBQWUsRUFBQyxVQUFTckksQ0FBVCxFQUFXO0FBQUMsYUFBT1EsQ0FBQyxDQUFDd0IsYUFBRixDQUFnQkssQ0FBaEIsRUFBa0IsSUFBbEIsRUFBd0IsVUFBU25DLENBQVQsRUFBVztBQUFDLGVBQU9NLENBQUMsQ0FBQ3dCLGFBQUYsQ0FBZ0JxRixDQUFoQixFQUFrQjtBQUFDckMsaUJBQU8sRUFBQyxZQUFVO0FBQUM5RSxhQUFDLENBQUM4RSxPQUFGLElBQVloRixDQUFDLENBQUNnRixPQUFGLEVBQVo7QUFBd0I7QUFBNUMsU0FBbEIsQ0FBUDtBQUF3RSxPQUE1RyxDQUFQO0FBQXNILEtBQWw4QjtBQUFtOEJzRCxRQUFJLEVBQUMvRixDQUF4OEI7QUFBMDhCZ0csZUFBVyxFQUFDLFlBQVU7QUFBQyxhQUFPL0gsQ0FBQyxDQUFDd0IsYUFBRixDQUFnQk8sQ0FBaEIsRUFBa0IsSUFBbEIsRUFBd0IsVUFBU3ZDLENBQVQsRUFBVztBQUFDLGVBQU9RLENBQUMsQ0FBQ3dCLGFBQUYsQ0FBZ0I0QixDQUFoQixFQUFrQjdDLENBQUMsQ0FBQyxFQUFELEVBQUlmLENBQUosQ0FBbkIsQ0FBUDtBQUFrQyxPQUF0RSxDQUFQO0FBQWdGO0FBQWpqQyxHQUFOO0FBQXlqQyxDQUEvL0MiLCJmaWxlIjoiNDI0OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBlPXJlcXVpcmUoXCJyZWFjdFwiKSx0PXJlcXVpcmUoXCJAcmVhY3QtcGRmLXZpZXdlci9jb3JlXCIpO2Z1bmN0aW9uIG4oZSl7aWYoZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciB0PU9iamVjdC5jcmVhdGUobnVsbCk7cmV0dXJuIGUmJk9iamVjdC5rZXlzKGUpLmZvckVhY2goKGZ1bmN0aW9uKG4pe2lmKFwiZGVmYXVsdFwiIT09bil7dmFyIG89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLG4pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG4sby5nZXQ/bzp7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZVtuXX19KX19KSksdC5kZWZhdWx0PWUsT2JqZWN0LmZyZWV6ZSh0KX12YXIgbz1uKGUpLHI9ZnVuY3Rpb24oKXtyZXR1cm4ocj1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQsbj0xLG89YXJndW1lbnRzLmxlbmd0aDtuPG87bisrKWZvcih2YXIgciBpbiB0PWFyZ3VtZW50c1tuXSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxyKSYmKGVbcl09dFtyXSk7cmV0dXJuIGV9KS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGM9ZnVuY3Rpb24oZSl7dmFyIHQ9by51c2VTdGF0ZShlLmdldChcInNjYWxlXCIpfHwwKSxuPXRbMF0scj10WzFdLGM9ZnVuY3Rpb24oZSl7cihlKX07cmV0dXJuIG8udXNlRWZmZWN0KChmdW5jdGlvbigpe3JldHVybiBlLnN1YnNjcmliZShcInNjYWxlXCIsYyksZnVuY3Rpb24oKXtlLnVuc3Vic2NyaWJlKFwic2NhbGVcIixjKX19KSxbXSkse3NjYWxlOm59fSxhPWZ1bmN0aW9uKGUpe3ZhciB0PWUuY2hpbGRyZW4sbj1lLnN0b3JlO3JldHVybih0fHxmdW5jdGlvbihlKXtyZXR1cm4gby5jcmVhdGVFbGVtZW50KG8uRnJhZ21lbnQsbnVsbCxNYXRoLnJvdW5kKDEwMCplLnNjYWxlKStcIiVcIil9KSh7c2NhbGU6YyhuKS5zY2FsZX0pfSx1PVsuMSwuMiwuMywuNCwuNSwuNiwuNywuOCwuOSwxLDEuMSwxLjMsMS41LDEuNywxLjksMi4xLDIuNCwyLjcsMywzLjMsMy43LDQuMSw0LjYsNS4xLDUuNyw2LjMsNyw3LjcsOC41LDkuNCwxMF0saT1mdW5jdGlvbihlKXtyZXR1cm4gdS5maW5kKChmdW5jdGlvbih0KXtyZXR1cm4gdD5lfSkpfHxlfSxsPWZ1bmN0aW9uKGUpe3ZhciB0PXUuZmluZEluZGV4KChmdW5jdGlvbih0KXtyZXR1cm4gdD49ZX0pKTtyZXR1cm4tMT09PXR8fDA9PT10P2U6dVt0LTFdfSxtPWZ1bmN0aW9uKGUpe3ZhciBuPWUuY29udGFpbmVyUmVmLHI9ZS5zdG9yZSxjPWZ1bmN0aW9uKGUpe2lmKCFlLnNoaWZ0S2V5JiYhZS5hbHRLZXkmJih0LmlzTWFjKCk/ZS5tZXRhS2V5OmUuY3RybEtleSkpe3ZhciBvPW4uY3VycmVudDtpZihvJiZkb2N1bWVudC5hY3RpdmVFbGVtZW50JiZvLmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKXt2YXIgYz1yLmdldChcInpvb21cIik7aWYoYyl7dmFyIGE9ci5nZXQoXCJzY2FsZVwiKXx8MSx1PTE7c3dpdGNoKGUua2V5KXtjYXNlXCItXCI6dT1sKGEpO2JyZWFrO2Nhc2VcIj1cIjp1PWkoYSk7YnJlYWs7Y2FzZVwiMFwiOnU9MTticmVhaztkZWZhdWx0OnU9YX11IT09YSYmKGUucHJldmVudERlZmF1bHQoKSxjKHUpKX19fX07cmV0dXJuIG8udXNlRWZmZWN0KChmdW5jdGlvbigpe2lmKG4uY3VycmVudClyZXR1cm4gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIixjKSxmdW5jdGlvbigpe2RvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsYyl9fSksW24uY3VycmVudF0pLG8uY3JlYXRlRWxlbWVudChvLkZyYWdtZW50LG51bGwpfSxzPVsuNSwuNzUsMSwxLjI1LDEuNSwyLDMsNF0sZj17bGVmdDowLHRvcDo4fSxwPWZ1bmN0aW9uKGUpe3ZhciBuPWUuc2NhbGUscj1lLm9uWm9vbSxjPW8udXNlQ29udGV4dCh0LkxvY2FsaXphdGlvbkNvbnRleHQpLmwxMG4sYT1vLnVzZUNvbnRleHQodC5UaGVtZUNvbnRleHQpLmRpcmVjdGlvbj09PXQuVGV4dERpcmVjdGlvbi5SaWdodFRvTGVmdCx1PWMmJmMuem9vbT9jLnpvb20uem9vbURvY3VtZW50OlwiWm9vbSBkb2N1bWVudFwiO3JldHVybiBvLmNyZWF0ZUVsZW1lbnQodC5Qb3BvdmVyLHthcmlhQ29udHJvbHNTdWZmaXg6XCJ6b29tXCIsYXJpYUhhc1BvcHVwOlwibWVudVwiLHBvc2l0aW9uOnQuUG9zaXRpb24uQm90dG9tQ2VudGVyLHRhcmdldDpmdW5jdGlvbihlKXtyZXR1cm4gby5jcmVhdGVFbGVtZW50KHQuTWluaW1hbEJ1dHRvbix7YXJpYUxhYmVsOnUsb25DbGljazpmdW5jdGlvbigpe2UoKX19LG8uY3JlYXRlRWxlbWVudChcInNwYW5cIix7Y2xhc3NOYW1lOlwicnB2LXpvb21fX3BvcG92ZXItdGFyZ2V0XCJ9LG8uY3JlYXRlRWxlbWVudChcInNwYW5cIix7XCJkYXRhLXRlc3RpZFwiOlwiem9vbV9fcG9wb3Zlci10YXJnZXQtc2NhbGVcIixjbGFzc05hbWU6dC5jbGFzc05hbWVzKHtcInJwdi16b29tX19wb3BvdmVyLXRhcmdldC1zY2FsZVwiOiEwLFwicnB2LXpvb21fX3BvcG92ZXItdGFyZ2V0LXNjYWxlLS1sdHJcIjohYSxcInJwdi16b29tX19wb3BvdmVyLXRhcmdldC1zY2FsZS0tcnRsXCI6YX0pfSxNYXRoLnJvdW5kKDEwMCpuKSxcIiVcIiksby5jcmVhdGVFbGVtZW50KFwic3BhblwiLHtjbGFzc05hbWU6XCJycHYtem9vbV9fcG9wb3Zlci10YXJnZXQtYXJyb3dcIn0pKSl9LGNvbnRlbnQ6ZnVuY3Rpb24oZSl7cmV0dXJuIG8uY3JlYXRlRWxlbWVudCh0Lk1lbnUsbnVsbCxPYmplY3Qua2V5cyh0LlNwZWNpYWxab29tTGV2ZWwpLm1hcCgoZnVuY3Rpb24obil7dmFyIGE9bjtyZXR1cm4gby5jcmVhdGVFbGVtZW50KHQuTWVudUl0ZW0se2tleTphLG9uQ2xpY2s6ZnVuY3Rpb24oKXtlKCkscihhKX19LGZ1bmN0aW9uKGUpe3N3aXRjaChlKXtjYXNlIHQuU3BlY2lhbFpvb21MZXZlbC5BY3R1YWxTaXplOnJldHVybiBjJiZjLnpvb20/Yy56b29tLmFjdHVhbFNpemU6XCJBY3R1YWwgc2l6ZVwiO2Nhc2UgdC5TcGVjaWFsWm9vbUxldmVsLlBhZ2VGaXQ6cmV0dXJuIGMmJmMuem9vbT9jLnpvb20ucGFnZUZpdDpcIlBhZ2UgZml0XCI7Y2FzZSB0LlNwZWNpYWxab29tTGV2ZWwuUGFnZVdpZHRoOnJldHVybiBjJiZjLnpvb20/Yy56b29tLnBhZ2VXaWR0aDpcIlBhZ2Ugd2lkdGhcIn19KGEpKX0pKSxvLmNyZWF0ZUVsZW1lbnQodC5NZW51RGl2aWRlcixudWxsKSxzLm1hcCgoZnVuY3Rpb24obil7cmV0dXJuIG8uY3JlYXRlRWxlbWVudCh0Lk1lbnVJdGVtLHtrZXk6bixvbkNsaWNrOmZ1bmN0aW9uKCl7ZSgpLHIobil9fSxNYXRoLnJvdW5kKDEwMCpuKStcIiVcIil9KSkpfSxvZmZzZXQ6ZixjbG9zZU9uQ2xpY2tPdXRzaWRlOiEwLGNsb3NlT25Fc2NhcGU6ITB9KX0sdj1mdW5jdGlvbihlKXt2YXIgdD1lLmNoaWxkcmVuLG49ZS5zdG9yZTtyZXR1cm4odHx8ZnVuY3Rpb24oZSl7cmV0dXJuIG8uY3JlYXRlRWxlbWVudChwLHtzY2FsZTplLnNjYWxlLG9uWm9vbTplLm9uWm9vbX0pfSkoe3NjYWxlOmMobikuc2NhbGUsb25ab29tOmZ1bmN0aW9uKGUpe3ZhciB0PW4uZ2V0KFwiem9vbVwiKTt0JiZ0KGUpfX0pfSx6PWZ1bmN0aW9uKCl7cmV0dXJuIG8uY3JlYXRlRWxlbWVudCh0Lkljb24se2lnbm9yZURpcmVjdGlvbjohMCxzaXplOjE2fSxvLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIse2Q6XCJNMTAuNSwwLjQ5OWM1LjUyMywwLDEwLDQuNDc3LDEwLDEwcy00LjQ3NywxMC0xMCwxMHMtMTAtNC40NzctMTAtMTBTNC45NzcsMC40OTksMTAuNSwwLjQ5OXpcXG4gICAgICAgICAgICBNMjMuNSwyMy40OTlcXG4gICAgICAgICAgICBsLTUuOTI5LTUuOTI5XFxuICAgICAgICAgICAgTTUuNSwxMC40OTloMTBcXG4gICAgICAgICAgICBNMTAuNSw1LjQ5OXYxMFwifSkpfSxFPXtsZWZ0OjAsdG9wOjh9LGQ9ZnVuY3Rpb24oZSl7dmFyIG49ZS5lbmFibGVTaG9ydGN1dHMscj1lLm9uQ2xpY2ssYz1vLnVzZUNvbnRleHQodC5Mb2NhbGl6YXRpb25Db250ZXh0KS5sMTBuLGE9YyYmYy56b29tP2Muem9vbS56b29tSW46XCJab29tIGluXCIsdT1uP3QuaXNNYWMoKT9cIk1ldGErPVwiOlwiQ3RybCs9XCI6XCJcIjtyZXR1cm4gby5jcmVhdGVFbGVtZW50KHQuVG9vbHRpcCx7YXJpYUNvbnRyb2xzU3VmZml4Olwiem9vbS1pblwiLHBvc2l0aW9uOnQuUG9zaXRpb24uQm90dG9tQ2VudGVyLHRhcmdldDpvLmNyZWF0ZUVsZW1lbnQodC5NaW5pbWFsQnV0dG9uLHthcmlhS2V5U2hvcnRjdXRzOnUsYXJpYUxhYmVsOmEsb25DbGljazpyfSxvLmNyZWF0ZUVsZW1lbnQoeixudWxsKSksY29udGVudDpmdW5jdGlvbigpe3JldHVybiBhfSxvZmZzZXQ6RX0pfSxDPWZ1bmN0aW9uKGUpe3ZhciB0PWUuY2hpbGRyZW4sbj1lLmVuYWJsZVNob3J0Y3V0cyxvPWUuc3RvcmUscj1jKG8pLnNjYWxlO3JldHVybih0fHxkKSh7ZW5hYmxlU2hvcnRjdXRzOm4sb25DbGljazpmdW5jdGlvbigpe3ZhciBlPW8uZ2V0KFwiem9vbVwiKTtlJiZlKGkocikpfX0pfSxoPWZ1bmN0aW9uKCl7cmV0dXJuIG8uY3JlYXRlRWxlbWVudCh0Lkljb24se2lnbm9yZURpcmVjdGlvbjohMCxzaXplOjE2fSxvLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIse2Q6XCJNMTAuNSwwLjQ5OWM1LjUyMywwLDEwLDQuNDc3LDEwLDEwcy00LjQ3NywxMC0xMCwxMHMtMTAtNC40NzctMTAtMTBTNC45NzcsMC40OTksMTAuNSwwLjQ5OXpcXG4gICAgICAgICAgICBNMjMuNSwyMy40OTlcXG4gICAgICAgICAgICBsLTUuOTI5LTUuOTI5XFxuICAgICAgICAgICAgTTUuNSwxMC40OTloMTBcIn0pKX0sZz17bGVmdDowLHRvcDo4fSxiPWZ1bmN0aW9uKGUpe3ZhciBuPWUuZW5hYmxlU2hvcnRjdXRzLHI9ZS5vbkNsaWNrLGM9by51c2VDb250ZXh0KHQuTG9jYWxpemF0aW9uQ29udGV4dCkubDEwbixhPWMmJmMuem9vbT9jLnpvb20uem9vbU91dDpcIlpvb20gb3V0XCIsdT1uP3QuaXNNYWMoKT9cIk1ldGErLVwiOlwiQ3RybCstXCI6XCJcIjtyZXR1cm4gby5jcmVhdGVFbGVtZW50KHQuVG9vbHRpcCx7YXJpYUNvbnRyb2xzU3VmZml4Olwiem9vbS1vdXRcIixwb3NpdGlvbjp0LlBvc2l0aW9uLkJvdHRvbUNlbnRlcix0YXJnZXQ6by5jcmVhdGVFbGVtZW50KHQuTWluaW1hbEJ1dHRvbix7YXJpYUtleVNob3J0Y3V0czp1LGFyaWFMYWJlbDphLG9uQ2xpY2s6cn0sby5jcmVhdGVFbGVtZW50KGgsbnVsbCkpLGNvbnRlbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gYX0sb2Zmc2V0Omd9KX0saz1mdW5jdGlvbihlKXt2YXIgdD1lLmNoaWxkcmVuLG49ZS5lbmFibGVTaG9ydGN1dHMsbz1lLnN0b3JlLHI9YyhvKS5zY2FsZTtyZXR1cm4odHx8Yikoe2VuYWJsZVNob3J0Y3V0czpuLG9uQ2xpY2s6ZnVuY3Rpb24oKXt2YXIgZT1vLmdldChcInpvb21cIik7ZSYmZShsKHIpKX19KX0sTT1mdW5jdGlvbihlKXt2YXIgbj1lLm9uQ2xpY2sscj1vLnVzZUNvbnRleHQodC5Mb2NhbGl6YXRpb25Db250ZXh0KS5sMTBuLGM9ciYmci56b29tP3Iuem9vbS56b29tSW46XCJab29tIGluXCI7cmV0dXJuIG8uY3JlYXRlRWxlbWVudCh0Lk1lbnVJdGVtLHtpY29uOm8uY3JlYXRlRWxlbWVudCh6LG51bGwpLG9uQ2xpY2s6bn0sYyl9LFM9ZnVuY3Rpb24oZSl7dmFyIG49ZS5vbkNsaWNrLHI9by51c2VDb250ZXh0KHQuTG9jYWxpemF0aW9uQ29udGV4dCkubDEwbixjPXImJnIuem9vbT9yLnpvb20uem9vbU91dDpcIlpvb20gb3V0XCI7cmV0dXJuIG8uY3JlYXRlRWxlbWVudCh0Lk1lbnVJdGVtLHtpY29uOm8uY3JlYXRlRWxlbWVudChoLG51bGwpLG9uQ2xpY2s6bn0sYyl9O1xuLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovZXhwb3J0cy5ab29tSW5JY29uPXosZXhwb3J0cy5ab29tT3V0SWNvbj1oLGV4cG9ydHMuem9vbVBsdWdpbj1mdW5jdGlvbihlKXt2YXIgbj1vLnVzZU1lbW8oKGZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5hc3NpZ24oe30se2VuYWJsZVNob3J0Y3V0czohMH0sZSl9KSxbXSksYz1vLnVzZU1lbW8oKGZ1bmN0aW9uKCl7cmV0dXJuIHQuY3JlYXRlU3RvcmUoe30pfSksW10pLHU9ZnVuY3Rpb24oZSl7cmV0dXJuIG8uY3JlYXRlRWxlbWVudChDLHIoe2VuYWJsZVNob3J0Y3V0czpuLmVuYWJsZVNob3J0Y3V0c30sZSx7c3RvcmU6Y30pKX0saT1mdW5jdGlvbihlKXtyZXR1cm4gby5jcmVhdGVFbGVtZW50KGsscih7ZW5hYmxlU2hvcnRjdXRzOm4uZW5hYmxlU2hvcnRjdXRzfSxlLHtzdG9yZTpjfSkpfSxsPWZ1bmN0aW9uKGUpe3JldHVybiBvLmNyZWF0ZUVsZW1lbnQodixyKHt9LGUse3N0b3JlOmN9KSl9O3JldHVybntyZW5kZXJWaWV3ZXI6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zbG90O2lmKCFuLmVuYWJsZVNob3J0Y3V0cylyZXR1cm4gdDt2YXIgYT17Y2hpbGRyZW46by5jcmVhdGVFbGVtZW50KG8uRnJhZ21lbnQsbnVsbCxvLmNyZWF0ZUVsZW1lbnQobSx7Y29udGFpbmVyUmVmOmUuY29udGFpbmVyUmVmLHN0b3JlOmN9KSx0LmNoaWxkcmVuKX07cmV0dXJuIHIocih7fSx0KSxhKX0saW5zdGFsbDpmdW5jdGlvbihlKXtjLnVwZGF0ZShcInpvb21cIixlLnpvb20pfSxvblZpZXdlclN0YXRlQ2hhbmdlOmZ1bmN0aW9uKGUpe3JldHVybiBjLnVwZGF0ZShcInNjYWxlXCIsZS5zY2FsZSksZX0sem9vbVRvOmZ1bmN0aW9uKGUpe3ZhciB0PWMuZ2V0KFwiem9vbVwiKTt0JiZ0KGUpfSxDdXJyZW50U2NhbGU6ZnVuY3Rpb24oZSl7cmV0dXJuIG8uY3JlYXRlRWxlbWVudChhLHIoe30sZSx7c3RvcmU6Y30pKX0sWm9vbUluOnUsWm9vbUluQnV0dG9uOmZ1bmN0aW9uKCl7cmV0dXJuIG8uY3JlYXRlRWxlbWVudCh1LG51bGwsKGZ1bmN0aW9uKGUpe3JldHVybiBvLmNyZWF0ZUVsZW1lbnQoZCxyKHt9LGUpKX0pKX0sWm9vbUluTWVudUl0ZW06ZnVuY3Rpb24oZSl7cmV0dXJuIG8uY3JlYXRlRWxlbWVudCh1LG51bGwsKGZ1bmN0aW9uKHQpe3JldHVybiBvLmNyZWF0ZUVsZW1lbnQoTSx7b25DbGljazpmdW5jdGlvbigpe3Qub25DbGljaygpLGUub25DbGljaygpfX0pfSkpfSxab29tT3V0OmksWm9vbU91dEJ1dHRvbjpmdW5jdGlvbigpe3JldHVybiBvLmNyZWF0ZUVsZW1lbnQoaSxudWxsLChmdW5jdGlvbihlKXtyZXR1cm4gby5jcmVhdGVFbGVtZW50KGIscih7fSxlKSl9KSl9LFpvb21PdXRNZW51SXRlbTpmdW5jdGlvbihlKXtyZXR1cm4gby5jcmVhdGVFbGVtZW50KGksbnVsbCwoZnVuY3Rpb24odCl7cmV0dXJuIG8uY3JlYXRlRWxlbWVudChTLHtvbkNsaWNrOmZ1bmN0aW9uKCl7dC5vbkNsaWNrKCksZS5vbkNsaWNrKCl9fSl9KSl9LFpvb206bCxab29tUG9wb3ZlcjpmdW5jdGlvbigpe3JldHVybiBvLmNyZWF0ZUVsZW1lbnQobCxudWxsLChmdW5jdGlvbihlKXtyZXR1cm4gby5jcmVhdGVFbGVtZW50KHAscih7fSxlKSl9KSl9fX07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4248\n')},4828:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/**\n * A React component to view a PDF document\n *\n * @see https://react-pdf-viewer.dev\n * @license https://react-pdf-viewer.dev/license\n * @copyright 2019-2021 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n\n\nif (true) {\n  module.exports = __webpack_require__(4248);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYW5tYXJjaGl2ZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtcGRmLXZpZXdlci96b29tL2xpYi9pbmRleC5qcz84NmRmIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRWE7O0FBRWIsSUFBSUEsSUFBSixFQUEyQztBQUN2Q0MsNENBQUE7QUFDSCxDQUZELE1BRU8iLCJmaWxlIjoiNDgyOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBSZWFjdCBjb21wb25lbnQgdG8gdmlldyBhIFBERiBkb2N1bWVudFxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdC1wZGYtdmlld2VyLmRldlxuICogQGxpY2Vuc2UgaHR0cHM6Ly9yZWFjdC1wZGYtdmlld2VyLmRldi9saWNlbnNlXG4gKiBAY29weXJpZ2h0IDIwMTktMjAyMSBOZ3V5ZW4gSHV1IFBodW9jIDxtZUBwaHVvYy5uZz5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy96b29tLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3pvb20uanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4828\n")},7347:module=>{"use strict";eval("/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n/* eslint-disable no-unused-vars */\n\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n  if (val === null || val === undefined) {\n    throw new TypeError('Object.assign cannot be called with null or undefined');\n  }\n\n  return Object(val);\n}\n\nfunction shouldUseNative() {\n  try {\n    if (!Object.assign) {\n      return false;\n    } // Detect buggy property enumeration order in older V8 versions.\n    // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\n\n    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n\n    test1[5] = 'de';\n\n    if (Object.getOwnPropertyNames(test1)[0] === '5') {\n      return false;\n    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n    var test2 = {};\n\n    for (var i = 0; i < 10; i++) {\n      test2['_' + String.fromCharCode(i)] = i;\n    }\n\n    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n      return test2[n];\n    });\n\n    if (order2.join('') !== '0123456789') {\n      return false;\n    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n    var test3 = {};\n    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n      test3[letter] = letter;\n    });\n\n    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n      return false;\n    }\n\n    return true;\n  } catch (err) {\n    // We don't expect any of the above to throw, but better to be safe.\n    return false;\n  }\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n  var from;\n  var to = toObject(target);\n  var symbols;\n\n  for (var s = 1; s < arguments.length; s++) {\n    from = Object(arguments[s]);\n\n    for (var key in from) {\n      if (hasOwnProperty.call(from, key)) {\n        to[key] = from[key];\n      }\n    }\n\n    if (getOwnPropertySymbols) {\n      symbols = getOwnPropertySymbols(from);\n\n      for (var i = 0; i < symbols.length; i++) {\n        if (propIsEnumerable.call(from, symbols[i])) {\n          to[symbols[i]] = from[symbols[i]];\n        }\n      }\n    }\n  }\n\n  return to;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYW5tYXJjaGl2ZS8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzPzMyMGMiXSwibmFtZXMiOlsiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiT2JqZWN0IiwiaGFzT3duUHJvcGVydHkiLCJwcm90b3R5cGUiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInZhbCIsInVuZGVmaW5lZCIsIlR5cGVFcnJvciIsInNob3VsZFVzZU5hdGl2ZSIsImFzc2lnbiIsInRlc3QxIiwiU3RyaW5nIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRlc3QyIiwiaSIsImZyb21DaGFyQ29kZSIsIm9yZGVyMiIsIm1hcCIsIm4iLCJqb2luIiwidGVzdDMiLCJzcGxpdCIsImZvckVhY2giLCJsZXR0ZXIiLCJrZXlzIiwiZXJyIiwibW9kdWxlIiwiZXhwb3J0cyIsInRhcmdldCIsInNvdXJjZSIsImZyb20iLCJ0byIsInN5bWJvbHMiLCJzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwia2V5IiwiY2FsbCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVhO0FBQ2I7O0FBQ0EsSUFBSUEscUJBQXFCLEdBQUdDLE1BQU0sQ0FBQ0QscUJBQW5DO0FBQ0EsSUFBSUUsY0FBYyxHQUFHRCxNQUFNLENBQUNFLFNBQVAsQ0FBaUJELGNBQXRDO0FBQ0EsSUFBSUUsZ0JBQWdCLEdBQUdILE1BQU0sQ0FBQ0UsU0FBUCxDQUFpQkUsb0JBQXhDOztBQUVBLFNBQVNDLFFBQVQsQ0FBa0JDLEdBQWxCLEVBQXVCO0FBQ3RCLE1BQUlBLEdBQUcsS0FBSyxJQUFSLElBQWdCQSxHQUFHLEtBQUtDLFNBQTVCLEVBQXVDO0FBQ3RDLFVBQU0sSUFBSUMsU0FBSixDQUFjLHVEQUFkLENBQU47QUFDQTs7QUFFRCxTQUFPUixNQUFNLENBQUNNLEdBQUQsQ0FBYjtBQUNBOztBQUVELFNBQVNHLGVBQVQsR0FBMkI7QUFDMUIsTUFBSTtBQUNILFFBQUksQ0FBQ1QsTUFBTSxDQUFDVSxNQUFaLEVBQW9CO0FBQ25CLGFBQU8sS0FBUDtBQUNBLEtBSEUsQ0FLSDtBQUVBOzs7QUFDQSxRQUFJQyxLQUFLLEdBQUcsSUFBSUMsTUFBSixDQUFXLEtBQVgsQ0FBWixDQVJHLENBUTZCOztBQUNoQ0QsU0FBSyxDQUFDLENBQUQsQ0FBTCxHQUFXLElBQVg7O0FBQ0EsUUFBSVgsTUFBTSxDQUFDYSxtQkFBUCxDQUEyQkYsS0FBM0IsRUFBa0MsQ0FBbEMsTUFBeUMsR0FBN0MsRUFBa0Q7QUFDakQsYUFBTyxLQUFQO0FBQ0EsS0FaRSxDQWNIOzs7QUFDQSxRQUFJRyxLQUFLLEdBQUcsRUFBWjs7QUFDQSxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsRUFBcEIsRUFBd0JBLENBQUMsRUFBekIsRUFBNkI7QUFDNUJELFdBQUssQ0FBQyxNQUFNRixNQUFNLENBQUNJLFlBQVAsQ0FBb0JELENBQXBCLENBQVAsQ0FBTCxHQUFzQ0EsQ0FBdEM7QUFDQTs7QUFDRCxRQUFJRSxNQUFNLEdBQUdqQixNQUFNLENBQUNhLG1CQUFQLENBQTJCQyxLQUEzQixFQUFrQ0ksR0FBbEMsQ0FBc0MsVUFBVUMsQ0FBVixFQUFhO0FBQy9ELGFBQU9MLEtBQUssQ0FBQ0ssQ0FBRCxDQUFaO0FBQ0EsS0FGWSxDQUFiOztBQUdBLFFBQUlGLE1BQU0sQ0FBQ0csSUFBUCxDQUFZLEVBQVosTUFBb0IsWUFBeEIsRUFBc0M7QUFDckMsYUFBTyxLQUFQO0FBQ0EsS0F4QkUsQ0EwQkg7OztBQUNBLFFBQUlDLEtBQUssR0FBRyxFQUFaO0FBQ0EsMkJBQXVCQyxLQUF2QixDQUE2QixFQUE3QixFQUFpQ0MsT0FBakMsQ0FBeUMsVUFBVUMsTUFBVixFQUFrQjtBQUMxREgsV0FBSyxDQUFDRyxNQUFELENBQUwsR0FBZ0JBLE1BQWhCO0FBQ0EsS0FGRDs7QUFHQSxRQUFJeEIsTUFBTSxDQUFDeUIsSUFBUCxDQUFZekIsTUFBTSxDQUFDVSxNQUFQLENBQWMsRUFBZCxFQUFrQlcsS0FBbEIsQ0FBWixFQUFzQ0QsSUFBdEMsQ0FBMkMsRUFBM0MsTUFDRixzQkFERixFQUMwQjtBQUN6QixhQUFPLEtBQVA7QUFDQTs7QUFFRCxXQUFPLElBQVA7QUFDQSxHQXJDRCxDQXFDRSxPQUFPTSxHQUFQLEVBQVk7QUFDYjtBQUNBLFdBQU8sS0FBUDtBQUNBO0FBQ0Q7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQm5CLGVBQWUsS0FBS1QsTUFBTSxDQUFDVSxNQUFaLEdBQXFCLFVBQVVtQixNQUFWLEVBQWtCQyxNQUFsQixFQUEwQjtBQUM5RSxNQUFJQyxJQUFKO0FBQ0EsTUFBSUMsRUFBRSxHQUFHM0IsUUFBUSxDQUFDd0IsTUFBRCxDQUFqQjtBQUNBLE1BQUlJLE9BQUo7O0FBRUEsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHQyxTQUFTLENBQUNDLE1BQTlCLEVBQXNDRixDQUFDLEVBQXZDLEVBQTJDO0FBQzFDSCxRQUFJLEdBQUcvQixNQUFNLENBQUNtQyxTQUFTLENBQUNELENBQUQsQ0FBVixDQUFiOztBQUVBLFNBQUssSUFBSUcsR0FBVCxJQUFnQk4sSUFBaEIsRUFBc0I7QUFDckIsVUFBSTlCLGNBQWMsQ0FBQ3FDLElBQWYsQ0FBb0JQLElBQXBCLEVBQTBCTSxHQUExQixDQUFKLEVBQW9DO0FBQ25DTCxVQUFFLENBQUNLLEdBQUQsQ0FBRixHQUFVTixJQUFJLENBQUNNLEdBQUQsQ0FBZDtBQUNBO0FBQ0Q7O0FBRUQsUUFBSXRDLHFCQUFKLEVBQTJCO0FBQzFCa0MsYUFBTyxHQUFHbEMscUJBQXFCLENBQUNnQyxJQUFELENBQS9COztBQUNBLFdBQUssSUFBSWhCLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdrQixPQUFPLENBQUNHLE1BQTVCLEVBQW9DckIsQ0FBQyxFQUFyQyxFQUF5QztBQUN4QyxZQUFJWixnQkFBZ0IsQ0FBQ21DLElBQWpCLENBQXNCUCxJQUF0QixFQUE0QkUsT0FBTyxDQUFDbEIsQ0FBRCxDQUFuQyxDQUFKLEVBQTZDO0FBQzVDaUIsWUFBRSxDQUFDQyxPQUFPLENBQUNsQixDQUFELENBQVIsQ0FBRixHQUFpQmdCLElBQUksQ0FBQ0UsT0FBTyxDQUFDbEIsQ0FBRCxDQUFSLENBQXJCO0FBQ0E7QUFDRDtBQUNEO0FBQ0Q7O0FBRUQsU0FBT2lCLEVBQVA7QUFDQSxDQXpCRCIsImZpbGUiOiI3MzQ3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7347\n")},8395:function(module,__unused_webpack_exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (true) module.exports = factory();else {}\n})(this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __w_pdfjs_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __w_pdfjs_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __w_pdfjs_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __w_pdfjs_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __w_pdfjs_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__w_pdfjs_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            enumerable: true,\n            get: getter\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // define __esModule on exports\n\n      /******/\n\n\n      __w_pdfjs_require__.r = function (exports) {\n        /******/\n        if (typeof Symbol !== \'undefined\' && Symbol.toStringTag) {\n          /******/\n          Object.defineProperty(exports, Symbol.toStringTag, {\n            value: \'Module\'\n          });\n          /******/\n        }\n        /******/\n\n\n        Object.defineProperty(exports, \'__esModule\', {\n          value: true\n        });\n        /******/\n      };\n      /******/\n\n      /******/\n      // create a fake namespace object\n\n      /******/\n      // mode & 1: value is a module id, require it\n\n      /******/\n      // mode & 2: merge all properties of value into the ns\n\n      /******/\n      // mode & 4: return value when already ns object\n\n      /******/\n      // mode & 8|1: behave like require\n\n      /******/\n\n\n      __w_pdfjs_require__.t = function (value, mode) {\n        /******/\n        if (mode & 1) value = __w_pdfjs_require__(value);\n        /******/\n\n        if (mode & 8) return value;\n        /******/\n\n        if (mode & 4 && typeof value === \'object\' && value && value.__esModule) return value;\n        /******/\n\n        var ns = Object.create(null);\n        /******/\n\n        __w_pdfjs_require__.r(ns);\n        /******/\n\n\n        Object.defineProperty(ns, \'default\', {\n          enumerable: true,\n          value: value\n        });\n        /******/\n\n        if (mode & 2 && typeof value != \'string\') for (var key in value) __w_pdfjs_require__.d(ns, key, function (key) {\n          return value[key];\n        }.bind(null, key));\n        /******/\n\n        return ns;\n        /******/\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __w_pdfjs_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module[\'default\'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __w_pdfjs_require__.d(getter, \'a\', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __w_pdfjs_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __w_pdfjs_require__.p = "";\n      /******/\n\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __w_pdfjs_require__(__w_pdfjs_require__.s = 0);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      Object.defineProperty(exports, "addLinkAttributes", {\n        enumerable: true,\n        get: function () {\n          return _display_utils.addLinkAttributes;\n        }\n      });\n      Object.defineProperty(exports, "getFilenameFromUrl", {\n        enumerable: true,\n        get: function () {\n          return _display_utils.getFilenameFromUrl;\n        }\n      });\n      Object.defineProperty(exports, "LinkTarget", {\n        enumerable: true,\n        get: function () {\n          return _display_utils.LinkTarget;\n        }\n      });\n      Object.defineProperty(exports, "loadScript", {\n        enumerable: true,\n        get: function () {\n          return _display_utils.loadScript;\n        }\n      });\n      Object.defineProperty(exports, "PDFDateString", {\n        enumerable: true,\n        get: function () {\n          return _display_utils.PDFDateString;\n        }\n      });\n      Object.defineProperty(exports, "RenderingCancelledException", {\n        enumerable: true,\n        get: function () {\n          return _display_utils.RenderingCancelledException;\n        }\n      });\n      Object.defineProperty(exports, "build", {\n        enumerable: true,\n        get: function () {\n          return _api.build;\n        }\n      });\n      Object.defineProperty(exports, "getDocument", {\n        enumerable: true,\n        get: function () {\n          return _api.getDocument;\n        }\n      });\n      Object.defineProperty(exports, "LoopbackPort", {\n        enumerable: true,\n        get: function () {\n          return _api.LoopbackPort;\n        }\n      });\n      Object.defineProperty(exports, "PDFDataRangeTransport", {\n        enumerable: true,\n        get: function () {\n          return _api.PDFDataRangeTransport;\n        }\n      });\n      Object.defineProperty(exports, "PDFWorker", {\n        enumerable: true,\n        get: function () {\n          return _api.PDFWorker;\n        }\n      });\n      Object.defineProperty(exports, "version", {\n        enumerable: true,\n        get: function () {\n          return _api.version;\n        }\n      });\n      Object.defineProperty(exports, "CMapCompressionType", {\n        enumerable: true,\n        get: function () {\n          return _util.CMapCompressionType;\n        }\n      });\n      Object.defineProperty(exports, "createObjectURL", {\n        enumerable: true,\n        get: function () {\n          return _util.createObjectURL;\n        }\n      });\n      Object.defineProperty(exports, "createPromiseCapability", {\n        enumerable: true,\n        get: function () {\n          return _util.createPromiseCapability;\n        }\n      });\n      Object.defineProperty(exports, "createValidAbsoluteUrl", {\n        enumerable: true,\n        get: function () {\n          return _util.createValidAbsoluteUrl;\n        }\n      });\n      Object.defineProperty(exports, "InvalidPDFException", {\n        enumerable: true,\n        get: function () {\n          return _util.InvalidPDFException;\n        }\n      });\n      Object.defineProperty(exports, "MissingPDFException", {\n        enumerable: true,\n        get: function () {\n          return _util.MissingPDFException;\n        }\n      });\n      Object.defineProperty(exports, "OPS", {\n        enumerable: true,\n        get: function () {\n          return _util.OPS;\n        }\n      });\n      Object.defineProperty(exports, "PasswordResponses", {\n        enumerable: true,\n        get: function () {\n          return _util.PasswordResponses;\n        }\n      });\n      Object.defineProperty(exports, "PermissionFlag", {\n        enumerable: true,\n        get: function () {\n          return _util.PermissionFlag;\n        }\n      });\n      Object.defineProperty(exports, "removeNullCharacters", {\n        enumerable: true,\n        get: function () {\n          return _util.removeNullCharacters;\n        }\n      });\n      Object.defineProperty(exports, "shadow", {\n        enumerable: true,\n        get: function () {\n          return _util.shadow;\n        }\n      });\n      Object.defineProperty(exports, "UnexpectedResponseException", {\n        enumerable: true,\n        get: function () {\n          return _util.UnexpectedResponseException;\n        }\n      });\n      Object.defineProperty(exports, "UNSUPPORTED_FEATURES", {\n        enumerable: true,\n        get: function () {\n          return _util.UNSUPPORTED_FEATURES;\n        }\n      });\n      Object.defineProperty(exports, "Util", {\n        enumerable: true,\n        get: function () {\n          return _util.Util;\n        }\n      });\n      Object.defineProperty(exports, "VerbosityLevel", {\n        enumerable: true,\n        get: function () {\n          return _util.VerbosityLevel;\n        }\n      });\n      Object.defineProperty(exports, "AnnotationLayer", {\n        enumerable: true,\n        get: function () {\n          return _annotation_layer.AnnotationLayer;\n        }\n      });\n      Object.defineProperty(exports, "apiCompatibilityParams", {\n        enumerable: true,\n        get: function () {\n          return _api_compatibility.apiCompatibilityParams;\n        }\n      });\n      Object.defineProperty(exports, "GlobalWorkerOptions", {\n        enumerable: true,\n        get: function () {\n          return _worker_options.GlobalWorkerOptions;\n        }\n      });\n      Object.defineProperty(exports, "renderTextLayer", {\n        enumerable: true,\n        get: function () {\n          return _text_layer.renderTextLayer;\n        }\n      });\n      Object.defineProperty(exports, "SVGGraphics", {\n        enumerable: true,\n        get: function () {\n          return _svg.SVGGraphics;\n        }\n      });\n\n      var _display_utils = __w_pdfjs_require__(1);\n\n      var _api = __w_pdfjs_require__(5);\n\n      var _util = __w_pdfjs_require__(2);\n\n      var _annotation_layer = __w_pdfjs_require__(19);\n\n      var _api_compatibility = __w_pdfjs_require__(9);\n\n      var _worker_options = __w_pdfjs_require__(12);\n\n      var _text_layer = __w_pdfjs_require__(20);\n\n      var _svg = __w_pdfjs_require__(21);\n\n      const pdfjsVersion = \'2.6.347\';\n      const pdfjsBuild = \'3be9c65f\';\n      {\n        const {\n          isNodeJS\n        } = __w_pdfjs_require__(4);\n\n        if (isNodeJS) {\n          const PDFNodeStream = __w_pdfjs_require__(22).PDFNodeStream;\n\n          (0, _api.setPDFNetworkStreamFactory)(params => {\n            return new PDFNodeStream(params);\n          });\n        } else {\n          const PDFNetworkStream = __w_pdfjs_require__(25).PDFNetworkStream;\n\n          let PDFFetchStream;\n\n          if ((0, _display_utils.isFetchSupported)()) {\n            PDFFetchStream = __w_pdfjs_require__(26).PDFFetchStream;\n          }\n\n          (0, _api.setPDFNetworkStreamFactory)(params => {\n            if (PDFFetchStream && (0, _display_utils.isValidFetchUrl)(params.url)) {\n              return new PDFFetchStream(params);\n            }\n\n            return new PDFNetworkStream(params);\n          });\n        }\n      }\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.addLinkAttributes = addLinkAttributes;\n      exports.getFilenameFromUrl = getFilenameFromUrl;\n      exports.isFetchSupported = isFetchSupported;\n      exports.isValidFetchUrl = isValidFetchUrl;\n      exports.loadScript = loadScript;\n      exports.deprecated = deprecated;\n      exports.PDFDateString = exports.StatTimer = exports.DOMSVGFactory = exports.DOMCMapReaderFactory = exports.BaseCMapReaderFactory = exports.DOMCanvasFactory = exports.BaseCanvasFactory = exports.DEFAULT_LINK_REL = exports.LinkTarget = exports.RenderingCancelledException = exports.PageViewport = void 0;\n\n      var _util = __w_pdfjs_require__(2);\n\n      const DEFAULT_LINK_REL = "noopener noreferrer nofollow";\n      exports.DEFAULT_LINK_REL = DEFAULT_LINK_REL;\n      const SVG_NS = "http://www.w3.org/2000/svg";\n\n      class BaseCanvasFactory {\n        constructor() {\n          if (this.constructor === BaseCanvasFactory) {\n            (0, _util.unreachable)("Cannot initialize BaseCanvasFactory.");\n          }\n        }\n\n        create(width, height) {\n          (0, _util.unreachable)("Abstract method `create` called.");\n        }\n\n        reset(canvasAndContext, width, height) {\n          if (!canvasAndContext.canvas) {\n            throw new Error("Canvas is not specified");\n          }\n\n          if (width <= 0 || height <= 0) {\n            throw new Error("Invalid canvas size");\n          }\n\n          canvasAndContext.canvas.width = width;\n          canvasAndContext.canvas.height = height;\n        }\n\n        destroy(canvasAndContext) {\n          if (!canvasAndContext.canvas) {\n            throw new Error("Canvas is not specified");\n          }\n\n          canvasAndContext.canvas.width = 0;\n          canvasAndContext.canvas.height = 0;\n          canvasAndContext.canvas = null;\n          canvasAndContext.context = null;\n        }\n\n      }\n\n      exports.BaseCanvasFactory = BaseCanvasFactory;\n\n      class DOMCanvasFactory extends BaseCanvasFactory {\n        constructor({\n          ownerDocument = globalThis.document\n        } = {}) {\n          super();\n          this._document = ownerDocument;\n        }\n\n        create(width, height) {\n          if (width <= 0 || height <= 0) {\n            throw new Error("Invalid canvas size");\n          }\n\n          const canvas = this._document.createElement("canvas");\n\n          const context = canvas.getContext("2d");\n          canvas.width = width;\n          canvas.height = height;\n          return {\n            canvas,\n            context\n          };\n        }\n\n      }\n\n      exports.DOMCanvasFactory = DOMCanvasFactory;\n\n      class BaseCMapReaderFactory {\n        constructor({\n          baseUrl = null,\n          isCompressed = false\n        }) {\n          if (this.constructor === BaseCMapReaderFactory) {\n            (0, _util.unreachable)("Cannot initialize BaseCMapReaderFactory.");\n          }\n\n          this.baseUrl = baseUrl;\n          this.isCompressed = isCompressed;\n        }\n\n        async fetch({\n          name\n        }) {\n          if (!this.baseUrl) {\n            throw new Error(\'The CMap "baseUrl" parameter must be specified, ensure that \' + \'the "cMapUrl" and "cMapPacked" API parameters are provided.\');\n          }\n\n          if (!name) {\n            throw new Error("CMap name must be specified.");\n          }\n\n          const url = this.baseUrl + name + (this.isCompressed ? ".bcmap" : "");\n          const compressionType = this.isCompressed ? _util.CMapCompressionType.BINARY : _util.CMapCompressionType.NONE;\n          return this._fetchData(url, compressionType).catch(reason => {\n            throw new Error(`Unable to load ${this.isCompressed ? "binary " : ""}CMap at: ${url}`);\n          });\n        }\n\n        _fetchData(url, compressionType) {\n          (0, _util.unreachable)("Abstract method `_fetchData` called.");\n        }\n\n      }\n\n      exports.BaseCMapReaderFactory = BaseCMapReaderFactory;\n\n      class DOMCMapReaderFactory extends BaseCMapReaderFactory {\n        _fetchData(url, compressionType) {\n          if (isFetchSupported() && isValidFetchUrl(url, document.baseURI)) {\n            return fetch(url).then(async response => {\n              if (!response.ok) {\n                throw new Error(response.statusText);\n              }\n\n              let cMapData;\n\n              if (this.isCompressed) {\n                cMapData = new Uint8Array(await response.arrayBuffer());\n              } else {\n                cMapData = (0, _util.stringToBytes)(await response.text());\n              }\n\n              return {\n                cMapData,\n                compressionType\n              };\n            });\n          }\n\n          return new Promise((resolve, reject) => {\n            const request = new XMLHttpRequest();\n            request.open("GET", url, true);\n\n            if (this.isCompressed) {\n              request.responseType = "arraybuffer";\n            }\n\n            request.onreadystatechange = () => {\n              if (request.readyState !== XMLHttpRequest.DONE) {\n                return;\n              }\n\n              if (request.status === 200 || request.status === 0) {\n                let cMapData;\n\n                if (this.isCompressed && request.response) {\n                  cMapData = new Uint8Array(request.response);\n                } else if (!this.isCompressed && request.responseText) {\n                  cMapData = (0, _util.stringToBytes)(request.responseText);\n                }\n\n                if (cMapData) {\n                  resolve({\n                    cMapData,\n                    compressionType\n                  });\n                  return;\n                }\n              }\n\n              reject(new Error(request.statusText));\n            };\n\n            request.send(null);\n          });\n        }\n\n      }\n\n      exports.DOMCMapReaderFactory = DOMCMapReaderFactory;\n\n      class DOMSVGFactory {\n        create(width, height) {\n          (0, _util.assert)(width > 0 && height > 0, "Invalid SVG dimensions");\n          const svg = document.createElementNS(SVG_NS, "svg:svg");\n          svg.setAttribute("version", "1.1");\n          svg.setAttribute("width", width + "px");\n          svg.setAttribute("height", height + "px");\n          svg.setAttribute("preserveAspectRatio", "none");\n          svg.setAttribute("viewBox", "0 0 " + width + " " + height);\n          return svg;\n        }\n\n        createElement(type) {\n          (0, _util.assert)(typeof type === "string", "Invalid SVG element type");\n          return document.createElementNS(SVG_NS, type);\n        }\n\n      }\n\n      exports.DOMSVGFactory = DOMSVGFactory;\n\n      class PageViewport {\n        constructor({\n          viewBox,\n          scale,\n          rotation,\n          offsetX = 0,\n          offsetY = 0,\n          dontFlip = false\n        }) {\n          this.viewBox = viewBox;\n          this.scale = scale;\n          this.rotation = rotation;\n          this.offsetX = offsetX;\n          this.offsetY = offsetY;\n          const centerX = (viewBox[2] + viewBox[0]) / 2;\n          const centerY = (viewBox[3] + viewBox[1]) / 2;\n          let rotateA, rotateB, rotateC, rotateD;\n          rotation = rotation % 360;\n          rotation = rotation < 0 ? rotation + 360 : rotation;\n\n          switch (rotation) {\n            case 180:\n              rotateA = -1;\n              rotateB = 0;\n              rotateC = 0;\n              rotateD = 1;\n              break;\n\n            case 90:\n              rotateA = 0;\n              rotateB = 1;\n              rotateC = 1;\n              rotateD = 0;\n              break;\n\n            case 270:\n              rotateA = 0;\n              rotateB = -1;\n              rotateC = -1;\n              rotateD = 0;\n              break;\n\n            case 0:\n              rotateA = 1;\n              rotateB = 0;\n              rotateC = 0;\n              rotateD = -1;\n              break;\n\n            default:\n              throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.");\n          }\n\n          if (dontFlip) {\n            rotateC = -rotateC;\n            rotateD = -rotateD;\n          }\n\n          let offsetCanvasX, offsetCanvasY;\n          let width, height;\n\n          if (rotateA === 0) {\n            offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n            offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n            width = Math.abs(viewBox[3] - viewBox[1]) * scale;\n            height = Math.abs(viewBox[2] - viewBox[0]) * scale;\n          } else {\n            offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n            offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n            width = Math.abs(viewBox[2] - viewBox[0]) * scale;\n            height = Math.abs(viewBox[3] - viewBox[1]) * scale;\n          }\n\n          this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];\n          this.width = width;\n          this.height = height;\n        }\n\n        clone({\n          scale = this.scale,\n          rotation = this.rotation,\n          offsetX = this.offsetX,\n          offsetY = this.offsetY,\n          dontFlip = false\n        } = {}) {\n          return new PageViewport({\n            viewBox: this.viewBox.slice(),\n            scale,\n            rotation,\n            offsetX,\n            offsetY,\n            dontFlip\n          });\n        }\n\n        convertToViewportPoint(x, y) {\n          return _util.Util.applyTransform([x, y], this.transform);\n        }\n\n        convertToViewportRectangle(rect) {\n          const topLeft = _util.Util.applyTransform([rect[0], rect[1]], this.transform);\n\n          const bottomRight = _util.Util.applyTransform([rect[2], rect[3]], this.transform);\n\n          return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];\n        }\n\n        convertToPdfPoint(x, y) {\n          return _util.Util.applyInverseTransform([x, y], this.transform);\n        }\n\n      }\n\n      exports.PageViewport = PageViewport;\n\n      class RenderingCancelledException extends _util.BaseException {\n        constructor(msg, type) {\n          super(msg);\n          this.type = type;\n        }\n\n      }\n\n      exports.RenderingCancelledException = RenderingCancelledException;\n      const LinkTarget = {\n        NONE: 0,\n        SELF: 1,\n        BLANK: 2,\n        PARENT: 3,\n        TOP: 4\n      };\n      exports.LinkTarget = LinkTarget;\n\n      function addLinkAttributes(link, {\n        url,\n        target,\n        rel,\n        enabled = true\n      } = {}) {\n        (0, _util.assert)(url && typeof url === "string", \'addLinkAttributes: A valid "url" parameter must provided.\');\n        const urlNullRemoved = (0, _util.removeNullCharacters)(url);\n\n        if (enabled) {\n          link.href = link.title = urlNullRemoved;\n        } else {\n          link.href = "";\n          link.title = `Disabled: ${urlNullRemoved}`;\n\n          link.onclick = () => {\n            return false;\n          };\n        }\n\n        let targetStr = "";\n\n        switch (target) {\n          case LinkTarget.NONE:\n            break;\n\n          case LinkTarget.SELF:\n            targetStr = "_self";\n            break;\n\n          case LinkTarget.BLANK:\n            targetStr = "_blank";\n            break;\n\n          case LinkTarget.PARENT:\n            targetStr = "_parent";\n            break;\n\n          case LinkTarget.TOP:\n            targetStr = "_top";\n            break;\n        }\n\n        link.target = targetStr;\n        link.rel = typeof rel === "string" ? rel : DEFAULT_LINK_REL;\n      }\n\n      function getFilenameFromUrl(url) {\n        const anchor = url.indexOf("#");\n        const query = url.indexOf("?");\n        const end = Math.min(anchor > 0 ? anchor : url.length, query > 0 ? query : url.length);\n        return url.substring(url.lastIndexOf("/", end) + 1, end);\n      }\n\n      class StatTimer {\n        constructor() {\n          this.started = Object.create(null);\n          this.times = [];\n        }\n\n        time(name) {\n          if (name in this.started) {\n            (0, _util.warn)(`Timer is already running for ${name}`);\n          }\n\n          this.started[name] = Date.now();\n        }\n\n        timeEnd(name) {\n          if (!(name in this.started)) {\n            (0, _util.warn)(`Timer has not been started for ${name}`);\n          }\n\n          this.times.push({\n            name,\n            start: this.started[name],\n            end: Date.now()\n          });\n          delete this.started[name];\n        }\n\n        toString() {\n          const outBuf = [];\n          let longest = 0;\n\n          for (const time of this.times) {\n            const name = time.name;\n\n            if (name.length > longest) {\n              longest = name.length;\n            }\n          }\n\n          for (const time of this.times) {\n            const duration = time.end - time.start;\n            outBuf.push(`${time.name.padEnd(longest)} ${duration}ms\\n`);\n          }\n\n          return outBuf.join("");\n        }\n\n      }\n\n      exports.StatTimer = StatTimer;\n\n      function isFetchSupported() {\n        return typeof fetch !== "undefined" && typeof Response !== "undefined" && "body" in Response.prototype && typeof ReadableStream !== "undefined";\n      }\n\n      function isValidFetchUrl(url, baseUrl) {\n        try {\n          const {\n            protocol\n          } = baseUrl ? new URL(url, baseUrl) : new URL(url);\n          return protocol === "http:" || protocol === "https:";\n        } catch (ex) {\n          return false;\n        }\n      }\n\n      function loadScript(src) {\n        return new Promise((resolve, reject) => {\n          const script = document.createElement("script");\n          script.src = src;\n          script.onload = resolve;\n\n          script.onerror = function () {\n            reject(new Error(`Cannot load script at: ${script.src}`));\n          };\n\n          (document.head || document.documentElement).appendChild(script);\n        });\n      }\n\n      function deprecated(details) {\n        console.log("Deprecated API usage: " + details);\n      }\n\n      let pdfDateStringRegex;\n\n      class PDFDateString {\n        static toDateObject(input) {\n          if (!input || !(0, _util.isString)(input)) {\n            return null;\n          }\n\n          if (!pdfDateStringRegex) {\n            pdfDateStringRegex = new RegExp("^D:" + "(\\\\d{4})" + "(\\\\d{2})?" + "(\\\\d{2})?" + "(\\\\d{2})?" + "(\\\\d{2})?" + "(\\\\d{2})?" + "([Z|+|-])?" + "(\\\\d{2})?" + "\'?" + "(\\\\d{2})?" + "\'?");\n          }\n\n          const matches = pdfDateStringRegex.exec(input);\n\n          if (!matches) {\n            return null;\n          }\n\n          const year = parseInt(matches[1], 10);\n          let month = parseInt(matches[2], 10);\n          month = month >= 1 && month <= 12 ? month - 1 : 0;\n          let day = parseInt(matches[3], 10);\n          day = day >= 1 && day <= 31 ? day : 1;\n          let hour = parseInt(matches[4], 10);\n          hour = hour >= 0 && hour <= 23 ? hour : 0;\n          let minute = parseInt(matches[5], 10);\n          minute = minute >= 0 && minute <= 59 ? minute : 0;\n          let second = parseInt(matches[6], 10);\n          second = second >= 0 && second <= 59 ? second : 0;\n          const universalTimeRelation = matches[7] || "Z";\n          let offsetHour = parseInt(matches[8], 10);\n          offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\n          let offsetMinute = parseInt(matches[9], 10) || 0;\n          offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\n\n          if (universalTimeRelation === "-") {\n            hour += offsetHour;\n            minute += offsetMinute;\n          } else if (universalTimeRelation === "+") {\n            hour -= offsetHour;\n            minute -= offsetMinute;\n          }\n\n          return new Date(Date.UTC(year, month, day, hour, minute, second));\n        }\n\n      }\n\n      exports.PDFDateString = PDFDateString;\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.arrayByteLength = arrayByteLength;\n      exports.arraysToBytes = arraysToBytes;\n      exports.assert = assert;\n      exports.bytesToString = bytesToString;\n      exports.createPromiseCapability = createPromiseCapability;\n      exports.escapeString = escapeString;\n      exports.getModificationDate = getModificationDate;\n      exports.getVerbosityLevel = getVerbosityLevel;\n      exports.info = info;\n      exports.isArrayBuffer = isArrayBuffer;\n      exports.isArrayEqual = isArrayEqual;\n      exports.isBool = isBool;\n      exports.isNum = isNum;\n      exports.isString = isString;\n      exports.isSameOrigin = isSameOrigin;\n      exports.createValidAbsoluteUrl = createValidAbsoluteUrl;\n      exports.removeNullCharacters = removeNullCharacters;\n      exports.setVerbosityLevel = setVerbosityLevel;\n      exports.shadow = shadow;\n      exports.string32 = string32;\n      exports.stringToBytes = stringToBytes;\n      exports.stringToPDFString = stringToPDFString;\n      exports.stringToUTF8String = stringToUTF8String;\n      exports.utf8StringToString = utf8StringToString;\n      exports.warn = warn;\n      exports.unreachable = unreachable;\n      exports.IsEvalSupportedCached = exports.IsLittleEndianCached = exports.createObjectURL = exports.FormatError = exports.Util = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.TextRenderingMode = exports.StreamType = exports.PermissionFlag = exports.PasswordResponses = exports.PasswordException = exports.MissingPDFException = exports.InvalidPDFException = exports.AbortException = exports.CMapCompressionType = exports.ImageKind = exports.FontType = exports.AnnotationType = exports.AnnotationStateModelType = exports.AnnotationReviewState = exports.AnnotationReplyType = exports.AnnotationMarkedState = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationBorderStyleType = exports.UNSUPPORTED_FEATURES = exports.VerbosityLevel = exports.OPS = exports.IDENTITY_MATRIX = exports.FONT_IDENTITY_MATRIX = exports.BaseException = void 0;\n\n      __w_pdfjs_require__(3);\n\n      const IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\n      exports.IDENTITY_MATRIX = IDENTITY_MATRIX;\n      const FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n      exports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;\n      const PermissionFlag = {\n        PRINT: 0x04,\n        MODIFY_CONTENTS: 0x08,\n        COPY: 0x10,\n        MODIFY_ANNOTATIONS: 0x20,\n        FILL_INTERACTIVE_FORMS: 0x100,\n        COPY_FOR_ACCESSIBILITY: 0x200,\n        ASSEMBLE: 0x400,\n        PRINT_HIGH_QUALITY: 0x800\n      };\n      exports.PermissionFlag = PermissionFlag;\n      const TextRenderingMode = {\n        FILL: 0,\n        STROKE: 1,\n        FILL_STROKE: 2,\n        INVISIBLE: 3,\n        FILL_ADD_TO_PATH: 4,\n        STROKE_ADD_TO_PATH: 5,\n        FILL_STROKE_ADD_TO_PATH: 6,\n        ADD_TO_PATH: 7,\n        FILL_STROKE_MASK: 3,\n        ADD_TO_PATH_FLAG: 4\n      };\n      exports.TextRenderingMode = TextRenderingMode;\n      const ImageKind = {\n        GRAYSCALE_1BPP: 1,\n        RGB_24BPP: 2,\n        RGBA_32BPP: 3\n      };\n      exports.ImageKind = ImageKind;\n      const AnnotationType = {\n        TEXT: 1,\n        LINK: 2,\n        FREETEXT: 3,\n        LINE: 4,\n        SQUARE: 5,\n        CIRCLE: 6,\n        POLYGON: 7,\n        POLYLINE: 8,\n        HIGHLIGHT: 9,\n        UNDERLINE: 10,\n        SQUIGGLY: 11,\n        STRIKEOUT: 12,\n        STAMP: 13,\n        CARET: 14,\n        INK: 15,\n        POPUP: 16,\n        FILEATTACHMENT: 17,\n        SOUND: 18,\n        MOVIE: 19,\n        WIDGET: 20,\n        SCREEN: 21,\n        PRINTERMARK: 22,\n        TRAPNET: 23,\n        WATERMARK: 24,\n        THREED: 25,\n        REDACT: 26\n      };\n      exports.AnnotationType = AnnotationType;\n      const AnnotationStateModelType = {\n        MARKED: "Marked",\n        REVIEW: "Review"\n      };\n      exports.AnnotationStateModelType = AnnotationStateModelType;\n      const AnnotationMarkedState = {\n        MARKED: "Marked",\n        UNMARKED: "Unmarked"\n      };\n      exports.AnnotationMarkedState = AnnotationMarkedState;\n      const AnnotationReviewState = {\n        ACCEPTED: "Accepted",\n        REJECTED: "Rejected",\n        CANCELLED: "Cancelled",\n        COMPLETED: "Completed",\n        NONE: "None"\n      };\n      exports.AnnotationReviewState = AnnotationReviewState;\n      const AnnotationReplyType = {\n        GROUP: "Group",\n        REPLY: "R"\n      };\n      exports.AnnotationReplyType = AnnotationReplyType;\n      const AnnotationFlag = {\n        INVISIBLE: 0x01,\n        HIDDEN: 0x02,\n        PRINT: 0x04,\n        NOZOOM: 0x08,\n        NOROTATE: 0x10,\n        NOVIEW: 0x20,\n        READONLY: 0x40,\n        LOCKED: 0x80,\n        TOGGLENOVIEW: 0x100,\n        LOCKEDCONTENTS: 0x200\n      };\n      exports.AnnotationFlag = AnnotationFlag;\n      const AnnotationFieldFlag = {\n        READONLY: 0x0000001,\n        REQUIRED: 0x0000002,\n        NOEXPORT: 0x0000004,\n        MULTILINE: 0x0001000,\n        PASSWORD: 0x0002000,\n        NOTOGGLETOOFF: 0x0004000,\n        RADIO: 0x0008000,\n        PUSHBUTTON: 0x0010000,\n        COMBO: 0x0020000,\n        EDIT: 0x0040000,\n        SORT: 0x0080000,\n        FILESELECT: 0x0100000,\n        MULTISELECT: 0x0200000,\n        DONOTSPELLCHECK: 0x0400000,\n        DONOTSCROLL: 0x0800000,\n        COMB: 0x1000000,\n        RICHTEXT: 0x2000000,\n        RADIOSINUNISON: 0x2000000,\n        COMMITONSELCHANGE: 0x4000000\n      };\n      exports.AnnotationFieldFlag = AnnotationFieldFlag;\n      const AnnotationBorderStyleType = {\n        SOLID: 1,\n        DASHED: 2,\n        BEVELED: 3,\n        INSET: 4,\n        UNDERLINE: 5\n      };\n      exports.AnnotationBorderStyleType = AnnotationBorderStyleType;\n      const StreamType = {\n        UNKNOWN: "UNKNOWN",\n        FLATE: "FLATE",\n        LZW: "LZW",\n        DCT: "DCT",\n        JPX: "JPX",\n        JBIG: "JBIG",\n        A85: "A85",\n        AHX: "AHX",\n        CCF: "CCF",\n        RLX: "RLX"\n      };\n      exports.StreamType = StreamType;\n      const FontType = {\n        UNKNOWN: "UNKNOWN",\n        TYPE1: "TYPE1",\n        TYPE1C: "TYPE1C",\n        CIDFONTTYPE0: "CIDFONTTYPE0",\n        CIDFONTTYPE0C: "CIDFONTTYPE0C",\n        TRUETYPE: "TRUETYPE",\n        CIDFONTTYPE2: "CIDFONTTYPE2",\n        TYPE3: "TYPE3",\n        OPENTYPE: "OPENTYPE",\n        TYPE0: "TYPE0",\n        MMTYPE1: "MMTYPE1"\n      };\n      exports.FontType = FontType;\n      const VerbosityLevel = {\n        ERRORS: 0,\n        WARNINGS: 1,\n        INFOS: 5\n      };\n      exports.VerbosityLevel = VerbosityLevel;\n      const CMapCompressionType = {\n        NONE: 0,\n        BINARY: 1,\n        STREAM: 2\n      };\n      exports.CMapCompressionType = CMapCompressionType;\n      const OPS = {\n        dependency: 1,\n        setLineWidth: 2,\n        setLineCap: 3,\n        setLineJoin: 4,\n        setMiterLimit: 5,\n        setDash: 6,\n        setRenderingIntent: 7,\n        setFlatness: 8,\n        setGState: 9,\n        save: 10,\n        restore: 11,\n        transform: 12,\n        moveTo: 13,\n        lineTo: 14,\n        curveTo: 15,\n        curveTo2: 16,\n        curveTo3: 17,\n        closePath: 18,\n        rectangle: 19,\n        stroke: 20,\n        closeStroke: 21,\n        fill: 22,\n        eoFill: 23,\n        fillStroke: 24,\n        eoFillStroke: 25,\n        closeFillStroke: 26,\n        closeEOFillStroke: 27,\n        endPath: 28,\n        clip: 29,\n        eoClip: 30,\n        beginText: 31,\n        endText: 32,\n        setCharSpacing: 33,\n        setWordSpacing: 34,\n        setHScale: 35,\n        setLeading: 36,\n        setFont: 37,\n        setTextRenderingMode: 38,\n        setTextRise: 39,\n        moveText: 40,\n        setLeadingMoveText: 41,\n        setTextMatrix: 42,\n        nextLine: 43,\n        showText: 44,\n        showSpacedText: 45,\n        nextLineShowText: 46,\n        nextLineSetSpacingShowText: 47,\n        setCharWidth: 48,\n        setCharWidthAndBounds: 49,\n        setStrokeColorSpace: 50,\n        setFillColorSpace: 51,\n        setStrokeColor: 52,\n        setStrokeColorN: 53,\n        setFillColor: 54,\n        setFillColorN: 55,\n        setStrokeGray: 56,\n        setFillGray: 57,\n        setStrokeRGBColor: 58,\n        setFillRGBColor: 59,\n        setStrokeCMYKColor: 60,\n        setFillCMYKColor: 61,\n        shadingFill: 62,\n        beginInlineImage: 63,\n        beginImageData: 64,\n        endInlineImage: 65,\n        paintXObject: 66,\n        markPoint: 67,\n        markPointProps: 68,\n        beginMarkedContent: 69,\n        beginMarkedContentProps: 70,\n        endMarkedContent: 71,\n        beginCompat: 72,\n        endCompat: 73,\n        paintFormXObjectBegin: 74,\n        paintFormXObjectEnd: 75,\n        beginGroup: 76,\n        endGroup: 77,\n        beginAnnotations: 78,\n        endAnnotations: 79,\n        beginAnnotation: 80,\n        endAnnotation: 81,\n        paintJpegXObject: 82,\n        paintImageMaskXObject: 83,\n        paintImageMaskXObjectGroup: 84,\n        paintImageXObject: 85,\n        paintInlineImageXObject: 86,\n        paintInlineImageXObjectGroup: 87,\n        paintImageXObjectRepeat: 88,\n        paintImageMaskXObjectRepeat: 89,\n        paintSolidColorImageMask: 90,\n        constructPath: 91\n      };\n      exports.OPS = OPS;\n      const UNSUPPORTED_FEATURES = {\n        unknown: "unknown",\n        forms: "forms",\n        javaScript: "javaScript",\n        smask: "smask",\n        shadingPattern: "shadingPattern",\n        font: "font",\n        errorTilingPattern: "errorTilingPattern",\n        errorExtGState: "errorExtGState",\n        errorXObject: "errorXObject",\n        errorFontLoadType3: "errorFontLoadType3",\n        errorFontState: "errorFontState",\n        errorFontMissing: "errorFontMissing",\n        errorFontTranslate: "errorFontTranslate",\n        errorColorSpace: "errorColorSpace",\n        errorOperatorList: "errorOperatorList",\n        errorFontToUnicode: "errorFontToUnicode",\n        errorFontLoadNative: "errorFontLoadNative",\n        errorFontGetPath: "errorFontGetPath",\n        errorMarkedContent: "errorMarkedContent"\n      };\n      exports.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;\n      const PasswordResponses = {\n        NEED_PASSWORD: 1,\n        INCORRECT_PASSWORD: 2\n      };\n      exports.PasswordResponses = PasswordResponses;\n      let verbosity = VerbosityLevel.WARNINGS;\n\n      function setVerbosityLevel(level) {\n        if (Number.isInteger(level)) {\n          verbosity = level;\n        }\n      }\n\n      function getVerbosityLevel() {\n        return verbosity;\n      }\n\n      function info(msg) {\n        if (verbosity >= VerbosityLevel.INFOS) {\n          console.log(`Info: ${msg}`);\n        }\n      }\n\n      function warn(msg) {\n        if (verbosity >= VerbosityLevel.WARNINGS) {\n          console.log(`Warning: ${msg}`);\n        }\n      }\n\n      function unreachable(msg) {\n        throw new Error(msg);\n      }\n\n      function assert(cond, msg) {\n        if (!cond) {\n          unreachable(msg);\n        }\n      }\n\n      function isSameOrigin(baseUrl, otherUrl) {\n        let base;\n\n        try {\n          base = new URL(baseUrl);\n\n          if (!base.origin || base.origin === "null") {\n            return false;\n          }\n        } catch (e) {\n          return false;\n        }\n\n        const other = new URL(otherUrl, base);\n        return base.origin === other.origin;\n      }\n\n      function _isValidProtocol(url) {\n        if (!url) {\n          return false;\n        }\n\n        switch (url.protocol) {\n          case "http:":\n          case "https:":\n          case "ftp:":\n          case "mailto:":\n          case "tel:":\n            return true;\n\n          default:\n            return false;\n        }\n      }\n\n      function createValidAbsoluteUrl(url, baseUrl) {\n        if (!url) {\n          return null;\n        }\n\n        try {\n          const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n\n          if (_isValidProtocol(absoluteUrl)) {\n            return absoluteUrl;\n          }\n        } catch (ex) {}\n\n        return null;\n      }\n\n      function shadow(obj, prop, value) {\n        Object.defineProperty(obj, prop, {\n          value,\n          enumerable: true,\n          configurable: true,\n          writable: false\n        });\n        return value;\n      }\n\n      const BaseException = function BaseExceptionClosure() {\n        function BaseException(message) {\n          if (this.constructor === BaseException) {\n            unreachable("Cannot initialize BaseException.");\n          }\n\n          this.message = message;\n          this.name = this.constructor.name;\n        }\n\n        BaseException.prototype = new Error();\n        BaseException.constructor = BaseException;\n        return BaseException;\n      }();\n\n      exports.BaseException = BaseException;\n\n      class PasswordException extends BaseException {\n        constructor(msg, code) {\n          super(msg);\n          this.code = code;\n        }\n\n      }\n\n      exports.PasswordException = PasswordException;\n\n      class UnknownErrorException extends BaseException {\n        constructor(msg, details) {\n          super(msg);\n          this.details = details;\n        }\n\n      }\n\n      exports.UnknownErrorException = UnknownErrorException;\n\n      class InvalidPDFException extends BaseException {}\n\n      exports.InvalidPDFException = InvalidPDFException;\n\n      class MissingPDFException extends BaseException {}\n\n      exports.MissingPDFException = MissingPDFException;\n\n      class UnexpectedResponseException extends BaseException {\n        constructor(msg, status) {\n          super(msg);\n          this.status = status;\n        }\n\n      }\n\n      exports.UnexpectedResponseException = UnexpectedResponseException;\n\n      class FormatError extends BaseException {}\n\n      exports.FormatError = FormatError;\n\n      class AbortException extends BaseException {}\n\n      exports.AbortException = AbortException;\n      const NullCharactersRegExp = /\\x00/g;\n\n      function removeNullCharacters(str) {\n        if (typeof str !== "string") {\n          warn("The argument for removeNullCharacters must be a string.");\n          return str;\n        }\n\n        return str.replace(NullCharactersRegExp, "");\n      }\n\n      function bytesToString(bytes) {\n        assert(bytes !== null && typeof bytes === "object" && bytes.length !== undefined, "Invalid argument for bytesToString");\n        const length = bytes.length;\n        const MAX_ARGUMENT_COUNT = 8192;\n\n        if (length < MAX_ARGUMENT_COUNT) {\n          return String.fromCharCode.apply(null, bytes);\n        }\n\n        const strBuf = [];\n\n        for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n          const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n          const chunk = bytes.subarray(i, chunkEnd);\n          strBuf.push(String.fromCharCode.apply(null, chunk));\n        }\n\n        return strBuf.join("");\n      }\n\n      function stringToBytes(str) {\n        assert(typeof str === "string", "Invalid argument for stringToBytes");\n        const length = str.length;\n        const bytes = new Uint8Array(length);\n\n        for (let i = 0; i < length; ++i) {\n          bytes[i] = str.charCodeAt(i) & 0xff;\n        }\n\n        return bytes;\n      }\n\n      function arrayByteLength(arr) {\n        if (arr.length !== undefined) {\n          return arr.length;\n        }\n\n        assert(arr.byteLength !== undefined, "arrayByteLength - invalid argument.");\n        return arr.byteLength;\n      }\n\n      function arraysToBytes(arr) {\n        const length = arr.length;\n\n        if (length === 1 && arr[0] instanceof Uint8Array) {\n          return arr[0];\n        }\n\n        let resultLength = 0;\n\n        for (let i = 0; i < length; i++) {\n          resultLength += arrayByteLength(arr[i]);\n        }\n\n        let pos = 0;\n        const data = new Uint8Array(resultLength);\n\n        for (let i = 0; i < length; i++) {\n          let item = arr[i];\n\n          if (!(item instanceof Uint8Array)) {\n            if (typeof item === "string") {\n              item = stringToBytes(item);\n            } else {\n              item = new Uint8Array(item);\n            }\n          }\n\n          const itemLength = item.byteLength;\n          data.set(item, pos);\n          pos += itemLength;\n        }\n\n        return data;\n      }\n\n      function string32(value) {\n        return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n      }\n\n      function isLittleEndian() {\n        const buffer8 = new Uint8Array(4);\n        buffer8[0] = 1;\n        const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n        return view32[0] === 1;\n      }\n\n      const IsLittleEndianCached = {\n        get value() {\n          return shadow(this, "value", isLittleEndian());\n        }\n\n      };\n      exports.IsLittleEndianCached = IsLittleEndianCached;\n\n      function isEvalSupported() {\n        try {\n          new Function("");\n          return true;\n        } catch (e) {\n          return false;\n        }\n      }\n\n      const IsEvalSupportedCached = {\n        get value() {\n          return shadow(this, "value", isEvalSupported());\n        }\n\n      };\n      exports.IsEvalSupportedCached = IsEvalSupportedCached;\n      const rgbBuf = ["rgb(", 0, ",", 0, ",", 0, ")"];\n\n      class Util {\n        static makeCssRgb(r, g, b) {\n          rgbBuf[1] = r;\n          rgbBuf[3] = g;\n          rgbBuf[5] = b;\n          return rgbBuf.join("");\n        }\n\n        static transform(m1, m2) {\n          return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];\n        }\n\n        static applyTransform(p, m) {\n          const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n          const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n          return [xt, yt];\n        }\n\n        static applyInverseTransform(p, m) {\n          const d = m[0] * m[3] - m[1] * m[2];\n          const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n          const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n          return [xt, yt];\n        }\n\n        static getAxialAlignedBoundingBox(r, m) {\n          const p1 = Util.applyTransform(r, m);\n          const p2 = Util.applyTransform(r.slice(2, 4), m);\n          const p3 = Util.applyTransform([r[0], r[3]], m);\n          const p4 = Util.applyTransform([r[2], r[1]], m);\n          return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];\n        }\n\n        static inverseTransform(m) {\n          const d = m[0] * m[3] - m[1] * m[2];\n          return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];\n        }\n\n        static apply3dTransform(m, v) {\n          return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];\n        }\n\n        static singularValueDecompose2dScale(m) {\n          const transpose = [m[0], m[2], m[1], m[3]];\n          const a = m[0] * transpose[0] + m[1] * transpose[2];\n          const b = m[0] * transpose[1] + m[1] * transpose[3];\n          const c = m[2] * transpose[0] + m[3] * transpose[2];\n          const d = m[2] * transpose[1] + m[3] * transpose[3];\n          const first = (a + d) / 2;\n          const second = Math.sqrt((a + d) * (a + d) - 4 * (a * d - c * b)) / 2;\n          const sx = first + second || 1;\n          const sy = first - second || 1;\n          return [Math.sqrt(sx), Math.sqrt(sy)];\n        }\n\n        static normalizeRect(rect) {\n          const r = rect.slice(0);\n\n          if (rect[0] > rect[2]) {\n            r[0] = rect[2];\n            r[2] = rect[0];\n          }\n\n          if (rect[1] > rect[3]) {\n            r[1] = rect[3];\n            r[3] = rect[1];\n          }\n\n          return r;\n        }\n\n        static intersect(rect1, rect2) {\n          function compare(a, b) {\n            return a - b;\n          }\n\n          const orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);\n          const orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);\n          const result = [];\n          rect1 = Util.normalizeRect(rect1);\n          rect2 = Util.normalizeRect(rect2);\n\n          if (orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {\n            result[0] = orderedX[1];\n            result[2] = orderedX[2];\n          } else {\n            return null;\n          }\n\n          if (orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {\n            result[1] = orderedY[1];\n            result[3] = orderedY[2];\n          } else {\n            return null;\n          }\n\n          return result;\n        }\n\n      }\n\n      exports.Util = Util;\n      const PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2D8, 0x2C7, 0x2C6, 0x2D9, 0x2DD, 0x2DB, 0x2DA, 0x2DC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203A, 0x2212, 0x2030, 0x201E, 0x201C, 0x201D, 0x2018, 0x2019, 0x201A, 0x2122, 0xFB01, 0xFB02, 0x141, 0x152, 0x160, 0x178, 0x17D, 0x131, 0x142, 0x153, 0x161, 0x17E, 0, 0x20AC];\n\n      function stringToPDFString(str) {\n        const length = str.length,\n              strBuf = [];\n\n        if (str[0] === "\\xFE" && str[1] === "\\xFF") {\n          for (let i = 2; i < length; i += 2) {\n            strBuf.push(String.fromCharCode(str.charCodeAt(i) << 8 | str.charCodeAt(i + 1)));\n          }\n        } else if (str[0] === "\\xFF" && str[1] === "\\xFE") {\n          for (let i = 2; i < length; i += 2) {\n            strBuf.push(String.fromCharCode(str.charCodeAt(i + 1) << 8 | str.charCodeAt(i)));\n          }\n        } else {\n          for (let i = 0; i < length; ++i) {\n            const code = PDFStringTranslateTable[str.charCodeAt(i)];\n            strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n          }\n        }\n\n        return strBuf.join("");\n      }\n\n      function escapeString(str) {\n        return str.replace(/([\\(\\)\\\\])/g, "\\\\$1");\n      }\n\n      function stringToUTF8String(str) {\n        return decodeURIComponent(escape(str));\n      }\n\n      function utf8StringToString(str) {\n        return unescape(encodeURIComponent(str));\n      }\n\n      function isBool(v) {\n        return typeof v === "boolean";\n      }\n\n      function isNum(v) {\n        return typeof v === "number";\n      }\n\n      function isString(v) {\n        return typeof v === "string";\n      }\n\n      function isArrayBuffer(v) {\n        return typeof v === "object" && v !== null && v.byteLength !== undefined;\n      }\n\n      function isArrayEqual(arr1, arr2) {\n        if (arr1.length !== arr2.length) {\n          return false;\n        }\n\n        return arr1.every(function (element, index) {\n          return element === arr2[index];\n        });\n      }\n\n      function getModificationDate(date = new Date(Date.now())) {\n        const buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, "0"), (date.getUTCDate() + 1).toString().padStart(2, "0"), date.getUTCHours().toString().padStart(2, "0"), date.getUTCMinutes().toString().padStart(2, "0"), date.getUTCSeconds().toString().padStart(2, "0")];\n        return buffer.join("");\n      }\n\n      function createPromiseCapability() {\n        const capability = Object.create(null);\n        let isSettled = false;\n        Object.defineProperty(capability, "settled", {\n          get() {\n            return isSettled;\n          }\n\n        });\n        capability.promise = new Promise(function (resolve, reject) {\n          capability.resolve = function (data) {\n            isSettled = true;\n            resolve(data);\n          };\n\n          capability.reject = function (reason) {\n            isSettled = true;\n            reject(reason);\n          };\n        });\n        return capability;\n      }\n\n      const createObjectURL = function createObjectURLClosure() {\n        const digits = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";\n        return function createObjectURL(data, contentType, forceDataSchema = false) {\n          if (!forceDataSchema && URL.createObjectURL) {\n            const blob = new Blob([data], {\n              type: contentType\n            });\n            return URL.createObjectURL(blob);\n          }\n\n          let buffer = `data:${contentType};base64,`;\n\n          for (let i = 0, ii = data.length; i < ii; i += 3) {\n            const b1 = data[i] & 0xff;\n            const b2 = data[i + 1] & 0xff;\n            const b3 = data[i + 2] & 0xff;\n            const d1 = b1 >> 2,\n                  d2 = (b1 & 3) << 4 | b2 >> 4;\n            const d3 = i + 1 < ii ? (b2 & 0xf) << 2 | b3 >> 6 : 64;\n            const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n            buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n          }\n\n          return buffer;\n        };\n      }();\n\n      exports.createObjectURL = createObjectURL;\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      var _is_node = __w_pdfjs_require__(4);\n\n      ;\n      /***/\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.isNodeJS = void 0;\n      const isNodeJS = typeof process === "object" && process + "" === "[object process]" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== "browser");\n      exports.isNodeJS = isNodeJS;\n      /***/\n    },\n    /* 5 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.getDocument = getDocument;\n      exports.setPDFNetworkStreamFactory = setPDFNetworkStreamFactory;\n      exports.build = exports.version = exports.PDFPageProxy = exports.PDFDocumentProxy = exports.PDFWorker = exports.PDFDataRangeTransport = exports.LoopbackPort = void 0;\n\n      var _util = __w_pdfjs_require__(2);\n\n      var _display_utils = __w_pdfjs_require__(1);\n\n      var _font_loader = __w_pdfjs_require__(6);\n\n      var _node_utils = __w_pdfjs_require__(7);\n\n      var _annotation_storage = __w_pdfjs_require__(8);\n\n      var _api_compatibility = __w_pdfjs_require__(9);\n\n      var _canvas = __w_pdfjs_require__(10);\n\n      var _worker_options = __w_pdfjs_require__(12);\n\n      var _is_node = __w_pdfjs_require__(4);\n\n      var _message_handler = __w_pdfjs_require__(13);\n\n      var _metadata = __w_pdfjs_require__(14);\n\n      var _optional_content_config = __w_pdfjs_require__(16);\n\n      var _transport_stream = __w_pdfjs_require__(17);\n\n      var _webgl = __w_pdfjs_require__(18);\n\n      const DEFAULT_RANGE_CHUNK_SIZE = 65536;\n      const RENDERING_CANCELLED_TIMEOUT = 100;\n      const DefaultCanvasFactory = _is_node.isNodeJS ? _node_utils.NodeCanvasFactory : _display_utils.DOMCanvasFactory;\n      const DefaultCMapReaderFactory = _is_node.isNodeJS ? _node_utils.NodeCMapReaderFactory : _display_utils.DOMCMapReaderFactory;\n      let createPDFNetworkStream;\n\n      function setPDFNetworkStreamFactory(pdfNetworkStreamFactory) {\n        createPDFNetworkStream = pdfNetworkStreamFactory;\n      }\n\n      function getDocument(src) {\n        const task = new PDFDocumentLoadingTask();\n        let source;\n\n        if (typeof src === "string") {\n          source = {\n            url: src\n          };\n        } else if ((0, _util.isArrayBuffer)(src)) {\n          source = {\n            data: src\n          };\n        } else if (src instanceof PDFDataRangeTransport) {\n          source = {\n            range: src\n          };\n        } else {\n          if (typeof src !== "object") {\n            throw new Error("Invalid parameter in getDocument, " + "need either Uint8Array, string or a parameter object");\n          }\n\n          if (!src.url && !src.data && !src.range) {\n            throw new Error("Invalid parameter object: need either .data, .range or .url");\n          }\n\n          source = src;\n        }\n\n        const params = Object.create(null);\n        let rangeTransport = null,\n            worker = null;\n\n        for (const key in source) {\n          if (key === "url" && typeof window !== "undefined") {\n            params[key] = new URL(source[key], window.location).href;\n            continue;\n          } else if (key === "range") {\n            rangeTransport = source[key];\n            continue;\n          } else if (key === "worker") {\n            worker = source[key];\n            continue;\n          } else if (key === "data" && !(source[key] instanceof Uint8Array)) {\n            const pdfBytes = source[key];\n\n            if (typeof pdfBytes === "string") {\n              params[key] = (0, _util.stringToBytes)(pdfBytes);\n            } else if (typeof pdfBytes === "object" && pdfBytes !== null && !isNaN(pdfBytes.length)) {\n              params[key] = new Uint8Array(pdfBytes);\n            } else if ((0, _util.isArrayBuffer)(pdfBytes)) {\n              params[key] = new Uint8Array(pdfBytes);\n            } else {\n              throw new Error("Invalid PDF binary data: either typed array, " + "string or array-like object is expected in the " + "data property.");\n            }\n\n            continue;\n          }\n\n          params[key] = source[key];\n        }\n\n        params.rangeChunkSize = params.rangeChunkSize || DEFAULT_RANGE_CHUNK_SIZE;\n        params.CMapReaderFactory = params.CMapReaderFactory || DefaultCMapReaderFactory;\n        params.ignoreErrors = params.stopAtErrors !== true;\n        params.fontExtraProperties = params.fontExtraProperties === true;\n        params.pdfBug = params.pdfBug === true;\n\n        if (!Number.isInteger(params.maxImageSize)) {\n          params.maxImageSize = -1;\n        }\n\n        if (typeof params.isEvalSupported !== "boolean") {\n          params.isEvalSupported = true;\n        }\n\n        if (typeof params.disableFontFace !== "boolean") {\n          params.disableFontFace = _api_compatibility.apiCompatibilityParams.disableFontFace || false;\n        }\n\n        if (typeof params.ownerDocument === "undefined") {\n          params.ownerDocument = globalThis.document;\n        }\n\n        if (typeof params.disableRange !== "boolean") {\n          params.disableRange = false;\n        }\n\n        if (typeof params.disableStream !== "boolean") {\n          params.disableStream = false;\n        }\n\n        if (typeof params.disableAutoFetch !== "boolean") {\n          params.disableAutoFetch = false;\n        }\n\n        (0, _util.setVerbosityLevel)(params.verbosity);\n\n        if (!worker) {\n          const workerParams = {\n            verbosity: params.verbosity,\n            port: _worker_options.GlobalWorkerOptions.workerPort\n          };\n          worker = workerParams.port ? PDFWorker.fromPort(workerParams) : new PDFWorker(workerParams);\n          task._worker = worker;\n        }\n\n        const docId = task.docId;\n        worker.promise.then(function () {\n          if (task.destroyed) {\n            throw new Error("Loading aborted");\n          }\n\n          const workerIdPromise = _fetchDocument(worker, params, rangeTransport, docId);\n\n          const networkStreamPromise = new Promise(function (resolve) {\n            let networkStream;\n\n            if (rangeTransport) {\n              networkStream = new _transport_stream.PDFDataTransportStream({\n                length: params.length,\n                initialData: params.initialData,\n                progressiveDone: params.progressiveDone,\n                disableRange: params.disableRange,\n                disableStream: params.disableStream\n              }, rangeTransport);\n            } else if (!params.data) {\n              networkStream = createPDFNetworkStream({\n                url: params.url,\n                length: params.length,\n                httpHeaders: params.httpHeaders,\n                withCredentials: params.withCredentials,\n                rangeChunkSize: params.rangeChunkSize,\n                disableRange: params.disableRange,\n                disableStream: params.disableStream\n              });\n            }\n\n            resolve(networkStream);\n          });\n          return Promise.all([workerIdPromise, networkStreamPromise]).then(function ([workerId, networkStream]) {\n            if (task.destroyed) {\n              throw new Error("Loading aborted");\n            }\n\n            const messageHandler = new _message_handler.MessageHandler(docId, workerId, worker.port);\n            messageHandler.postMessageTransfers = worker.postMessageTransfers;\n            const transport = new WorkerTransport(messageHandler, task, networkStream, params);\n            task._transport = transport;\n            messageHandler.send("Ready", null);\n          });\n        }).catch(task._capability.reject);\n        return task;\n      }\n\n      function _fetchDocument(worker, source, pdfDataRangeTransport, docId) {\n        if (worker.destroyed) {\n          return Promise.reject(new Error("Worker was destroyed"));\n        }\n\n        if (pdfDataRangeTransport) {\n          source.length = pdfDataRangeTransport.length;\n          source.initialData = pdfDataRangeTransport.initialData;\n          source.progressiveDone = pdfDataRangeTransport.progressiveDone;\n        }\n\n        return worker.messageHandler.sendWithPromise("GetDocRequest", {\n          docId,\n          apiVersion: \'2.6.347\',\n          source: {\n            data: source.data,\n            url: source.url,\n            password: source.password,\n            disableAutoFetch: source.disableAutoFetch,\n            rangeChunkSize: source.rangeChunkSize,\n            length: source.length\n          },\n          maxImageSize: source.maxImageSize,\n          disableFontFace: source.disableFontFace,\n          postMessageTransfers: worker.postMessageTransfers,\n          docBaseUrl: source.docBaseUrl,\n          ignoreErrors: source.ignoreErrors,\n          isEvalSupported: source.isEvalSupported,\n          fontExtraProperties: source.fontExtraProperties\n        }).then(function (workerId) {\n          if (worker.destroyed) {\n            throw new Error("Worker was destroyed");\n          }\n\n          return workerId;\n        });\n      }\n\n      const PDFDocumentLoadingTask = function PDFDocumentLoadingTaskClosure() {\n        let nextDocumentId = 0;\n\n        class PDFDocumentLoadingTask {\n          constructor() {\n            this._capability = (0, _util.createPromiseCapability)();\n            this._transport = null;\n            this._worker = null;\n            this.docId = "d" + nextDocumentId++;\n            this.destroyed = false;\n            this.onPassword = null;\n            this.onProgress = null;\n            this.onUnsupportedFeature = null;\n          }\n\n          get promise() {\n            return this._capability.promise;\n          }\n\n          destroy() {\n            this.destroyed = true;\n            const transportDestroyed = !this._transport ? Promise.resolve() : this._transport.destroy();\n            return transportDestroyed.then(() => {\n              this._transport = null;\n\n              if (this._worker) {\n                this._worker.destroy();\n\n                this._worker = null;\n              }\n            });\n          }\n\n        }\n\n        return PDFDocumentLoadingTask;\n      }();\n\n      class PDFDataRangeTransport {\n        constructor(length, initialData, progressiveDone = false) {\n          this.length = length;\n          this.initialData = initialData;\n          this.progressiveDone = progressiveDone;\n          this._rangeListeners = [];\n          this._progressListeners = [];\n          this._progressiveReadListeners = [];\n          this._progressiveDoneListeners = [];\n          this._readyCapability = (0, _util.createPromiseCapability)();\n        }\n\n        addRangeListener(listener) {\n          this._rangeListeners.push(listener);\n        }\n\n        addProgressListener(listener) {\n          this._progressListeners.push(listener);\n        }\n\n        addProgressiveReadListener(listener) {\n          this._progressiveReadListeners.push(listener);\n        }\n\n        addProgressiveDoneListener(listener) {\n          this._progressiveDoneListeners.push(listener);\n        }\n\n        onDataRange(begin, chunk) {\n          for (const listener of this._rangeListeners) {\n            listener(begin, chunk);\n          }\n        }\n\n        onDataProgress(loaded, total) {\n          this._readyCapability.promise.then(() => {\n            for (const listener of this._progressListeners) {\n              listener(loaded, total);\n            }\n          });\n        }\n\n        onDataProgressiveRead(chunk) {\n          this._readyCapability.promise.then(() => {\n            for (const listener of this._progressiveReadListeners) {\n              listener(chunk);\n            }\n          });\n        }\n\n        onDataProgressiveDone() {\n          this._readyCapability.promise.then(() => {\n            for (const listener of this._progressiveDoneListeners) {\n              listener();\n            }\n          });\n        }\n\n        transportReady() {\n          this._readyCapability.resolve();\n        }\n\n        requestDataRange(begin, end) {\n          (0, _util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange");\n        }\n\n        abort() {}\n\n      }\n\n      exports.PDFDataRangeTransport = PDFDataRangeTransport;\n\n      class PDFDocumentProxy {\n        constructor(pdfInfo, transport) {\n          this._pdfInfo = pdfInfo;\n          this._transport = transport;\n        }\n\n        get annotationStorage() {\n          return (0, _util.shadow)(this, "annotationStorage", new _annotation_storage.AnnotationStorage());\n        }\n\n        get numPages() {\n          return this._pdfInfo.numPages;\n        }\n\n        get fingerprint() {\n          return this._pdfInfo.fingerprint;\n        }\n\n        getPage(pageNumber) {\n          return this._transport.getPage(pageNumber);\n        }\n\n        getPageIndex(ref) {\n          return this._transport.getPageIndex(ref);\n        }\n\n        getDestinations() {\n          return this._transport.getDestinations();\n        }\n\n        getDestination(id) {\n          return this._transport.getDestination(id);\n        }\n\n        getPageLabels() {\n          return this._transport.getPageLabels();\n        }\n\n        getPageLayout() {\n          return this._transport.getPageLayout();\n        }\n\n        getPageMode() {\n          return this._transport.getPageMode();\n        }\n\n        getViewerPreferences() {\n          return this._transport.getViewerPreferences();\n        }\n\n        getOpenAction() {\n          return this._transport.getOpenAction();\n        }\n\n        getAttachments() {\n          return this._transport.getAttachments();\n        }\n\n        getJavaScript() {\n          return this._transport.getJavaScript();\n        }\n\n        getOutline() {\n          return this._transport.getOutline();\n        }\n\n        getOptionalContentConfig() {\n          return this._transport.getOptionalContentConfig();\n        }\n\n        getPermissions() {\n          return this._transport.getPermissions();\n        }\n\n        getMetadata() {\n          return this._transport.getMetadata();\n        }\n\n        getData() {\n          return this._transport.getData();\n        }\n\n        getDownloadInfo() {\n          return this._transport.downloadInfoCapability.promise;\n        }\n\n        getStats() {\n          return this._transport.getStats();\n        }\n\n        cleanup() {\n          return this._transport.startCleanup();\n        }\n\n        destroy() {\n          return this.loadingTask.destroy();\n        }\n\n        get loadingParams() {\n          return this._transport.loadingParams;\n        }\n\n        get loadingTask() {\n          return this._transport.loadingTask;\n        }\n\n        saveDocument(annotationStorage) {\n          return this._transport.saveDocument(annotationStorage);\n        }\n\n      }\n\n      exports.PDFDocumentProxy = PDFDocumentProxy;\n\n      class PDFPageProxy {\n        constructor(pageIndex, pageInfo, transport, ownerDocument, pdfBug = false) {\n          this._pageIndex = pageIndex;\n          this._pageInfo = pageInfo;\n          this._ownerDocument = ownerDocument;\n          this._transport = transport;\n          this._stats = pdfBug ? new _display_utils.StatTimer() : null;\n          this._pdfBug = pdfBug;\n          this.commonObjs = transport.commonObjs;\n          this.objs = new PDFObjects();\n          this.cleanupAfterRender = false;\n          this.pendingCleanup = false;\n          this._intentStates = new Map();\n          this.destroyed = false;\n        }\n\n        get pageNumber() {\n          return this._pageIndex + 1;\n        }\n\n        get rotate() {\n          return this._pageInfo.rotate;\n        }\n\n        get ref() {\n          return this._pageInfo.ref;\n        }\n\n        get userUnit() {\n          return this._pageInfo.userUnit;\n        }\n\n        get view() {\n          return this._pageInfo.view;\n        }\n\n        getViewport({\n          scale,\n          rotation = this.rotate,\n          offsetX = 0,\n          offsetY = 0,\n          dontFlip = false\n        } = {}) {\n          return new _display_utils.PageViewport({\n            viewBox: this.view,\n            scale,\n            rotation,\n            offsetX,\n            offsetY,\n            dontFlip\n          });\n        }\n\n        getAnnotations({\n          intent = null\n        } = {}) {\n          if (!this.annotationsPromise || this.annotationsIntent !== intent) {\n            this.annotationsPromise = this._transport.getAnnotations(this._pageIndex, intent);\n            this.annotationsIntent = intent;\n          }\n\n          return this.annotationsPromise;\n        }\n\n        render({\n          canvasContext,\n          viewport,\n          intent = "display",\n          enableWebGL = false,\n          renderInteractiveForms = false,\n          transform = null,\n          imageLayer = null,\n          canvasFactory = null,\n          background = null,\n          annotationStorage = null,\n          optionalContentConfigPromise = null\n        }) {\n          if (this._stats) {\n            this._stats.time("Overall");\n          }\n\n          const renderingIntent = intent === "print" ? "print" : "display";\n          this.pendingCleanup = false;\n\n          if (!optionalContentConfigPromise) {\n            optionalContentConfigPromise = this._transport.getOptionalContentConfig();\n          }\n\n          let intentState = this._intentStates.get(renderingIntent);\n\n          if (!intentState) {\n            intentState = Object.create(null);\n\n            this._intentStates.set(renderingIntent, intentState);\n          }\n\n          if (intentState.streamReaderCancelTimeout) {\n            clearTimeout(intentState.streamReaderCancelTimeout);\n            intentState.streamReaderCancelTimeout = null;\n          }\n\n          const canvasFactoryInstance = canvasFactory || new DefaultCanvasFactory({\n            ownerDocument: this._ownerDocument\n          });\n          const webGLContext = new _webgl.WebGLContext({\n            enable: enableWebGL\n          });\n\n          if (!intentState.displayReadyCapability) {\n            intentState.displayReadyCapability = (0, _util.createPromiseCapability)();\n            intentState.operatorList = {\n              fnArray: [],\n              argsArray: [],\n              lastChunk: false\n            };\n\n            if (this._stats) {\n              this._stats.time("Page Request");\n            }\n\n            this._pumpOperatorList({\n              pageIndex: this._pageIndex,\n              intent: renderingIntent,\n              renderInteractiveForms: renderInteractiveForms === true,\n              annotationStorage: annotationStorage && annotationStorage.getAll() || null\n            });\n          }\n\n          const complete = error => {\n            const i = intentState.renderTasks.indexOf(internalRenderTask);\n\n            if (i >= 0) {\n              intentState.renderTasks.splice(i, 1);\n            }\n\n            if (this.cleanupAfterRender || renderingIntent === "print") {\n              this.pendingCleanup = true;\n            }\n\n            this._tryCleanup();\n\n            if (error) {\n              internalRenderTask.capability.reject(error);\n\n              this._abortOperatorList({\n                intentState,\n                reason: error\n              });\n            } else {\n              internalRenderTask.capability.resolve();\n            }\n\n            if (this._stats) {\n              this._stats.timeEnd("Rendering");\n\n              this._stats.timeEnd("Overall");\n            }\n          };\n\n          const internalRenderTask = new InternalRenderTask({\n            callback: complete,\n            params: {\n              canvasContext,\n              viewport,\n              transform,\n              imageLayer,\n              background\n            },\n            objs: this.objs,\n            commonObjs: this.commonObjs,\n            operatorList: intentState.operatorList,\n            pageIndex: this._pageIndex,\n            canvasFactory: canvasFactoryInstance,\n            webGLContext,\n            useRequestAnimationFrame: renderingIntent !== "print",\n            pdfBug: this._pdfBug\n          });\n\n          if (!intentState.renderTasks) {\n            intentState.renderTasks = [];\n          }\n\n          intentState.renderTasks.push(internalRenderTask);\n          const renderTask = internalRenderTask.task;\n          Promise.all([intentState.displayReadyCapability.promise, optionalContentConfigPromise]).then(([transparency, optionalContentConfig]) => {\n            if (this.pendingCleanup) {\n              complete();\n              return;\n            }\n\n            if (this._stats) {\n              this._stats.time("Rendering");\n            }\n\n            internalRenderTask.initializeGraphics({\n              transparency,\n              optionalContentConfig\n            });\n            internalRenderTask.operatorListChanged();\n          }).catch(complete);\n          return renderTask;\n        }\n\n        getOperatorList() {\n          function operatorListChanged() {\n            if (intentState.operatorList.lastChunk) {\n              intentState.opListReadCapability.resolve(intentState.operatorList);\n              const i = intentState.renderTasks.indexOf(opListTask);\n\n              if (i >= 0) {\n                intentState.renderTasks.splice(i, 1);\n              }\n            }\n          }\n\n          const renderingIntent = "oplist";\n\n          let intentState = this._intentStates.get(renderingIntent);\n\n          if (!intentState) {\n            intentState = Object.create(null);\n\n            this._intentStates.set(renderingIntent, intentState);\n          }\n\n          let opListTask;\n\n          if (!intentState.opListReadCapability) {\n            opListTask = Object.create(null);\n            opListTask.operatorListChanged = operatorListChanged;\n            intentState.opListReadCapability = (0, _util.createPromiseCapability)();\n            intentState.renderTasks = [];\n            intentState.renderTasks.push(opListTask);\n            intentState.operatorList = {\n              fnArray: [],\n              argsArray: [],\n              lastChunk: false\n            };\n\n            if (this._stats) {\n              this._stats.time("Page Request");\n            }\n\n            this._pumpOperatorList({\n              pageIndex: this._pageIndex,\n              intent: renderingIntent\n            });\n          }\n\n          return intentState.opListReadCapability.promise;\n        }\n\n        streamTextContent({\n          normalizeWhitespace = false,\n          disableCombineTextItems = false\n        } = {}) {\n          const TEXT_CONTENT_CHUNK_SIZE = 100;\n          return this._transport.messageHandler.sendWithStream("GetTextContent", {\n            pageIndex: this._pageIndex,\n            normalizeWhitespace: normalizeWhitespace === true,\n            combineTextItems: disableCombineTextItems !== true\n          }, {\n            highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\n\n            size(textContent) {\n              return textContent.items.length;\n            }\n\n          });\n        }\n\n        getTextContent(params = {}) {\n          const readableStream = this.streamTextContent(params);\n          return new Promise(function (resolve, reject) {\n            function pump() {\n              reader.read().then(function ({\n                value,\n                done\n              }) {\n                if (done) {\n                  resolve(textContent);\n                  return;\n                }\n\n                Object.assign(textContent.styles, value.styles);\n                textContent.items.push(...value.items);\n                pump();\n              }, reject);\n            }\n\n            const reader = readableStream.getReader();\n            const textContent = {\n              items: [],\n              styles: Object.create(null)\n            };\n            pump();\n          });\n        }\n\n        _destroy() {\n          this.destroyed = true;\n          this._transport.pageCache[this._pageIndex] = null;\n          const waitOn = [];\n\n          for (const [intent, intentState] of this._intentStates) {\n            this._abortOperatorList({\n              intentState,\n              reason: new Error("Page was destroyed."),\n              force: true\n            });\n\n            if (intent === "oplist") {\n              continue;\n            }\n\n            for (const internalRenderTask of intentState.renderTasks) {\n              waitOn.push(internalRenderTask.completed);\n              internalRenderTask.cancel();\n            }\n          }\n\n          this.objs.clear();\n          this.annotationsPromise = null;\n          this.pendingCleanup = false;\n          return Promise.all(waitOn);\n        }\n\n        cleanup(resetStats = false) {\n          this.pendingCleanup = true;\n          return this._tryCleanup(resetStats);\n        }\n\n        _tryCleanup(resetStats = false) {\n          if (!this.pendingCleanup) {\n            return false;\n          }\n\n          for (const {\n            renderTasks,\n            operatorList\n          } of this._intentStates.values()) {\n            if (renderTasks.length !== 0 || !operatorList.lastChunk) {\n              return false;\n            }\n          }\n\n          this._intentStates.clear();\n\n          this.objs.clear();\n          this.annotationsPromise = null;\n\n          if (resetStats && this._stats) {\n            this._stats = new _display_utils.StatTimer();\n          }\n\n          this.pendingCleanup = false;\n          return true;\n        }\n\n        _startRenderPage(transparency, intent) {\n          const intentState = this._intentStates.get(intent);\n\n          if (!intentState) {\n            return;\n          }\n\n          if (this._stats) {\n            this._stats.timeEnd("Page Request");\n          }\n\n          if (intentState.displayReadyCapability) {\n            intentState.displayReadyCapability.resolve(transparency);\n          }\n        }\n\n        _renderPageChunk(operatorListChunk, intentState) {\n          for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {\n            intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\n            intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\n          }\n\n          intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\n\n          for (let i = 0; i < intentState.renderTasks.length; i++) {\n            intentState.renderTasks[i].operatorListChanged();\n          }\n\n          if (operatorListChunk.lastChunk) {\n            this._tryCleanup();\n          }\n        }\n\n        _pumpOperatorList(args) {\n          (0, _util.assert)(args.intent, \'PDFPageProxy._pumpOperatorList: Expected "intent" argument.\');\n\n          const readableStream = this._transport.messageHandler.sendWithStream("GetOperatorList", args);\n\n          const reader = readableStream.getReader();\n\n          const intentState = this._intentStates.get(args.intent);\n\n          intentState.streamReader = reader;\n\n          const pump = () => {\n            reader.read().then(({\n              value,\n              done\n            }) => {\n              if (done) {\n                intentState.streamReader = null;\n                return;\n              }\n\n              if (this._transport.destroyed) {\n                return;\n              }\n\n              this._renderPageChunk(value, intentState);\n\n              pump();\n            }, reason => {\n              intentState.streamReader = null;\n\n              if (this._transport.destroyed) {\n                return;\n              }\n\n              if (intentState.operatorList) {\n                intentState.operatorList.lastChunk = true;\n\n                for (let i = 0; i < intentState.renderTasks.length; i++) {\n                  intentState.renderTasks[i].operatorListChanged();\n                }\n\n                this._tryCleanup();\n              }\n\n              if (intentState.displayReadyCapability) {\n                intentState.displayReadyCapability.reject(reason);\n              } else if (intentState.opListReadCapability) {\n                intentState.opListReadCapability.reject(reason);\n              } else {\n                throw reason;\n              }\n            });\n          };\n\n          pump();\n        }\n\n        _abortOperatorList({\n          intentState,\n          reason,\n          force = false\n        }) {\n          (0, _util.assert)(reason instanceof Error || typeof reason === "object" && reason !== null, \'PDFPageProxy._abortOperatorList: Expected "reason" argument.\');\n\n          if (!intentState.streamReader) {\n            return;\n          }\n\n          if (!force) {\n            if (intentState.renderTasks.length !== 0) {\n              return;\n            }\n\n            if (reason instanceof _display_utils.RenderingCancelledException) {\n              intentState.streamReaderCancelTimeout = setTimeout(() => {\n                this._abortOperatorList({\n                  intentState,\n                  reason,\n                  force: true\n                });\n\n                intentState.streamReaderCancelTimeout = null;\n              }, RENDERING_CANCELLED_TIMEOUT);\n              return;\n            }\n          }\n\n          intentState.streamReader.cancel(new _util.AbortException(reason && reason.message));\n          intentState.streamReader = null;\n\n          if (this._transport.destroyed) {\n            return;\n          }\n\n          for (const [intent, curIntentState] of this._intentStates) {\n            if (curIntentState === intentState) {\n              this._intentStates.delete(intent);\n\n              break;\n            }\n          }\n\n          this.cleanup();\n        }\n\n        get stats() {\n          return this._stats;\n        }\n\n      }\n\n      exports.PDFPageProxy = PDFPageProxy;\n\n      class LoopbackPort {\n        constructor(defer = true) {\n          this._listeners = [];\n          this._defer = defer;\n          this._deferred = Promise.resolve(undefined);\n        }\n\n        postMessage(obj, transfers) {\n          function cloneValue(value) {\n            if (typeof value !== "object" || value === null) {\n              return value;\n            }\n\n            if (cloned.has(value)) {\n              return cloned.get(value);\n            }\n\n            let buffer, result;\n\n            if ((buffer = value.buffer) && (0, _util.isArrayBuffer)(buffer)) {\n              const transferable = transfers && transfers.includes(buffer);\n\n              if (transferable) {\n                result = new value.constructor(buffer, value.byteOffset, value.byteLength);\n              } else {\n                result = new value.constructor(value);\n              }\n\n              cloned.set(value, result);\n              return result;\n            }\n\n            result = Array.isArray(value) ? [] : {};\n            cloned.set(value, result);\n\n            for (const i in value) {\n              let desc,\n                  p = value;\n\n              while (!(desc = Object.getOwnPropertyDescriptor(p, i))) {\n                p = Object.getPrototypeOf(p);\n              }\n\n              if (typeof desc.value === "undefined") {\n                continue;\n              }\n\n              if (typeof desc.value === "function") {\n                if (value.hasOwnProperty && value.hasOwnProperty(i)) {\n                  throw new Error(`LoopbackPort.postMessage - cannot clone: ${value[i]}`);\n                }\n\n                continue;\n              }\n\n              result[i] = cloneValue(desc.value);\n            }\n\n            return result;\n          }\n\n          if (!this._defer) {\n            this._listeners.forEach(listener => {\n              listener.call(this, {\n                data: obj\n              });\n            });\n\n            return;\n          }\n\n          const cloned = new WeakMap();\n          const e = {\n            data: cloneValue(obj)\n          };\n\n          this._deferred.then(() => {\n            this._listeners.forEach(listener => {\n              listener.call(this, e);\n            });\n          });\n        }\n\n        addEventListener(name, listener) {\n          this._listeners.push(listener);\n        }\n\n        removeEventListener(name, listener) {\n          const i = this._listeners.indexOf(listener);\n\n          this._listeners.splice(i, 1);\n        }\n\n        terminate() {\n          this._listeners.length = 0;\n        }\n\n      }\n\n      exports.LoopbackPort = LoopbackPort;\n\n      const PDFWorker = function PDFWorkerClosure() {\n        const pdfWorkerPorts = new WeakMap();\n        let isWorkerDisabled = false;\n        let fallbackWorkerSrc;\n        let nextFakeWorkerId = 0;\n        let fakeWorkerCapability;\n\n        if (_is_node.isNodeJS && "function" === "function") {\n          isWorkerDisabled = true;\n          fallbackWorkerSrc = "./pdf.worker.js";\n        } else if (typeof document === "object" && "currentScript" in document) {\n          const pdfjsFilePath = document.currentScript && document.currentScript.src;\n\n          if (pdfjsFilePath) {\n            fallbackWorkerSrc = pdfjsFilePath.replace(/(\\.(?:min\\.)?js)(\\?.*)?$/i, ".worker$1$2");\n          }\n        }\n\n        function getWorkerSrc() {\n          if (_worker_options.GlobalWorkerOptions.workerSrc) {\n            return _worker_options.GlobalWorkerOptions.workerSrc;\n          }\n\n          if (typeof fallbackWorkerSrc !== "undefined") {\n            if (!_is_node.isNodeJS) {\n              (0, _display_utils.deprecated)(\'No "GlobalWorkerOptions.workerSrc" specified.\');\n            }\n\n            return fallbackWorkerSrc;\n          }\n\n          throw new Error(\'No "GlobalWorkerOptions.workerSrc" specified.\');\n        }\n\n        function getMainThreadWorkerMessageHandler() {\n          let mainWorkerMessageHandler;\n\n          try {\n            mainWorkerMessageHandler = globalThis.pdfjsWorker && globalThis.pdfjsWorker.WorkerMessageHandler;\n          } catch (ex) {}\n\n          return mainWorkerMessageHandler || null;\n        }\n\n        function setupFakeWorkerGlobal() {\n          if (fakeWorkerCapability) {\n            return fakeWorkerCapability.promise;\n          }\n\n          fakeWorkerCapability = (0, _util.createPromiseCapability)();\n\n          const loader = async function () {\n            const mainWorkerMessageHandler = getMainThreadWorkerMessageHandler();\n\n            if (mainWorkerMessageHandler) {\n              return mainWorkerMessageHandler;\n            }\n\n            if (_is_node.isNodeJS && "function" === "function") {\n              const worker = eval("require")(getWorkerSrc());\n              return worker.WorkerMessageHandler;\n            }\n\n            await (0, _display_utils.loadScript)(getWorkerSrc());\n            return window.pdfjsWorker.WorkerMessageHandler;\n          };\n\n          loader().then(fakeWorkerCapability.resolve, fakeWorkerCapability.reject);\n          return fakeWorkerCapability.promise;\n        }\n\n        function createCDNWrapper(url) {\n          const wrapper = "importScripts(\'" + url + "\');";\n          return URL.createObjectURL(new Blob([wrapper]));\n        }\n\n        class PDFWorker {\n          constructor({\n            name = null,\n            port = null,\n            verbosity = (0, _util.getVerbosityLevel)()\n          } = {}) {\n            if (port && pdfWorkerPorts.has(port)) {\n              throw new Error("Cannot use more than one PDFWorker per port");\n            }\n\n            this.name = name;\n            this.destroyed = false;\n            this.postMessageTransfers = true;\n            this.verbosity = verbosity;\n            this._readyCapability = (0, _util.createPromiseCapability)();\n            this._port = null;\n            this._webWorker = null;\n            this._messageHandler = null;\n\n            if (port) {\n              pdfWorkerPorts.set(port, this);\n\n              this._initializeFromPort(port);\n\n              return;\n            }\n\n            this._initialize();\n          }\n\n          get promise() {\n            return this._readyCapability.promise;\n          }\n\n          get port() {\n            return this._port;\n          }\n\n          get messageHandler() {\n            return this._messageHandler;\n          }\n\n          _initializeFromPort(port) {\n            this._port = port;\n            this._messageHandler = new _message_handler.MessageHandler("main", "worker", port);\n\n            this._messageHandler.on("ready", function () {});\n\n            this._readyCapability.resolve();\n          }\n\n          _initialize() {\n            if (typeof Worker !== "undefined" && !isWorkerDisabled && !getMainThreadWorkerMessageHandler()) {\n              let workerSrc = getWorkerSrc();\n\n              try {\n                if (!(0, _util.isSameOrigin)(window.location.href, workerSrc)) {\n                  workerSrc = createCDNWrapper(new URL(workerSrc, window.location).href);\n                }\n\n                const worker = new Worker(workerSrc);\n                const messageHandler = new _message_handler.MessageHandler("main", "worker", worker);\n\n                const terminateEarly = () => {\n                  worker.removeEventListener("error", onWorkerError);\n                  messageHandler.destroy();\n                  worker.terminate();\n\n                  if (this.destroyed) {\n                    this._readyCapability.reject(new Error("Worker was destroyed"));\n                  } else {\n                    this._setupFakeWorker();\n                  }\n                };\n\n                const onWorkerError = () => {\n                  if (!this._webWorker) {\n                    terminateEarly();\n                  }\n                };\n\n                worker.addEventListener("error", onWorkerError);\n                messageHandler.on("test", data => {\n                  worker.removeEventListener("error", onWorkerError);\n\n                  if (this.destroyed) {\n                    terminateEarly();\n                    return;\n                  }\n\n                  if (data) {\n                    this._messageHandler = messageHandler;\n                    this._port = worker;\n                    this._webWorker = worker;\n\n                    if (!data.supportTransfers) {\n                      this.postMessageTransfers = false;\n                    }\n\n                    this._readyCapability.resolve();\n\n                    messageHandler.send("configure", {\n                      verbosity: this.verbosity\n                    });\n                  } else {\n                    this._setupFakeWorker();\n\n                    messageHandler.destroy();\n                    worker.terminate();\n                  }\n                });\n                messageHandler.on("ready", data => {\n                  worker.removeEventListener("error", onWorkerError);\n\n                  if (this.destroyed) {\n                    terminateEarly();\n                    return;\n                  }\n\n                  try {\n                    sendTest();\n                  } catch (e) {\n                    this._setupFakeWorker();\n                  }\n                });\n\n                const sendTest = () => {\n                  const testObj = new Uint8Array([this.postMessageTransfers ? 255 : 0]);\n\n                  try {\n                    messageHandler.send("test", testObj, [testObj.buffer]);\n                  } catch (ex) {\n                    (0, _util.warn)("Cannot use postMessage transfers.");\n                    testObj[0] = 0;\n                    messageHandler.send("test", testObj);\n                  }\n                };\n\n                sendTest();\n                return;\n              } catch (e) {\n                (0, _util.info)("The worker has been disabled.");\n              }\n            }\n\n            this._setupFakeWorker();\n          }\n\n          _setupFakeWorker() {\n            if (!isWorkerDisabled) {\n              (0, _util.warn)("Setting up fake worker.");\n              isWorkerDisabled = true;\n            }\n\n            setupFakeWorkerGlobal().then(WorkerMessageHandler => {\n              if (this.destroyed) {\n                this._readyCapability.reject(new Error("Worker was destroyed"));\n\n                return;\n              }\n\n              const port = new LoopbackPort();\n              this._port = port;\n              const id = "fake" + nextFakeWorkerId++;\n              const workerHandler = new _message_handler.MessageHandler(id + "_worker", id, port);\n              WorkerMessageHandler.setup(workerHandler, port);\n              const messageHandler = new _message_handler.MessageHandler(id, id + "_worker", port);\n              this._messageHandler = messageHandler;\n\n              this._readyCapability.resolve();\n\n              messageHandler.send("configure", {\n                verbosity: this.verbosity\n              });\n            }).catch(reason => {\n              this._readyCapability.reject(new Error(`Setting up fake worker failed: "${reason.message}".`));\n            });\n          }\n\n          destroy() {\n            this.destroyed = true;\n\n            if (this._webWorker) {\n              this._webWorker.terminate();\n\n              this._webWorker = null;\n            }\n\n            pdfWorkerPorts.delete(this._port);\n            this._port = null;\n\n            if (this._messageHandler) {\n              this._messageHandler.destroy();\n\n              this._messageHandler = null;\n            }\n          }\n\n          static fromPort(params) {\n            if (!params || !params.port) {\n              throw new Error("PDFWorker.fromPort - invalid method signature.");\n            }\n\n            if (pdfWorkerPorts.has(params.port)) {\n              return pdfWorkerPorts.get(params.port);\n            }\n\n            return new PDFWorker(params);\n          }\n\n          static getWorkerSrc() {\n            return getWorkerSrc();\n          }\n\n        }\n\n        return PDFWorker;\n      }();\n\n      exports.PDFWorker = PDFWorker;\n\n      class WorkerTransport {\n        constructor(messageHandler, loadingTask, networkStream, params) {\n          this.messageHandler = messageHandler;\n          this.loadingTask = loadingTask;\n          this.commonObjs = new PDFObjects();\n          this.fontLoader = new _font_loader.FontLoader({\n            docId: loadingTask.docId,\n            onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n            ownerDocument: params.ownerDocument\n          });\n          this._params = params;\n          this.CMapReaderFactory = new params.CMapReaderFactory({\n            baseUrl: params.cMapUrl,\n            isCompressed: params.cMapPacked\n          });\n          this.destroyed = false;\n          this.destroyCapability = null;\n          this._passwordCapability = null;\n          this._networkStream = networkStream;\n          this._fullReader = null;\n          this._lastProgress = null;\n          this.pageCache = [];\n          this.pagePromises = [];\n          this.downloadInfoCapability = (0, _util.createPromiseCapability)();\n          this.setupMessageHandler();\n        }\n\n        destroy() {\n          if (this.destroyCapability) {\n            return this.destroyCapability.promise;\n          }\n\n          this.destroyed = true;\n          this.destroyCapability = (0, _util.createPromiseCapability)();\n\n          if (this._passwordCapability) {\n            this._passwordCapability.reject(new Error("Worker was destroyed during onPassword callback"));\n          }\n\n          const waitOn = [];\n          this.pageCache.forEach(function (page) {\n            if (page) {\n              waitOn.push(page._destroy());\n            }\n          });\n          this.pageCache.length = 0;\n          this.pagePromises.length = 0;\n          const terminated = this.messageHandler.sendWithPromise("Terminate", null);\n          waitOn.push(terminated);\n          Promise.all(waitOn).then(() => {\n            this.fontLoader.clear();\n\n            if (this._networkStream) {\n              this._networkStream.cancelAllRequests(new _util.AbortException("Worker was terminated."));\n            }\n\n            if (this.messageHandler) {\n              this.messageHandler.destroy();\n              this.messageHandler = null;\n            }\n\n            this.destroyCapability.resolve();\n          }, this.destroyCapability.reject);\n          return this.destroyCapability.promise;\n        }\n\n        setupMessageHandler() {\n          const {\n            messageHandler,\n            loadingTask\n          } = this;\n          messageHandler.on("GetReader", (data, sink) => {\n            (0, _util.assert)(this._networkStream, "GetReader - no `IPDFStream` instance available.");\n            this._fullReader = this._networkStream.getFullReader();\n\n            this._fullReader.onProgress = evt => {\n              this._lastProgress = {\n                loaded: evt.loaded,\n                total: evt.total\n              };\n            };\n\n            sink.onPull = () => {\n              this._fullReader.read().then(function ({\n                value,\n                done\n              }) {\n                if (done) {\n                  sink.close();\n                  return;\n                }\n\n                (0, _util.assert)((0, _util.isArrayBuffer)(value), "GetReader - expected an ArrayBuffer.");\n                sink.enqueue(new Uint8Array(value), 1, [value]);\n              }).catch(reason => {\n                sink.error(reason);\n              });\n            };\n\n            sink.onCancel = reason => {\n              this._fullReader.cancel(reason);\n\n              sink.ready.catch(readyReason => {\n                if (this.destroyed) {\n                  return;\n                }\n\n                throw readyReason;\n              });\n            };\n          });\n          messageHandler.on("ReaderHeadersReady", data => {\n            const headersCapability = (0, _util.createPromiseCapability)();\n            const fullReader = this._fullReader;\n            fullReader.headersReady.then(() => {\n              if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {\n                if (this._lastProgress && loadingTask.onProgress) {\n                  loadingTask.onProgress(this._lastProgress);\n                }\n\n                fullReader.onProgress = evt => {\n                  if (loadingTask.onProgress) {\n                    loadingTask.onProgress({\n                      loaded: evt.loaded,\n                      total: evt.total\n                    });\n                  }\n                };\n              }\n\n              headersCapability.resolve({\n                isStreamingSupported: fullReader.isStreamingSupported,\n                isRangeSupported: fullReader.isRangeSupported,\n                contentLength: fullReader.contentLength\n              });\n            }, headersCapability.reject);\n            return headersCapability.promise;\n          });\n          messageHandler.on("GetRangeReader", (data, sink) => {\n            (0, _util.assert)(this._networkStream, "GetRangeReader - no `IPDFStream` instance available.");\n\n            const rangeReader = this._networkStream.getRangeReader(data.begin, data.end);\n\n            if (!rangeReader) {\n              sink.close();\n              return;\n            }\n\n            sink.onPull = () => {\n              rangeReader.read().then(function ({\n                value,\n                done\n              }) {\n                if (done) {\n                  sink.close();\n                  return;\n                }\n\n                (0, _util.assert)((0, _util.isArrayBuffer)(value), "GetRangeReader - expected an ArrayBuffer.");\n                sink.enqueue(new Uint8Array(value), 1, [value]);\n              }).catch(reason => {\n                sink.error(reason);\n              });\n            };\n\n            sink.onCancel = reason => {\n              rangeReader.cancel(reason);\n              sink.ready.catch(readyReason => {\n                if (this.destroyed) {\n                  return;\n                }\n\n                throw readyReason;\n              });\n            };\n          });\n          messageHandler.on("GetDoc", ({\n            pdfInfo\n          }) => {\n            this._numPages = pdfInfo.numPages;\n\n            loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));\n          });\n          messageHandler.on("DocException", function (ex) {\n            let reason;\n\n            switch (ex.name) {\n              case "PasswordException":\n                reason = new _util.PasswordException(ex.message, ex.code);\n                break;\n\n              case "InvalidPDFException":\n                reason = new _util.InvalidPDFException(ex.message);\n                break;\n\n              case "MissingPDFException":\n                reason = new _util.MissingPDFException(ex.message);\n                break;\n\n              case "UnexpectedResponseException":\n                reason = new _util.UnexpectedResponseException(ex.message, ex.status);\n                break;\n\n              case "UnknownErrorException":\n                reason = new _util.UnknownErrorException(ex.message, ex.details);\n                break;\n            }\n\n            if (!(reason instanceof Error)) {\n              const msg = "DocException - expected a valid Error.";\n              (0, _util.warn)(msg);\n            }\n\n            loadingTask._capability.reject(reason);\n          });\n          messageHandler.on("PasswordRequest", exception => {\n            this._passwordCapability = (0, _util.createPromiseCapability)();\n\n            if (loadingTask.onPassword) {\n              const updatePassword = password => {\n                this._passwordCapability.resolve({\n                  password\n                });\n              };\n\n              try {\n                loadingTask.onPassword(updatePassword, exception.code);\n              } catch (ex) {\n                this._passwordCapability.reject(ex);\n              }\n            } else {\n              this._passwordCapability.reject(new _util.PasswordException(exception.message, exception.code));\n            }\n\n            return this._passwordCapability.promise;\n          });\n          messageHandler.on("DataLoaded", data => {\n            if (loadingTask.onProgress) {\n              loadingTask.onProgress({\n                loaded: data.length,\n                total: data.length\n              });\n            }\n\n            this.downloadInfoCapability.resolve(data);\n          });\n          messageHandler.on("StartRenderPage", data => {\n            if (this.destroyed) {\n              return;\n            }\n\n            const page = this.pageCache[data.pageIndex];\n\n            page._startRenderPage(data.transparency, data.intent);\n          });\n          messageHandler.on("commonobj", data => {\n            if (this.destroyed) {\n              return;\n            }\n\n            const [id, type, exportedData] = data;\n\n            if (this.commonObjs.has(id)) {\n              return;\n            }\n\n            switch (type) {\n              case "Font":\n                const params = this._params;\n\n                if ("error" in exportedData) {\n                  const exportedError = exportedData.error;\n                  (0, _util.warn)(`Error during font loading: ${exportedError}`);\n                  this.commonObjs.resolve(id, exportedError);\n                  break;\n                }\n\n                let fontRegistry = null;\n\n                if (params.pdfBug && globalThis.FontInspector && globalThis.FontInspector.enabled) {\n                  fontRegistry = {\n                    registerFont(font, url) {\n                      globalThis.FontInspector.fontAdded(font, url);\n                    }\n\n                  };\n                }\n\n                const font = new _font_loader.FontFaceObject(exportedData, {\n                  isEvalSupported: params.isEvalSupported,\n                  disableFontFace: params.disableFontFace,\n                  ignoreErrors: params.ignoreErrors,\n                  onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n                  fontRegistry\n                });\n                this.fontLoader.bind(font).catch(reason => {\n                  return messageHandler.sendWithPromise("FontFallback", {\n                    id\n                  });\n                }).finally(() => {\n                  if (!params.fontExtraProperties && font.data) {\n                    font.data = null;\n                  }\n\n                  this.commonObjs.resolve(id, font);\n                });\n                break;\n\n              case "FontPath":\n              case "Image":\n                this.commonObjs.resolve(id, exportedData);\n                break;\n\n              default:\n                throw new Error(`Got unknown common object type ${type}`);\n            }\n          });\n          messageHandler.on("obj", data => {\n            if (this.destroyed) {\n              return undefined;\n            }\n\n            const [id, pageIndex, type, imageData] = data;\n            const pageProxy = this.pageCache[pageIndex];\n\n            if (pageProxy.objs.has(id)) {\n              return undefined;\n            }\n\n            switch (type) {\n              case "Image":\n                pageProxy.objs.resolve(id, imageData);\n                const MAX_IMAGE_SIZE_TO_STORE = 8000000;\n\n                if (imageData && "data" in imageData && imageData.data.length > MAX_IMAGE_SIZE_TO_STORE) {\n                  pageProxy.cleanupAfterRender = true;\n                }\n\n                break;\n\n              default:\n                throw new Error(`Got unknown object type ${type}`);\n            }\n\n            return undefined;\n          });\n          messageHandler.on("DocProgress", data => {\n            if (this.destroyed) {\n              return;\n            }\n\n            if (loadingTask.onProgress) {\n              loadingTask.onProgress({\n                loaded: data.loaded,\n                total: data.total\n              });\n            }\n          });\n          messageHandler.on("UnsupportedFeature", this._onUnsupportedFeature.bind(this));\n          messageHandler.on("FetchBuiltInCMap", (data, sink) => {\n            if (this.destroyed) {\n              sink.error(new Error("Worker was destroyed"));\n              return;\n            }\n\n            let fetched = false;\n\n            sink.onPull = () => {\n              if (fetched) {\n                sink.close();\n                return;\n              }\n\n              fetched = true;\n              this.CMapReaderFactory.fetch(data).then(function (builtInCMap) {\n                sink.enqueue(builtInCMap, 1, [builtInCMap.cMapData.buffer]);\n              }).catch(function (reason) {\n                sink.error(reason);\n              });\n            };\n          });\n        }\n\n        _onUnsupportedFeature({\n          featureId\n        }) {\n          if (this.destroyed) {\n            return;\n          }\n\n          if (this.loadingTask.onUnsupportedFeature) {\n            this.loadingTask.onUnsupportedFeature(featureId);\n          }\n        }\n\n        getData() {\n          return this.messageHandler.sendWithPromise("GetData", null);\n        }\n\n        getPage(pageNumber) {\n          if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this._numPages) {\n            return Promise.reject(new Error("Invalid page request"));\n          }\n\n          const pageIndex = pageNumber - 1;\n\n          if (pageIndex in this.pagePromises) {\n            return this.pagePromises[pageIndex];\n          }\n\n          const promise = this.messageHandler.sendWithPromise("GetPage", {\n            pageIndex\n          }).then(pageInfo => {\n            if (this.destroyed) {\n              throw new Error("Transport destroyed");\n            }\n\n            const page = new PDFPageProxy(pageIndex, pageInfo, this, this._params.ownerDocument, this._params.pdfBug);\n            this.pageCache[pageIndex] = page;\n            return page;\n          });\n          this.pagePromises[pageIndex] = promise;\n          return promise;\n        }\n\n        getPageIndex(ref) {\n          return this.messageHandler.sendWithPromise("GetPageIndex", {\n            ref\n          }).catch(function (reason) {\n            return Promise.reject(new Error(reason));\n          });\n        }\n\n        getAnnotations(pageIndex, intent) {\n          return this.messageHandler.sendWithPromise("GetAnnotations", {\n            pageIndex,\n            intent\n          });\n        }\n\n        saveDocument(annotationStorage) {\n          return this.messageHandler.sendWithPromise("SaveDocument", {\n            numPages: this._numPages,\n            annotationStorage: annotationStorage && annotationStorage.getAll() || null,\n            filename: this._fullReader ? this._fullReader.filename : null\n          }).finally(() => {\n            if (annotationStorage) {\n              annotationStorage.resetModified();\n            }\n          });\n        }\n\n        getDestinations() {\n          return this.messageHandler.sendWithPromise("GetDestinations", null);\n        }\n\n        getDestination(id) {\n          if (typeof id !== "string") {\n            return Promise.reject(new Error("Invalid destination request."));\n          }\n\n          return this.messageHandler.sendWithPromise("GetDestination", {\n            id\n          });\n        }\n\n        getPageLabels() {\n          return this.messageHandler.sendWithPromise("GetPageLabels", null);\n        }\n\n        getPageLayout() {\n          return this.messageHandler.sendWithPromise("GetPageLayout", null);\n        }\n\n        getPageMode() {\n          return this.messageHandler.sendWithPromise("GetPageMode", null);\n        }\n\n        getViewerPreferences() {\n          return this.messageHandler.sendWithPromise("GetViewerPreferences", null);\n        }\n\n        getOpenAction() {\n          return this.messageHandler.sendWithPromise("GetOpenAction", null);\n        }\n\n        getAttachments() {\n          return this.messageHandler.sendWithPromise("GetAttachments", null);\n        }\n\n        getJavaScript() {\n          return this.messageHandler.sendWithPromise("GetJavaScript", null);\n        }\n\n        getOutline() {\n          return this.messageHandler.sendWithPromise("GetOutline", null);\n        }\n\n        getOptionalContentConfig() {\n          return this.messageHandler.sendWithPromise("GetOptionalContentConfig", null).then(results => {\n            return new _optional_content_config.OptionalContentConfig(results);\n          });\n        }\n\n        getPermissions() {\n          return this.messageHandler.sendWithPromise("GetPermissions", null);\n        }\n\n        getMetadata() {\n          return this.messageHandler.sendWithPromise("GetMetadata", null).then(results => {\n            return {\n              info: results[0],\n              metadata: results[1] ? new _metadata.Metadata(results[1]) : null,\n              contentDispositionFilename: this._fullReader ? this._fullReader.filename : null\n            };\n          });\n        }\n\n        getStats() {\n          return this.messageHandler.sendWithPromise("GetStats", null);\n        }\n\n        startCleanup() {\n          return this.messageHandler.sendWithPromise("Cleanup", null).then(() => {\n            for (let i = 0, ii = this.pageCache.length; i < ii; i++) {\n              const page = this.pageCache[i];\n\n              if (page) {\n                const cleanupSuccessful = page.cleanup();\n\n                if (!cleanupSuccessful) {\n                  throw new Error(`startCleanup: Page ${i + 1} is currently rendering.`);\n                }\n              }\n            }\n\n            this.commonObjs.clear();\n            this.fontLoader.clear();\n          });\n        }\n\n        get loadingParams() {\n          const params = this._params;\n          return (0, _util.shadow)(this, "loadingParams", {\n            disableAutoFetch: params.disableAutoFetch,\n            disableFontFace: params.disableFontFace\n          });\n        }\n\n      }\n\n      class PDFObjects {\n        constructor() {\n          this._objs = Object.create(null);\n        }\n\n        _ensureObj(objId) {\n          if (this._objs[objId]) {\n            return this._objs[objId];\n          }\n\n          return this._objs[objId] = {\n            capability: (0, _util.createPromiseCapability)(),\n            data: null,\n            resolved: false\n          };\n        }\n\n        get(objId, callback = null) {\n          if (callback) {\n            this._ensureObj(objId).capability.promise.then(callback);\n\n            return null;\n          }\n\n          const obj = this._objs[objId];\n\n          if (!obj || !obj.resolved) {\n            throw new Error(`Requesting object that isn\'t resolved yet ${objId}.`);\n          }\n\n          return obj.data;\n        }\n\n        has(objId) {\n          const obj = this._objs[objId];\n          return obj ? obj.resolved : false;\n        }\n\n        resolve(objId, data) {\n          const obj = this._ensureObj(objId);\n\n          obj.resolved = true;\n          obj.data = data;\n          obj.capability.resolve(data);\n        }\n\n        clear() {\n          this._objs = Object.create(null);\n        }\n\n      }\n\n      class RenderTask {\n        constructor(internalRenderTask) {\n          this._internalRenderTask = internalRenderTask;\n          this.onContinue = null;\n        }\n\n        get promise() {\n          return this._internalRenderTask.capability.promise;\n        }\n\n        cancel() {\n          this._internalRenderTask.cancel();\n        }\n\n      }\n\n      const InternalRenderTask = function InternalRenderTaskClosure() {\n        const canvasInRendering = new WeakSet();\n\n        class InternalRenderTask {\n          constructor({\n            callback,\n            params,\n            objs,\n            commonObjs,\n            operatorList,\n            pageIndex,\n            canvasFactory,\n            webGLContext,\n            useRequestAnimationFrame = false,\n            pdfBug = false\n          }) {\n            this.callback = callback;\n            this.params = params;\n            this.objs = objs;\n            this.commonObjs = commonObjs;\n            this.operatorListIdx = null;\n            this.operatorList = operatorList;\n            this._pageIndex = pageIndex;\n            this.canvasFactory = canvasFactory;\n            this.webGLContext = webGLContext;\n            this._pdfBug = pdfBug;\n            this.running = false;\n            this.graphicsReadyCallback = null;\n            this.graphicsReady = false;\n            this._useRequestAnimationFrame = useRequestAnimationFrame === true && typeof window !== "undefined";\n            this.cancelled = false;\n            this.capability = (0, _util.createPromiseCapability)();\n            this.task = new RenderTask(this);\n            this._continueBound = this._continue.bind(this);\n            this._scheduleNextBound = this._scheduleNext.bind(this);\n            this._nextBound = this._next.bind(this);\n            this._canvas = params.canvasContext.canvas;\n          }\n\n          get completed() {\n            return this.capability.promise.catch(function () {});\n          }\n\n          initializeGraphics({\n            transparency = false,\n            optionalContentConfig\n          }) {\n            if (this.cancelled) {\n              return;\n            }\n\n            if (this._canvas) {\n              if (canvasInRendering.has(this._canvas)) {\n                throw new Error("Cannot use the same canvas during multiple render() operations. " + "Use different canvas or ensure previous operations were " + "cancelled or completed.");\n              }\n\n              canvasInRendering.add(this._canvas);\n            }\n\n            if (this._pdfBug && globalThis.StepperManager && globalThis.StepperManager.enabled) {\n              this.stepper = globalThis.StepperManager.create(this._pageIndex);\n              this.stepper.init(this.operatorList);\n              this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n            }\n\n            const {\n              canvasContext,\n              viewport,\n              transform,\n              imageLayer,\n              background\n            } = this.params;\n            this.gfx = new _canvas.CanvasGraphics(canvasContext, this.commonObjs, this.objs, this.canvasFactory, this.webGLContext, imageLayer, optionalContentConfig);\n            this.gfx.beginDrawing({\n              transform,\n              viewport,\n              transparency,\n              background\n            });\n            this.operatorListIdx = 0;\n            this.graphicsReady = true;\n\n            if (this.graphicsReadyCallback) {\n              this.graphicsReadyCallback();\n            }\n          }\n\n          cancel(error = null) {\n            this.running = false;\n            this.cancelled = true;\n\n            if (this.gfx) {\n              this.gfx.endDrawing();\n            }\n\n            if (this._canvas) {\n              canvasInRendering.delete(this._canvas);\n            }\n\n            this.callback(error || new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex + 1}`, "canvas"));\n          }\n\n          operatorListChanged() {\n            if (!this.graphicsReady) {\n              if (!this.graphicsReadyCallback) {\n                this.graphicsReadyCallback = this._continueBound;\n              }\n\n              return;\n            }\n\n            if (this.stepper) {\n              this.stepper.updateOperatorList(this.operatorList);\n            }\n\n            if (this.running) {\n              return;\n            }\n\n            this._continue();\n          }\n\n          _continue() {\n            this.running = true;\n\n            if (this.cancelled) {\n              return;\n            }\n\n            if (this.task.onContinue) {\n              this.task.onContinue(this._scheduleNextBound);\n            } else {\n              this._scheduleNext();\n            }\n          }\n\n          _scheduleNext() {\n            if (this._useRequestAnimationFrame) {\n              window.requestAnimationFrame(() => {\n                this._nextBound().catch(this.cancel.bind(this));\n              });\n            } else {\n              Promise.resolve().then(this._nextBound).catch(this.cancel.bind(this));\n            }\n          }\n\n          async _next() {\n            if (this.cancelled) {\n              return;\n            }\n\n            this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);\n\n            if (this.operatorListIdx === this.operatorList.argsArray.length) {\n              this.running = false;\n\n              if (this.operatorList.lastChunk) {\n                this.gfx.endDrawing();\n\n                if (this._canvas) {\n                  canvasInRendering.delete(this._canvas);\n                }\n\n                this.callback();\n              }\n            }\n          }\n\n        }\n\n        return InternalRenderTask;\n      }();\n\n      const version = \'2.6.347\';\n      exports.version = version;\n      const build = \'3be9c65f\';\n      exports.build = build;\n      /***/\n    },\n    /* 6 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.FontLoader = exports.FontFaceObject = void 0;\n\n      var _util = __w_pdfjs_require__(2);\n\n      class BaseFontLoader {\n        constructor({\n          docId,\n          onUnsupportedFeature,\n          ownerDocument = globalThis.document\n        }) {\n          if (this.constructor === BaseFontLoader) {\n            (0, _util.unreachable)("Cannot initialize BaseFontLoader.");\n          }\n\n          this.docId = docId;\n          this._onUnsupportedFeature = onUnsupportedFeature;\n          this._document = ownerDocument;\n          this.nativeFontFaces = [];\n          this.styleElement = null;\n        }\n\n        addNativeFontFace(nativeFontFace) {\n          this.nativeFontFaces.push(nativeFontFace);\n\n          this._document.fonts.add(nativeFontFace);\n        }\n\n        insertRule(rule) {\n          let styleElement = this.styleElement;\n\n          if (!styleElement) {\n            styleElement = this.styleElement = this._document.createElement("style");\n            styleElement.id = `PDFJS_FONT_STYLE_TAG_${this.docId}`;\n\n            this._document.documentElement.getElementsByTagName("head")[0].appendChild(styleElement);\n          }\n\n          const styleSheet = styleElement.sheet;\n          styleSheet.insertRule(rule, styleSheet.cssRules.length);\n        }\n\n        clear() {\n          this.nativeFontFaces.forEach(nativeFontFace => {\n            this._document.fonts.delete(nativeFontFace);\n          });\n          this.nativeFontFaces.length = 0;\n\n          if (this.styleElement) {\n            this.styleElement.remove();\n            this.styleElement = null;\n          }\n        }\n\n        async bind(font) {\n          if (font.attached || font.missingFile) {\n            return;\n          }\n\n          font.attached = true;\n\n          if (this.isFontLoadingAPISupported) {\n            const nativeFontFace = font.createNativeFontFace();\n\n            if (nativeFontFace) {\n              this.addNativeFontFace(nativeFontFace);\n\n              try {\n                await nativeFontFace.loaded;\n              } catch (ex) {\n                this._onUnsupportedFeature({\n                  featureId: _util.UNSUPPORTED_FEATURES.errorFontLoadNative\n                });\n\n                (0, _util.warn)(`Failed to load font \'${nativeFontFace.family}\': \'${ex}\'.`);\n                font.disableFontFace = true;\n                throw ex;\n              }\n            }\n\n            return;\n          }\n\n          const rule = font.createFontFaceRule();\n\n          if (rule) {\n            this.insertRule(rule);\n\n            if (this.isSyncFontLoadingSupported) {\n              return;\n            }\n\n            await new Promise(resolve => {\n              const request = this._queueLoadingCallback(resolve);\n\n              this._prepareFontLoadEvent([rule], [font], request);\n            });\n          }\n        }\n\n        _queueLoadingCallback(callback) {\n          (0, _util.unreachable)("Abstract method `_queueLoadingCallback`.");\n        }\n\n        get isFontLoadingAPISupported() {\n          const supported = typeof this._document !== "undefined" && !!this._document.fonts;\n          return (0, _util.shadow)(this, "isFontLoadingAPISupported", supported);\n        }\n\n        get isSyncFontLoadingSupported() {\n          (0, _util.unreachable)("Abstract method `isSyncFontLoadingSupported`.");\n        }\n\n        get _loadTestFont() {\n          (0, _util.unreachable)("Abstract method `_loadTestFont`.");\n        }\n\n        _prepareFontLoadEvent(rules, fontsToLoad, request) {\n          (0, _util.unreachable)("Abstract method `_prepareFontLoadEvent`.");\n        }\n\n      }\n\n      let FontLoader;\n      exports.FontLoader = FontLoader;\n      {\n        exports.FontLoader = FontLoader = class GenericFontLoader extends BaseFontLoader {\n          constructor(params) {\n            super(params);\n            this.loadingContext = {\n              requests: [],\n              nextRequestId: 0\n            };\n            this.loadTestFontId = 0;\n          }\n\n          get isSyncFontLoadingSupported() {\n            let supported = false;\n\n            if (typeof navigator === "undefined") {\n              supported = true;\n            } else {\n              const m = /Mozilla\\/5.0.*?rv:(\\d+).*? Gecko/.exec(navigator.userAgent);\n\n              if (m && m[1] >= 14) {\n                supported = true;\n              }\n            }\n\n            return (0, _util.shadow)(this, "isSyncFontLoadingSupported", supported);\n          }\n\n          _queueLoadingCallback(callback) {\n            function completeRequest() {\n              (0, _util.assert)(!request.done, "completeRequest() cannot be called twice.");\n              request.done = true;\n\n              while (context.requests.length > 0 && context.requests[0].done) {\n                const otherRequest = context.requests.shift();\n                setTimeout(otherRequest.callback, 0);\n              }\n            }\n\n            const context = this.loadingContext;\n            const request = {\n              id: `pdfjs-font-loading-${context.nextRequestId++}`,\n              done: false,\n              complete: completeRequest,\n              callback\n            };\n            context.requests.push(request);\n            return request;\n          }\n\n          get _loadTestFont() {\n            const getLoadTestFont = function () {\n              return atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA" + "FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA" + "ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA" + "AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1" + "AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD" + "6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM" + "AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D" + "IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA" + "AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA" + "AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB" + "AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY" + "AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA" + "AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA" + "AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC" + "AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3" + "Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj" + "FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");\n            };\n\n            return (0, _util.shadow)(this, "_loadTestFont", getLoadTestFont());\n          }\n\n          _prepareFontLoadEvent(rules, fonts, request) {\n            function int32(data, offset) {\n              return data.charCodeAt(offset) << 24 | data.charCodeAt(offset + 1) << 16 | data.charCodeAt(offset + 2) << 8 | data.charCodeAt(offset + 3) & 0xff;\n            }\n\n            function spliceString(s, offset, remove, insert) {\n              const chunk1 = s.substring(0, offset);\n              const chunk2 = s.substring(offset + remove);\n              return chunk1 + insert + chunk2;\n            }\n\n            let i, ii;\n\n            const canvas = this._document.createElement("canvas");\n\n            canvas.width = 1;\n            canvas.height = 1;\n            const ctx = canvas.getContext("2d");\n            let called = 0;\n\n            function isFontReady(name, callback) {\n              called++;\n\n              if (called > 30) {\n                (0, _util.warn)("Load test font never loaded.");\n                callback();\n                return;\n              }\n\n              ctx.font = "30px " + name;\n              ctx.fillText(".", 0, 20);\n              const imageData = ctx.getImageData(0, 0, 1, 1);\n\n              if (imageData.data[3] > 0) {\n                callback();\n                return;\n              }\n\n              setTimeout(isFontReady.bind(null, name, callback));\n            }\n\n            const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;\n            let data = this._loadTestFont;\n            const COMMENT_OFFSET = 976;\n            data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);\n            const CFF_CHECKSUM_OFFSET = 16;\n            const XXXX_VALUE = 0x58585858;\n            let checksum = int32(data, CFF_CHECKSUM_OFFSET);\n\n            for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {\n              checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;\n            }\n\n            if (i < loadTestFontId.length) {\n              checksum = checksum - XXXX_VALUE + int32(loadTestFontId + "XXX", i) | 0;\n            }\n\n            data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, (0, _util.string32)(checksum));\n            const url = `url(data:font/opentype;base64,${btoa(data)});`;\n            const rule = `@font-face {font-family:"${loadTestFontId}";src:${url}}`;\n            this.insertRule(rule);\n            const names = [];\n\n            for (i = 0, ii = fonts.length; i < ii; i++) {\n              names.push(fonts[i].loadedName);\n            }\n\n            names.push(loadTestFontId);\n\n            const div = this._document.createElement("div");\n\n            div.style.visibility = "hidden";\n            div.style.width = div.style.height = "10px";\n            div.style.position = "absolute";\n            div.style.top = div.style.left = "0px";\n\n            for (i = 0, ii = names.length; i < ii; ++i) {\n              const span = this._document.createElement("span");\n\n              span.textContent = "Hi";\n              span.style.fontFamily = names[i];\n              div.appendChild(span);\n            }\n\n            this._document.body.appendChild(div);\n\n            isFontReady(loadTestFontId, () => {\n              this._document.body.removeChild(div);\n\n              request.complete();\n            });\n          }\n\n        };\n      }\n\n      class FontFaceObject {\n        constructor(translatedData, {\n          isEvalSupported = true,\n          disableFontFace = false,\n          ignoreErrors = false,\n          onUnsupportedFeature = null,\n          fontRegistry = null\n        }) {\n          this.compiledGlyphs = Object.create(null);\n\n          for (const i in translatedData) {\n            this[i] = translatedData[i];\n          }\n\n          this.isEvalSupported = isEvalSupported !== false;\n          this.disableFontFace = disableFontFace === true;\n          this.ignoreErrors = ignoreErrors === true;\n          this._onUnsupportedFeature = onUnsupportedFeature;\n          this.fontRegistry = fontRegistry;\n        }\n\n        createNativeFontFace() {\n          if (!this.data || this.disableFontFace) {\n            return null;\n          }\n\n          const nativeFontFace = new FontFace(this.loadedName, this.data, {});\n\n          if (this.fontRegistry) {\n            this.fontRegistry.registerFont(this);\n          }\n\n          return nativeFontFace;\n        }\n\n        createFontFaceRule() {\n          if (!this.data || this.disableFontFace) {\n            return null;\n          }\n\n          const data = (0, _util.bytesToString)(new Uint8Array(this.data));\n          const url = `url(data:${this.mimetype};base64,${btoa(data)});`;\n          const rule = `@font-face {font-family:"${this.loadedName}";src:${url}}`;\n\n          if (this.fontRegistry) {\n            this.fontRegistry.registerFont(this, url);\n          }\n\n          return rule;\n        }\n\n        getPathGenerator(objs, character) {\n          if (this.compiledGlyphs[character] !== undefined) {\n            return this.compiledGlyphs[character];\n          }\n\n          let cmds, current;\n\n          try {\n            cmds = objs.get(this.loadedName + "_path_" + character);\n          } catch (ex) {\n            if (!this.ignoreErrors) {\n              throw ex;\n            }\n\n            if (this._onUnsupportedFeature) {\n              this._onUnsupportedFeature({\n                featureId: _util.UNSUPPORTED_FEATURES.errorFontGetPath\n              });\n            }\n\n            (0, _util.warn)(`getPathGenerator - ignoring character: "${ex}".`);\n            return this.compiledGlyphs[character] = function (c, size) {};\n          }\n\n          if (this.isEvalSupported && _util.IsEvalSupportedCached.value) {\n            let args,\n                js = "";\n\n            for (let i = 0, ii = cmds.length; i < ii; i++) {\n              current = cmds[i];\n\n              if (current.args !== undefined) {\n                args = current.args.join(",");\n              } else {\n                args = "";\n              }\n\n              js += "c." + current.cmd + "(" + args + ");\\n";\n            }\n\n            return this.compiledGlyphs[character] = new Function("c", "size", js);\n          }\n\n          return this.compiledGlyphs[character] = function (c, size) {\n            for (let i = 0, ii = cmds.length; i < ii; i++) {\n              current = cmds[i];\n\n              if (current.cmd === "scale") {\n                current.args = [size, -size];\n              }\n\n              c[current.cmd].apply(c, current.args);\n            }\n          };\n        }\n\n      }\n\n      exports.FontFaceObject = FontFaceObject;\n      /***/\n    },\n    /* 7 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.NodeCMapReaderFactory = exports.NodeCanvasFactory = void 0;\n\n      var _display_utils = __w_pdfjs_require__(1);\n\n      var _is_node = __w_pdfjs_require__(4);\n\n      var _util = __w_pdfjs_require__(2);\n\n      let NodeCanvasFactory = class {\n        constructor() {\n          (0, _util.unreachable)("Not implemented: NodeCanvasFactory");\n        }\n\n      };\n      exports.NodeCanvasFactory = NodeCanvasFactory;\n      let NodeCMapReaderFactory = class {\n        constructor() {\n          (0, _util.unreachable)("Not implemented: NodeCMapReaderFactory");\n        }\n\n      };\n      exports.NodeCMapReaderFactory = NodeCMapReaderFactory;\n\n      if (_is_node.isNodeJS) {\n        exports.NodeCanvasFactory = NodeCanvasFactory = class extends _display_utils.BaseCanvasFactory {\n          create(width, height) {\n            if (width <= 0 || height <= 0) {\n              throw new Error("Invalid canvas size");\n            }\n\n            const Canvas = __webpack_require__(3414);\n\n            const canvas = Canvas.createCanvas(width, height);\n            return {\n              canvas,\n              context: canvas.getContext("2d")\n            };\n          }\n\n        };\n        exports.NodeCMapReaderFactory = NodeCMapReaderFactory = class extends _display_utils.BaseCMapReaderFactory {\n          _fetchData(url, compressionType) {\n            return new Promise((resolve, reject) => {\n              const fs = __webpack_require__(172);\n\n              fs.readFile(url, (error, data) => {\n                if (error || !data) {\n                  reject(new Error(error));\n                  return;\n                }\n\n                resolve({\n                  cMapData: new Uint8Array(data),\n                  compressionType\n                });\n              });\n            });\n          }\n\n        };\n      }\n      /***/\n\n    },\n    /* 8 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.AnnotationStorage = void 0;\n\n      class AnnotationStorage {\n        constructor() {\n          this._storage = new Map();\n          this._modified = false;\n          this.onSetModified = null;\n          this.onResetModified = null;\n        }\n\n        getOrCreateValue(key, defaultValue) {\n          if (this._storage.has(key)) {\n            return this._storage.get(key);\n          }\n\n          this._storage.set(key, defaultValue);\n\n          return defaultValue;\n        }\n\n        setValue(key, value) {\n          if (this._storage.get(key) !== value) {\n            this._setModified();\n          }\n\n          this._storage.set(key, value);\n        }\n\n        getAll() {\n          if (this._storage.size === 0) {\n            return null;\n          }\n\n          return Object.fromEntries(this._storage);\n        }\n\n        get size() {\n          return this._storage.size;\n        }\n\n        _setModified() {\n          if (!this._modified) {\n            this._modified = true;\n\n            if (typeof this.onSetModified === "function") {\n              this.onSetModified();\n            }\n          }\n        }\n\n        resetModified() {\n          if (this._modified) {\n            this._modified = false;\n\n            if (typeof this.onResetModified === "function") {\n              this.onResetModified();\n            }\n          }\n        }\n\n      }\n\n      exports.AnnotationStorage = AnnotationStorage;\n      /***/\n    },\n    /* 9 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.apiCompatibilityParams = void 0;\n\n      var _is_node = __w_pdfjs_require__(4);\n\n      const compatibilityParams = Object.create(null);\n      {\n        (function checkFontFace() {\n          if (_is_node.isNodeJS) {\n            compatibilityParams.disableFontFace = true;\n          }\n        })();\n      }\n      const apiCompatibilityParams = Object.freeze(compatibilityParams);\n      exports.apiCompatibilityParams = apiCompatibilityParams;\n      /***/\n    },\n    /* 10 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.CanvasGraphics = void 0;\n\n      var _util = __w_pdfjs_require__(2);\n\n      var _pattern_helper = __w_pdfjs_require__(11);\n\n      var MIN_FONT_SIZE = 16;\n      var MAX_FONT_SIZE = 100;\n      var MAX_GROUP_SIZE = 4096;\n      var MIN_WIDTH_FACTOR = 0.65;\n      var COMPILE_TYPE3_GLYPHS = true;\n      var MAX_SIZE_TO_COMPILE = 1000;\n      var FULL_CHUNK_HEIGHT = 16;\n\n      function addContextCurrentTransform(ctx) {\n        if (!ctx.mozCurrentTransform) {\n          ctx._originalSave = ctx.save;\n          ctx._originalRestore = ctx.restore;\n          ctx._originalRotate = ctx.rotate;\n          ctx._originalScale = ctx.scale;\n          ctx._originalTranslate = ctx.translate;\n          ctx._originalTransform = ctx.transform;\n          ctx._originalSetTransform = ctx.setTransform;\n          ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];\n          ctx._transformStack = [];\n          Object.defineProperty(ctx, "mozCurrentTransform", {\n            get: function getCurrentTransform() {\n              return this._transformMatrix;\n            }\n          });\n          Object.defineProperty(ctx, "mozCurrentTransformInverse", {\n            get: function getCurrentTransformInverse() {\n              var m = this._transformMatrix;\n              var a = m[0],\n                  b = m[1],\n                  c = m[2],\n                  d = m[3],\n                  e = m[4],\n                  f = m[5];\n              var ad_bc = a * d - b * c;\n              var bc_ad = b * c - a * d;\n              return [d / ad_bc, b / bc_ad, c / bc_ad, a / ad_bc, (d * e - c * f) / bc_ad, (b * e - a * f) / ad_bc];\n            }\n          });\n\n          ctx.save = function ctxSave() {\n            var old = this._transformMatrix;\n\n            this._transformStack.push(old);\n\n            this._transformMatrix = old.slice(0, 6);\n\n            this._originalSave();\n          };\n\n          ctx.restore = function ctxRestore() {\n            var prev = this._transformStack.pop();\n\n            if (prev) {\n              this._transformMatrix = prev;\n\n              this._originalRestore();\n            }\n          };\n\n          ctx.translate = function ctxTranslate(x, y) {\n            var m = this._transformMatrix;\n            m[4] = m[0] * x + m[2] * y + m[4];\n            m[5] = m[1] * x + m[3] * y + m[5];\n\n            this._originalTranslate(x, y);\n          };\n\n          ctx.scale = function ctxScale(x, y) {\n            var m = this._transformMatrix;\n            m[0] = m[0] * x;\n            m[1] = m[1] * x;\n            m[2] = m[2] * y;\n            m[3] = m[3] * y;\n\n            this._originalScale(x, y);\n          };\n\n          ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n            var m = this._transformMatrix;\n            this._transformMatrix = [m[0] * a + m[2] * b, m[1] * a + m[3] * b, m[0] * c + m[2] * d, m[1] * c + m[3] * d, m[0] * e + m[2] * f + m[4], m[1] * e + m[3] * f + m[5]];\n\n            ctx._originalTransform(a, b, c, d, e, f);\n          };\n\n          ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n            this._transformMatrix = [a, b, c, d, e, f];\n\n            ctx._originalSetTransform(a, b, c, d, e, f);\n          };\n\n          ctx.rotate = function ctxRotate(angle) {\n            var cosValue = Math.cos(angle);\n            var sinValue = Math.sin(angle);\n            var m = this._transformMatrix;\n            this._transformMatrix = [m[0] * cosValue + m[2] * sinValue, m[1] * cosValue + m[3] * sinValue, m[0] * -sinValue + m[2] * cosValue, m[1] * -sinValue + m[3] * cosValue, m[4], m[5]];\n\n            this._originalRotate(angle);\n          };\n        }\n      }\n\n      var CachedCanvases = function CachedCanvasesClosure() {\n        function CachedCanvases(canvasFactory) {\n          this.canvasFactory = canvasFactory;\n          this.cache = Object.create(null);\n        }\n\n        CachedCanvases.prototype = {\n          getCanvas: function CachedCanvases_getCanvas(id, width, height, trackTransform) {\n            var canvasEntry;\n\n            if (this.cache[id] !== undefined) {\n              canvasEntry = this.cache[id];\n              this.canvasFactory.reset(canvasEntry, width, height);\n              canvasEntry.context.setTransform(1, 0, 0, 1, 0, 0);\n            } else {\n              canvasEntry = this.canvasFactory.create(width, height);\n              this.cache[id] = canvasEntry;\n            }\n\n            if (trackTransform) {\n              addContextCurrentTransform(canvasEntry.context);\n            }\n\n            return canvasEntry;\n          },\n\n          clear() {\n            for (var id in this.cache) {\n              var canvasEntry = this.cache[id];\n              this.canvasFactory.destroy(canvasEntry);\n              delete this.cache[id];\n            }\n          }\n\n        };\n        return CachedCanvases;\n      }();\n\n      function compileType3Glyph(imgData) {\n        var POINT_TO_PROCESS_LIMIT = 1000;\n        var width = imgData.width,\n            height = imgData.height;\n        var i,\n            j,\n            j0,\n            width1 = width + 1;\n        var points = new Uint8Array(width1 * (height + 1));\n        var POINT_TYPES = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]);\n        var lineSize = width + 7 & ~7,\n            data0 = imgData.data;\n        var data = new Uint8Array(lineSize * height),\n            pos = 0,\n            ii;\n\n        for (i = 0, ii = data0.length; i < ii; i++) {\n          var mask = 128,\n              elem = data0[i];\n\n          while (mask > 0) {\n            data[pos++] = elem & mask ? 0 : 255;\n            mask >>= 1;\n          }\n        }\n\n        var count = 0;\n        pos = 0;\n\n        if (data[pos] !== 0) {\n          points[0] = 1;\n          ++count;\n        }\n\n        for (j = 1; j < width; j++) {\n          if (data[pos] !== data[pos + 1]) {\n            points[j] = data[pos] ? 2 : 1;\n            ++count;\n          }\n\n          pos++;\n        }\n\n        if (data[pos] !== 0) {\n          points[j] = 2;\n          ++count;\n        }\n\n        for (i = 1; i < height; i++) {\n          pos = i * lineSize;\n          j0 = i * width1;\n\n          if (data[pos - lineSize] !== data[pos]) {\n            points[j0] = data[pos] ? 1 : 8;\n            ++count;\n          }\n\n          var sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\n\n          for (j = 1; j < width; j++) {\n            sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);\n\n            if (POINT_TYPES[sum]) {\n              points[j0 + j] = POINT_TYPES[sum];\n              ++count;\n            }\n\n            pos++;\n          }\n\n          if (data[pos - lineSize] !== data[pos]) {\n            points[j0 + j] = data[pos] ? 2 : 4;\n            ++count;\n          }\n\n          if (count > POINT_TO_PROCESS_LIMIT) {\n            return null;\n          }\n        }\n\n        pos = lineSize * (height - 1);\n        j0 = i * width1;\n\n        if (data[pos] !== 0) {\n          points[j0] = 8;\n          ++count;\n        }\n\n        for (j = 1; j < width; j++) {\n          if (data[pos] !== data[pos + 1]) {\n            points[j0 + j] = data[pos] ? 4 : 8;\n            ++count;\n          }\n\n          pos++;\n        }\n\n        if (data[pos] !== 0) {\n          points[j0 + j] = 4;\n          ++count;\n        }\n\n        if (count > POINT_TO_PROCESS_LIMIT) {\n          return null;\n        }\n\n        var steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);\n        var outlines = [];\n\n        for (i = 0; count && i <= height; i++) {\n          var p = i * width1;\n          var end = p + width;\n\n          while (p < end && !points[p]) {\n            p++;\n          }\n\n          if (p === end) {\n            continue;\n          }\n\n          var coords = [p % width1, i];\n          var type = points[p],\n              p0 = p,\n              pp;\n\n          do {\n            var step = steps[type];\n\n            do {\n              p += step;\n            } while (!points[p]);\n\n            pp = points[p];\n\n            if (pp !== 5 && pp !== 10) {\n              type = pp;\n              points[p] = 0;\n            } else {\n              type = pp & 0x33 * type >> 4;\n              points[p] &= type >> 2 | type << 2;\n            }\n\n            coords.push(p % width1);\n            coords.push(p / width1 | 0);\n\n            if (!points[p]) {\n              --count;\n            }\n          } while (p0 !== p);\n\n          outlines.push(coords);\n          --i;\n        }\n\n        var drawOutline = function (c) {\n          c.save();\n          c.scale(1 / width, -1 / height);\n          c.translate(0, -height);\n          c.beginPath();\n\n          for (let k = 0, kk = outlines.length; k < kk; k++) {\n            var o = outlines[k];\n            c.moveTo(o[0], o[1]);\n\n            for (let l = 2, ll = o.length; l < ll; l += 2) {\n              c.lineTo(o[l], o[l + 1]);\n            }\n          }\n\n          c.fill();\n          c.beginPath();\n          c.restore();\n        };\n\n        return drawOutline;\n      }\n\n      var CanvasExtraState = function CanvasExtraStateClosure() {\n        function CanvasExtraState() {\n          this.alphaIsShape = false;\n          this.fontSize = 0;\n          this.fontSizeScale = 1;\n          this.textMatrix = _util.IDENTITY_MATRIX;\n          this.textMatrixScale = 1;\n          this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n          this.leading = 0;\n          this.x = 0;\n          this.y = 0;\n          this.lineX = 0;\n          this.lineY = 0;\n          this.charSpacing = 0;\n          this.wordSpacing = 0;\n          this.textHScale = 1;\n          this.textRenderingMode = _util.TextRenderingMode.FILL;\n          this.textRise = 0;\n          this.fillColor = "#000000";\n          this.strokeColor = "#000000";\n          this.patternFill = false;\n          this.fillAlpha = 1;\n          this.strokeAlpha = 1;\n          this.lineWidth = 1;\n          this.activeSMask = null;\n          this.resumeSMaskCtx = null;\n          this.transferMaps = null;\n        }\n\n        CanvasExtraState.prototype = {\n          clone: function CanvasExtraState_clone() {\n            return Object.create(this);\n          },\n          setCurrentPoint: function CanvasExtraState_setCurrentPoint(x, y) {\n            this.x = x;\n            this.y = y;\n          }\n        };\n        return CanvasExtraState;\n      }();\n\n      var CanvasGraphics = function CanvasGraphicsClosure() {\n        var EXECUTION_TIME = 15;\n        var EXECUTION_STEPS = 10;\n\n        function CanvasGraphics(canvasCtx, commonObjs, objs, canvasFactory, webGLContext, imageLayer, optionalContentConfig) {\n          this.ctx = canvasCtx;\n          this.current = new CanvasExtraState();\n          this.stateStack = [];\n          this.pendingClip = null;\n          this.pendingEOFill = false;\n          this.res = null;\n          this.xobjs = null;\n          this.commonObjs = commonObjs;\n          this.objs = objs;\n          this.canvasFactory = canvasFactory;\n          this.webGLContext = webGLContext;\n          this.imageLayer = imageLayer;\n          this.groupStack = [];\n          this.processingType3 = null;\n          this.baseTransform = null;\n          this.baseTransformStack = [];\n          this.groupLevel = 0;\n          this.smaskStack = [];\n          this.smaskCounter = 0;\n          this.tempSMask = null;\n          this.contentVisible = true;\n          this.markedContentStack = [];\n          this.optionalContentConfig = optionalContentConfig;\n          this.cachedCanvases = new CachedCanvases(this.canvasFactory);\n\n          if (canvasCtx) {\n            addContextCurrentTransform(canvasCtx);\n          }\n\n          this._cachedGetSinglePixelWidth = null;\n        }\n\n        function putBinaryImageData(ctx, imgData, transferMaps = null) {\n          if (typeof ImageData !== "undefined" && imgData instanceof ImageData) {\n            ctx.putImageData(imgData, 0, 0);\n            return;\n          }\n\n          var height = imgData.height,\n              width = imgData.width;\n          var partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n          var fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n          var totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n          var chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n          var srcPos = 0,\n              destPos;\n          var src = imgData.data;\n          var dest = chunkImgData.data;\n          var i, j, thisChunkHeight, elemsInThisChunk;\n          let transferMapRed, transferMapGreen, transferMapBlue, transferMapGray;\n\n          if (transferMaps) {\n            switch (transferMaps.length) {\n              case 1:\n                transferMapRed = transferMaps[0];\n                transferMapGreen = transferMaps[0];\n                transferMapBlue = transferMaps[0];\n                transferMapGray = transferMaps[0];\n                break;\n\n              case 4:\n                transferMapRed = transferMaps[0];\n                transferMapGreen = transferMaps[1];\n                transferMapBlue = transferMaps[2];\n                transferMapGray = transferMaps[3];\n                break;\n            }\n          }\n\n          if (imgData.kind === _util.ImageKind.GRAYSCALE_1BPP) {\n            var srcLength = src.byteLength;\n            var dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\n            var dest32DataLength = dest32.length;\n            var fullSrcDiff = width + 7 >> 3;\n            var white = 0xffffffff;\n            var black = _util.IsLittleEndianCached.value ? 0xff000000 : 0x000000ff;\n\n            if (transferMapGray) {\n              if (transferMapGray[0] === 0xff && transferMapGray[0xff] === 0) {\n                [white, black] = [black, white];\n              }\n            }\n\n            for (i = 0; i < totalChunks; i++) {\n              thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n              destPos = 0;\n\n              for (j = 0; j < thisChunkHeight; j++) {\n                var srcDiff = srcLength - srcPos;\n                let k = 0;\n                var kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\n                var kEndUnrolled = kEnd & ~7;\n                var mask = 0;\n                var srcByte = 0;\n\n                for (; k < kEndUnrolled; k += 8) {\n                  srcByte = src[srcPos++];\n                  dest32[destPos++] = srcByte & 128 ? white : black;\n                  dest32[destPos++] = srcByte & 64 ? white : black;\n                  dest32[destPos++] = srcByte & 32 ? white : black;\n                  dest32[destPos++] = srcByte & 16 ? white : black;\n                  dest32[destPos++] = srcByte & 8 ? white : black;\n                  dest32[destPos++] = srcByte & 4 ? white : black;\n                  dest32[destPos++] = srcByte & 2 ? white : black;\n                  dest32[destPos++] = srcByte & 1 ? white : black;\n                }\n\n                for (; k < kEnd; k++) {\n                  if (mask === 0) {\n                    srcByte = src[srcPos++];\n                    mask = 128;\n                  }\n\n                  dest32[destPos++] = srcByte & mask ? white : black;\n                  mask >>= 1;\n                }\n              }\n\n              while (destPos < dest32DataLength) {\n                dest32[destPos++] = 0;\n              }\n\n              ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n            }\n          } else if (imgData.kind === _util.ImageKind.RGBA_32BPP) {\n            const hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);\n            j = 0;\n            elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\n\n            for (i = 0; i < fullChunks; i++) {\n              dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n              srcPos += elemsInThisChunk;\n\n              if (hasTransferMaps) {\n                for (let k = 0; k < elemsInThisChunk; k += 4) {\n                  if (transferMapRed) {\n                    dest[k + 0] = transferMapRed[dest[k + 0]];\n                  }\n\n                  if (transferMapGreen) {\n                    dest[k + 1] = transferMapGreen[dest[k + 1]];\n                  }\n\n                  if (transferMapBlue) {\n                    dest[k + 2] = transferMapBlue[dest[k + 2]];\n                  }\n                }\n              }\n\n              ctx.putImageData(chunkImgData, 0, j);\n              j += FULL_CHUNK_HEIGHT;\n            }\n\n            if (i < totalChunks) {\n              elemsInThisChunk = width * partialChunkHeight * 4;\n              dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n\n              if (hasTransferMaps) {\n                for (let k = 0; k < elemsInThisChunk; k += 4) {\n                  if (transferMapRed) {\n                    dest[k + 0] = transferMapRed[dest[k + 0]];\n                  }\n\n                  if (transferMapGreen) {\n                    dest[k + 1] = transferMapGreen[dest[k + 1]];\n                  }\n\n                  if (transferMapBlue) {\n                    dest[k + 2] = transferMapBlue[dest[k + 2]];\n                  }\n                }\n              }\n\n              ctx.putImageData(chunkImgData, 0, j);\n            }\n          } else if (imgData.kind === _util.ImageKind.RGB_24BPP) {\n            const hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);\n            thisChunkHeight = FULL_CHUNK_HEIGHT;\n            elemsInThisChunk = width * thisChunkHeight;\n\n            for (i = 0; i < totalChunks; i++) {\n              if (i >= fullChunks) {\n                thisChunkHeight = partialChunkHeight;\n                elemsInThisChunk = width * thisChunkHeight;\n              }\n\n              destPos = 0;\n\n              for (j = elemsInThisChunk; j--;) {\n                dest[destPos++] = src[srcPos++];\n                dest[destPos++] = src[srcPos++];\n                dest[destPos++] = src[srcPos++];\n                dest[destPos++] = 255;\n              }\n\n              if (hasTransferMaps) {\n                for (let k = 0; k < destPos; k += 4) {\n                  if (transferMapRed) {\n                    dest[k + 0] = transferMapRed[dest[k + 0]];\n                  }\n\n                  if (transferMapGreen) {\n                    dest[k + 1] = transferMapGreen[dest[k + 1]];\n                  }\n\n                  if (transferMapBlue) {\n                    dest[k + 2] = transferMapBlue[dest[k + 2]];\n                  }\n                }\n              }\n\n              ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n            }\n          } else {\n            throw new Error(`bad image kind: ${imgData.kind}`);\n          }\n        }\n\n        function putBinaryImageMask(ctx, imgData) {\n          var height = imgData.height,\n              width = imgData.width;\n          var partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n          var fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n          var totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n          var chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n          var srcPos = 0;\n          var src = imgData.data;\n          var dest = chunkImgData.data;\n\n          for (var i = 0; i < totalChunks; i++) {\n            var thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n            var destPos = 3;\n\n            for (var j = 0; j < thisChunkHeight; j++) {\n              var mask = 0;\n\n              for (var k = 0; k < width; k++) {\n                if (!mask) {\n                  var elem = src[srcPos++];\n                  mask = 128;\n                }\n\n                dest[destPos] = elem & mask ? 0 : 255;\n                destPos += 4;\n                mask >>= 1;\n              }\n            }\n\n            ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n          }\n        }\n\n        function copyCtxState(sourceCtx, destCtx) {\n          var properties = ["strokeStyle", "fillStyle", "fillRule", "globalAlpha", "lineWidth", "lineCap", "lineJoin", "miterLimit", "globalCompositeOperation", "font"];\n\n          for (var i = 0, ii = properties.length; i < ii; i++) {\n            var property = properties[i];\n\n            if (sourceCtx[property] !== undefined) {\n              destCtx[property] = sourceCtx[property];\n            }\n          }\n\n          if (sourceCtx.setLineDash !== undefined) {\n            destCtx.setLineDash(sourceCtx.getLineDash());\n            destCtx.lineDashOffset = sourceCtx.lineDashOffset;\n          }\n        }\n\n        function resetCtxToDefault(ctx) {\n          ctx.strokeStyle = "#000000";\n          ctx.fillStyle = "#000000";\n          ctx.fillRule = "nonzero";\n          ctx.globalAlpha = 1;\n          ctx.lineWidth = 1;\n          ctx.lineCap = "butt";\n          ctx.lineJoin = "miter";\n          ctx.miterLimit = 10;\n          ctx.globalCompositeOperation = "source-over";\n          ctx.font = "10px sans-serif";\n\n          if (ctx.setLineDash !== undefined) {\n            ctx.setLineDash([]);\n            ctx.lineDashOffset = 0;\n          }\n        }\n\n        function composeSMaskBackdrop(bytes, r0, g0, b0) {\n          var length = bytes.length;\n\n          for (var i = 3; i < length; i += 4) {\n            var alpha = bytes[i];\n\n            if (alpha === 0) {\n              bytes[i - 3] = r0;\n              bytes[i - 2] = g0;\n              bytes[i - 1] = b0;\n            } else if (alpha < 255) {\n              var alpha_ = 255 - alpha;\n              bytes[i - 3] = bytes[i - 3] * alpha + r0 * alpha_ >> 8;\n              bytes[i - 2] = bytes[i - 2] * alpha + g0 * alpha_ >> 8;\n              bytes[i - 1] = bytes[i - 1] * alpha + b0 * alpha_ >> 8;\n            }\n          }\n        }\n\n        function composeSMaskAlpha(maskData, layerData, transferMap) {\n          var length = maskData.length;\n          var scale = 1 / 255;\n\n          for (var i = 3; i < length; i += 4) {\n            var alpha = transferMap ? transferMap[maskData[i]] : maskData[i];\n            layerData[i] = layerData[i] * alpha * scale | 0;\n          }\n        }\n\n        function composeSMaskLuminosity(maskData, layerData, transferMap) {\n          var length = maskData.length;\n\n          for (var i = 3; i < length; i += 4) {\n            var y = maskData[i - 3] * 77 + maskData[i - 2] * 152 + maskData[i - 1] * 28;\n            layerData[i] = transferMap ? layerData[i] * transferMap[y >> 8] >> 8 : layerData[i] * y >> 16;\n          }\n        }\n\n        function genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap) {\n          var hasBackdrop = !!backdrop;\n          var r0 = hasBackdrop ? backdrop[0] : 0;\n          var g0 = hasBackdrop ? backdrop[1] : 0;\n          var b0 = hasBackdrop ? backdrop[2] : 0;\n          var composeFn;\n\n          if (subtype === "Luminosity") {\n            composeFn = composeSMaskLuminosity;\n          } else {\n            composeFn = composeSMaskAlpha;\n          }\n\n          var PIXELS_TO_PROCESS = 1048576;\n          var chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));\n\n          for (var row = 0; row < height; row += chunkSize) {\n            var chunkHeight = Math.min(chunkSize, height - row);\n            var maskData = maskCtx.getImageData(0, row, width, chunkHeight);\n            var layerData = layerCtx.getImageData(0, row, width, chunkHeight);\n\n            if (hasBackdrop) {\n              composeSMaskBackdrop(maskData.data, r0, g0, b0);\n            }\n\n            composeFn(maskData.data, layerData.data, transferMap);\n            maskCtx.putImageData(layerData, 0, row);\n          }\n        }\n\n        function composeSMask(ctx, smask, layerCtx, webGLContext) {\n          var mask = smask.canvas;\n          var maskCtx = smask.context;\n          ctx.setTransform(smask.scaleX, 0, 0, smask.scaleY, smask.offsetX, smask.offsetY);\n          var backdrop = smask.backdrop || null;\n\n          if (!smask.transferMap && webGLContext.isEnabled) {\n            const composed = webGLContext.composeSMask({\n              layer: layerCtx.canvas,\n              mask,\n              properties: {\n                subtype: smask.subtype,\n                backdrop\n              }\n            });\n            ctx.setTransform(1, 0, 0, 1, 0, 0);\n            ctx.drawImage(composed, smask.offsetX, smask.offsetY);\n            return;\n          }\n\n          genericComposeSMask(maskCtx, layerCtx, mask.width, mask.height, smask.subtype, backdrop, smask.transferMap);\n          ctx.drawImage(mask, 0, 0);\n        }\n\n        var LINE_CAP_STYLES = ["butt", "round", "square"];\n        var LINE_JOIN_STYLES = ["miter", "round", "bevel"];\n        var NORMAL_CLIP = {};\n        var EO_CLIP = {};\n        CanvasGraphics.prototype = {\n          beginDrawing({\n            transform,\n            viewport,\n            transparency = false,\n            background = null\n          }) {\n            var width = this.ctx.canvas.width;\n            var height = this.ctx.canvas.height;\n            this.ctx.save();\n            this.ctx.fillStyle = background || "rgb(255, 255, 255)";\n            this.ctx.fillRect(0, 0, width, height);\n            this.ctx.restore();\n\n            if (transparency) {\n              var transparentCanvas = this.cachedCanvases.getCanvas("transparent", width, height, true);\n              this.compositeCtx = this.ctx;\n              this.transparentCanvas = transparentCanvas.canvas;\n              this.ctx = transparentCanvas.context;\n              this.ctx.save();\n              this.ctx.transform.apply(this.ctx, this.compositeCtx.mozCurrentTransform);\n            }\n\n            this.ctx.save();\n            resetCtxToDefault(this.ctx);\n\n            if (transform) {\n              this.ctx.transform.apply(this.ctx, transform);\n            }\n\n            this.ctx.transform.apply(this.ctx, viewport.transform);\n            this.baseTransform = this.ctx.mozCurrentTransform.slice();\n\n            if (this.imageLayer) {\n              this.imageLayer.beginLayout();\n            }\n          },\n\n          executeOperatorList: function CanvasGraphics_executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {\n            var argsArray = operatorList.argsArray;\n            var fnArray = operatorList.fnArray;\n            var i = executionStartIdx || 0;\n            var argsArrayLen = argsArray.length;\n\n            if (argsArrayLen === i) {\n              return i;\n            }\n\n            var chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === "function";\n            var endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\n            var steps = 0;\n            var commonObjs = this.commonObjs;\n            var objs = this.objs;\n            var fnId;\n\n            while (true) {\n              if (stepper !== undefined && i === stepper.nextBreakPoint) {\n                stepper.breakIt(i, continueCallback);\n                return i;\n              }\n\n              fnId = fnArray[i];\n\n              if (fnId !== _util.OPS.dependency) {\n                this[fnId].apply(this, argsArray[i]);\n              } else {\n                for (const depObjId of argsArray[i]) {\n                  const objsPool = depObjId.startsWith("g_") ? commonObjs : objs;\n\n                  if (!objsPool.has(depObjId)) {\n                    objsPool.get(depObjId, continueCallback);\n                    return i;\n                  }\n                }\n              }\n\n              i++;\n\n              if (i === argsArrayLen) {\n                return i;\n              }\n\n              if (chunkOperations && ++steps > EXECUTION_STEPS) {\n                if (Date.now() > endTime) {\n                  continueCallback();\n                  return i;\n                }\n\n                steps = 0;\n              }\n            }\n          },\n          endDrawing: function CanvasGraphics_endDrawing() {\n            if (this.current.activeSMask !== null) {\n              this.endSMaskGroup();\n            }\n\n            this.ctx.restore();\n\n            if (this.transparentCanvas) {\n              this.ctx = this.compositeCtx;\n              this.ctx.save();\n              this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n              this.ctx.drawImage(this.transparentCanvas, 0, 0);\n              this.ctx.restore();\n              this.transparentCanvas = null;\n            }\n\n            this.cachedCanvases.clear();\n            this.webGLContext.clear();\n\n            if (this.imageLayer) {\n              this.imageLayer.endLayout();\n            }\n          },\n          setLineWidth: function CanvasGraphics_setLineWidth(width) {\n            this.current.lineWidth = width;\n            this.ctx.lineWidth = width;\n          },\n          setLineCap: function CanvasGraphics_setLineCap(style) {\n            this.ctx.lineCap = LINE_CAP_STYLES[style];\n          },\n          setLineJoin: function CanvasGraphics_setLineJoin(style) {\n            this.ctx.lineJoin = LINE_JOIN_STYLES[style];\n          },\n          setMiterLimit: function CanvasGraphics_setMiterLimit(limit) {\n            this.ctx.miterLimit = limit;\n          },\n          setDash: function CanvasGraphics_setDash(dashArray, dashPhase) {\n            var ctx = this.ctx;\n\n            if (ctx.setLineDash !== undefined) {\n              ctx.setLineDash(dashArray);\n              ctx.lineDashOffset = dashPhase;\n            }\n          },\n\n          setRenderingIntent(intent) {},\n\n          setFlatness(flatness) {},\n\n          setGState: function CanvasGraphics_setGState(states) {\n            for (var i = 0, ii = states.length; i < ii; i++) {\n              var state = states[i];\n              var key = state[0];\n              var value = state[1];\n\n              switch (key) {\n                case "LW":\n                  this.setLineWidth(value);\n                  break;\n\n                case "LC":\n                  this.setLineCap(value);\n                  break;\n\n                case "LJ":\n                  this.setLineJoin(value);\n                  break;\n\n                case "ML":\n                  this.setMiterLimit(value);\n                  break;\n\n                case "D":\n                  this.setDash(value[0], value[1]);\n                  break;\n\n                case "RI":\n                  this.setRenderingIntent(value);\n                  break;\n\n                case "FL":\n                  this.setFlatness(value);\n                  break;\n\n                case "Font":\n                  this.setFont(value[0], value[1]);\n                  break;\n\n                case "CA":\n                  this.current.strokeAlpha = state[1];\n                  break;\n\n                case "ca":\n                  this.current.fillAlpha = state[1];\n                  this.ctx.globalAlpha = state[1];\n                  break;\n\n                case "BM":\n                  this.ctx.globalCompositeOperation = value;\n                  break;\n\n                case "SMask":\n                  if (this.current.activeSMask) {\n                    if (this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1].activeSMask === this.current.activeSMask) {\n                      this.suspendSMaskGroup();\n                    } else {\n                      this.endSMaskGroup();\n                    }\n                  }\n\n                  this.current.activeSMask = value ? this.tempSMask : null;\n\n                  if (this.current.activeSMask) {\n                    this.beginSMaskGroup();\n                  }\n\n                  this.tempSMask = null;\n                  break;\n\n                case "TR":\n                  this.current.transferMaps = value;\n              }\n            }\n          },\n          beginSMaskGroup: function CanvasGraphics_beginSMaskGroup() {\n            var activeSMask = this.current.activeSMask;\n            var drawnWidth = activeSMask.canvas.width;\n            var drawnHeight = activeSMask.canvas.height;\n            var cacheId = "smaskGroupAt" + this.groupLevel;\n            var scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);\n            var currentCtx = this.ctx;\n            var currentTransform = currentCtx.mozCurrentTransform;\n            this.ctx.save();\n            var groupCtx = scratchCanvas.context;\n            groupCtx.scale(1 / activeSMask.scaleX, 1 / activeSMask.scaleY);\n            groupCtx.translate(-activeSMask.offsetX, -activeSMask.offsetY);\n            groupCtx.transform.apply(groupCtx, currentTransform);\n            activeSMask.startTransformInverse = groupCtx.mozCurrentTransformInverse;\n            copyCtxState(currentCtx, groupCtx);\n            this.ctx = groupCtx;\n            this.setGState([["BM", "source-over"], ["ca", 1], ["CA", 1]]);\n            this.groupStack.push(currentCtx);\n            this.groupLevel++;\n          },\n          suspendSMaskGroup: function CanvasGraphics_endSMaskGroup() {\n            var groupCtx = this.ctx;\n            this.groupLevel--;\n            this.ctx = this.groupStack.pop();\n            composeSMask(this.ctx, this.current.activeSMask, groupCtx, this.webGLContext);\n            this.ctx.restore();\n            this.ctx.save();\n            copyCtxState(groupCtx, this.ctx);\n            this.current.resumeSMaskCtx = groupCtx;\n\n            var deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);\n\n            this.ctx.transform.apply(this.ctx, deltaTransform);\n            groupCtx.save();\n            groupCtx.setTransform(1, 0, 0, 1, 0, 0);\n            groupCtx.clearRect(0, 0, groupCtx.canvas.width, groupCtx.canvas.height);\n            groupCtx.restore();\n          },\n          resumeSMaskGroup: function CanvasGraphics_endSMaskGroup() {\n            var groupCtx = this.current.resumeSMaskCtx;\n            var currentCtx = this.ctx;\n            this.ctx = groupCtx;\n            this.groupStack.push(currentCtx);\n            this.groupLevel++;\n          },\n          endSMaskGroup: function CanvasGraphics_endSMaskGroup() {\n            var groupCtx = this.ctx;\n            this.groupLevel--;\n            this.ctx = this.groupStack.pop();\n            composeSMask(this.ctx, this.current.activeSMask, groupCtx, this.webGLContext);\n            this.ctx.restore();\n            copyCtxState(groupCtx, this.ctx);\n\n            var deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);\n\n            this.ctx.transform.apply(this.ctx, deltaTransform);\n          },\n          save: function CanvasGraphics_save() {\n            this.ctx.save();\n            var old = this.current;\n            this.stateStack.push(old);\n            this.current = old.clone();\n            this.current.resumeSMaskCtx = null;\n          },\n          restore: function CanvasGraphics_restore() {\n            if (this.current.resumeSMaskCtx) {\n              this.resumeSMaskGroup();\n            }\n\n            if (this.current.activeSMask !== null && (this.stateStack.length === 0 || this.stateStack[this.stateStack.length - 1].activeSMask !== this.current.activeSMask)) {\n              this.endSMaskGroup();\n            }\n\n            if (this.stateStack.length !== 0) {\n              this.current = this.stateStack.pop();\n              this.ctx.restore();\n              this.pendingClip = null;\n              this._cachedGetSinglePixelWidth = null;\n            }\n          },\n          transform: function CanvasGraphics_transform(a, b, c, d, e, f) {\n            this.ctx.transform(a, b, c, d, e, f);\n            this._cachedGetSinglePixelWidth = null;\n          },\n          constructPath: function CanvasGraphics_constructPath(ops, args) {\n            var ctx = this.ctx;\n            var current = this.current;\n            var x = current.x,\n                y = current.y;\n\n            for (var i = 0, j = 0, ii = ops.length; i < ii; i++) {\n              switch (ops[i] | 0) {\n                case _util.OPS.rectangle:\n                  x = args[j++];\n                  y = args[j++];\n                  var width = args[j++];\n                  var height = args[j++];\n\n                  if (width === 0 && ctx.lineWidth < this.getSinglePixelWidth()) {\n                    width = this.getSinglePixelWidth();\n                  }\n\n                  if (height === 0 && ctx.lineWidth < this.getSinglePixelWidth()) {\n                    height = this.getSinglePixelWidth();\n                  }\n\n                  var xw = x + width;\n                  var yh = y + height;\n                  ctx.moveTo(x, y);\n                  ctx.lineTo(xw, y);\n                  ctx.lineTo(xw, yh);\n                  ctx.lineTo(x, yh);\n                  ctx.lineTo(x, y);\n                  ctx.closePath();\n                  break;\n\n                case _util.OPS.moveTo:\n                  x = args[j++];\n                  y = args[j++];\n                  ctx.moveTo(x, y);\n                  break;\n\n                case _util.OPS.lineTo:\n                  x = args[j++];\n                  y = args[j++];\n                  ctx.lineTo(x, y);\n                  break;\n\n                case _util.OPS.curveTo:\n                  x = args[j + 4];\n                  y = args[j + 5];\n                  ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);\n                  j += 6;\n                  break;\n\n                case _util.OPS.curveTo2:\n                  ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);\n                  x = args[j + 2];\n                  y = args[j + 3];\n                  j += 4;\n                  break;\n\n                case _util.OPS.curveTo3:\n                  x = args[j + 2];\n                  y = args[j + 3];\n                  ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\n                  j += 4;\n                  break;\n\n                case _util.OPS.closePath:\n                  ctx.closePath();\n                  break;\n              }\n            }\n\n            current.setCurrentPoint(x, y);\n          },\n          closePath: function CanvasGraphics_closePath() {\n            this.ctx.closePath();\n          },\n          stroke: function CanvasGraphics_stroke(consumePath) {\n            consumePath = typeof consumePath !== "undefined" ? consumePath : true;\n            var ctx = this.ctx;\n            var strokeColor = this.current.strokeColor;\n            ctx.globalAlpha = this.current.strokeAlpha;\n\n            if (this.contentVisible) {\n              if (strokeColor && strokeColor.hasOwnProperty("type") && strokeColor.type === "Pattern") {\n                ctx.save();\n                const transform = ctx.mozCurrentTransform;\n\n                const scale = _util.Util.singularValueDecompose2dScale(transform)[0];\n\n                ctx.strokeStyle = strokeColor.getPattern(ctx, this);\n                ctx.lineWidth = Math.max(this.getSinglePixelWidth() * MIN_WIDTH_FACTOR, this.current.lineWidth * scale);\n                ctx.stroke();\n                ctx.restore();\n              } else {\n                ctx.lineWidth = Math.max(this.getSinglePixelWidth() * MIN_WIDTH_FACTOR, this.current.lineWidth);\n                ctx.stroke();\n              }\n            }\n\n            if (consumePath) {\n              this.consumePath();\n            }\n\n            ctx.globalAlpha = this.current.fillAlpha;\n          },\n          closeStroke: function CanvasGraphics_closeStroke() {\n            this.closePath();\n            this.stroke();\n          },\n          fill: function CanvasGraphics_fill(consumePath) {\n            consumePath = typeof consumePath !== "undefined" ? consumePath : true;\n            var ctx = this.ctx;\n            var fillColor = this.current.fillColor;\n            var isPatternFill = this.current.patternFill;\n            var needRestore = false;\n\n            if (isPatternFill) {\n              ctx.save();\n\n              if (this.baseTransform) {\n                ctx.setTransform.apply(ctx, this.baseTransform);\n              }\n\n              ctx.fillStyle = fillColor.getPattern(ctx, this);\n              needRestore = true;\n            }\n\n            if (this.contentVisible) {\n              if (this.pendingEOFill) {\n                ctx.fill("evenodd");\n                this.pendingEOFill = false;\n              } else {\n                ctx.fill();\n              }\n            }\n\n            if (needRestore) {\n              ctx.restore();\n            }\n\n            if (consumePath) {\n              this.consumePath();\n            }\n          },\n          eoFill: function CanvasGraphics_eoFill() {\n            this.pendingEOFill = true;\n            this.fill();\n          },\n          fillStroke: function CanvasGraphics_fillStroke() {\n            this.fill(false);\n            this.stroke(false);\n            this.consumePath();\n          },\n          eoFillStroke: function CanvasGraphics_eoFillStroke() {\n            this.pendingEOFill = true;\n            this.fillStroke();\n          },\n          closeFillStroke: function CanvasGraphics_closeFillStroke() {\n            this.closePath();\n            this.fillStroke();\n          },\n          closeEOFillStroke: function CanvasGraphics_closeEOFillStroke() {\n            this.pendingEOFill = true;\n            this.closePath();\n            this.fillStroke();\n          },\n          endPath: function CanvasGraphics_endPath() {\n            this.consumePath();\n          },\n          clip: function CanvasGraphics_clip() {\n            this.pendingClip = NORMAL_CLIP;\n          },\n          eoClip: function CanvasGraphics_eoClip() {\n            this.pendingClip = EO_CLIP;\n          },\n          beginText: function CanvasGraphics_beginText() {\n            this.current.textMatrix = _util.IDENTITY_MATRIX;\n            this.current.textMatrixScale = 1;\n            this.current.x = this.current.lineX = 0;\n            this.current.y = this.current.lineY = 0;\n          },\n          endText: function CanvasGraphics_endText() {\n            var paths = this.pendingTextPaths;\n            var ctx = this.ctx;\n\n            if (paths === undefined) {\n              ctx.beginPath();\n              return;\n            }\n\n            ctx.save();\n            ctx.beginPath();\n\n            for (var i = 0; i < paths.length; i++) {\n              var path = paths[i];\n              ctx.setTransform.apply(ctx, path.transform);\n              ctx.translate(path.x, path.y);\n              path.addToPath(ctx, path.fontSize);\n            }\n\n            ctx.restore();\n            ctx.clip();\n            ctx.beginPath();\n            delete this.pendingTextPaths;\n          },\n          setCharSpacing: function CanvasGraphics_setCharSpacing(spacing) {\n            this.current.charSpacing = spacing;\n          },\n          setWordSpacing: function CanvasGraphics_setWordSpacing(spacing) {\n            this.current.wordSpacing = spacing;\n          },\n          setHScale: function CanvasGraphics_setHScale(scale) {\n            this.current.textHScale = scale / 100;\n          },\n          setLeading: function CanvasGraphics_setLeading(leading) {\n            this.current.leading = -leading;\n          },\n          setFont: function CanvasGraphics_setFont(fontRefName, size) {\n            var fontObj = this.commonObjs.get(fontRefName);\n            var current = this.current;\n\n            if (!fontObj) {\n              throw new Error(`Can\'t find font for ${fontRefName}`);\n            }\n\n            current.fontMatrix = fontObj.fontMatrix ? fontObj.fontMatrix : _util.FONT_IDENTITY_MATRIX;\n\n            if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\n              (0, _util.warn)("Invalid font matrix for font " + fontRefName);\n            }\n\n            if (size < 0) {\n              size = -size;\n              current.fontDirection = -1;\n            } else {\n              current.fontDirection = 1;\n            }\n\n            this.current.font = fontObj;\n            this.current.fontSize = size;\n\n            if (fontObj.isType3Font) {\n              return;\n            }\n\n            var name = fontObj.loadedName || "sans-serif";\n            let bold = "normal";\n\n            if (fontObj.black) {\n              bold = "900";\n            } else if (fontObj.bold) {\n              bold = "bold";\n            }\n\n            var italic = fontObj.italic ? "italic" : "normal";\n            var typeface = `"${name}", ${fontObj.fallbackName}`;\n            let browserFontSize = size;\n\n            if (size < MIN_FONT_SIZE) {\n              browserFontSize = MIN_FONT_SIZE;\n            } else if (size > MAX_FONT_SIZE) {\n              browserFontSize = MAX_FONT_SIZE;\n            }\n\n            this.current.fontSizeScale = size / browserFontSize;\n            this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;\n          },\n          setTextRenderingMode: function CanvasGraphics_setTextRenderingMode(mode) {\n            this.current.textRenderingMode = mode;\n          },\n          setTextRise: function CanvasGraphics_setTextRise(rise) {\n            this.current.textRise = rise;\n          },\n          moveText: function CanvasGraphics_moveText(x, y) {\n            this.current.x = this.current.lineX += x;\n            this.current.y = this.current.lineY += y;\n          },\n          setLeadingMoveText: function CanvasGraphics_setLeadingMoveText(x, y) {\n            this.setLeading(-y);\n            this.moveText(x, y);\n          },\n          setTextMatrix: function CanvasGraphics_setTextMatrix(a, b, c, d, e, f) {\n            this.current.textMatrix = [a, b, c, d, e, f];\n            this.current.textMatrixScale = Math.sqrt(a * a + b * b);\n            this.current.x = this.current.lineX = 0;\n            this.current.y = this.current.lineY = 0;\n          },\n          nextLine: function CanvasGraphics_nextLine() {\n            this.moveText(0, this.current.leading);\n          },\n\n          paintChar(character, x, y, patternTransform) {\n            var ctx = this.ctx;\n            var current = this.current;\n            var font = current.font;\n            var textRenderingMode = current.textRenderingMode;\n            var fontSize = current.fontSize / current.fontSizeScale;\n            var fillStrokeMode = textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n            var isAddToPathSet = !!(textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);\n            const patternFill = current.patternFill && !font.missingFile;\n            var addToPath;\n\n            if (font.disableFontFace || isAddToPathSet || patternFill) {\n              addToPath = font.getPathGenerator(this.commonObjs, character);\n            }\n\n            if (font.disableFontFace || patternFill) {\n              ctx.save();\n              ctx.translate(x, y);\n              ctx.beginPath();\n              addToPath(ctx, fontSize);\n\n              if (patternTransform) {\n                ctx.setTransform.apply(ctx, patternTransform);\n              }\n\n              if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                ctx.fill();\n              }\n\n              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                ctx.stroke();\n              }\n\n              ctx.restore();\n            } else {\n              if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                ctx.fillText(character, x, y);\n              }\n\n              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                ctx.strokeText(character, x, y);\n              }\n            }\n\n            if (isAddToPathSet) {\n              var paths = this.pendingTextPaths || (this.pendingTextPaths = []);\n              paths.push({\n                transform: ctx.mozCurrentTransform,\n                x,\n                y,\n                fontSize,\n                addToPath\n              });\n            }\n          },\n\n          get isFontSubpixelAAEnabled() {\n            const {\n              context: ctx\n            } = this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled", 10, 10);\n            ctx.scale(1.5, 1);\n            ctx.fillText("I", 0, 10);\n            var data = ctx.getImageData(0, 0, 10, 10).data;\n            var enabled = false;\n\n            for (var i = 3; i < data.length; i += 4) {\n              if (data[i] > 0 && data[i] < 255) {\n                enabled = true;\n                break;\n              }\n            }\n\n            return (0, _util.shadow)(this, "isFontSubpixelAAEnabled", enabled);\n          },\n\n          showText: function CanvasGraphics_showText(glyphs) {\n            var current = this.current;\n            var font = current.font;\n\n            if (font.isType3Font) {\n              return this.showType3Text(glyphs);\n            }\n\n            var fontSize = current.fontSize;\n\n            if (fontSize === 0) {\n              return undefined;\n            }\n\n            var ctx = this.ctx;\n            var fontSizeScale = current.fontSizeScale;\n            var charSpacing = current.charSpacing;\n            var wordSpacing = current.wordSpacing;\n            var fontDirection = current.fontDirection;\n            var textHScale = current.textHScale * fontDirection;\n            var glyphsLength = glyphs.length;\n            var vertical = font.vertical;\n            var spacingDir = vertical ? 1 : -1;\n            var defaultVMetrics = font.defaultVMetrics;\n            var widthAdvanceScale = fontSize * current.fontMatrix[0];\n            var simpleFillText = current.textRenderingMode === _util.TextRenderingMode.FILL && !font.disableFontFace && !current.patternFill;\n            ctx.save();\n            let patternTransform;\n\n            if (current.patternFill) {\n              ctx.save();\n              const pattern = current.fillColor.getPattern(ctx, this);\n              patternTransform = ctx.mozCurrentTransform;\n              ctx.restore();\n              ctx.fillStyle = pattern;\n            }\n\n            ctx.transform.apply(ctx, current.textMatrix);\n            ctx.translate(current.x, current.y + current.textRise);\n\n            if (fontDirection > 0) {\n              ctx.scale(textHScale, -1);\n            } else {\n              ctx.scale(textHScale, 1);\n            }\n\n            var lineWidth = current.lineWidth;\n            var scale = current.textMatrixScale;\n\n            if (scale === 0 || lineWidth === 0) {\n              var fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n\n              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                this._cachedGetSinglePixelWidth = null;\n                lineWidth = this.getSinglePixelWidth() * MIN_WIDTH_FACTOR;\n              }\n            } else {\n              lineWidth /= scale;\n            }\n\n            if (fontSizeScale !== 1.0) {\n              ctx.scale(fontSizeScale, fontSizeScale);\n              lineWidth /= fontSizeScale;\n            }\n\n            ctx.lineWidth = lineWidth;\n            var x = 0,\n                i;\n\n            for (i = 0; i < glyphsLength; ++i) {\n              var glyph = glyphs[i];\n\n              if ((0, _util.isNum)(glyph)) {\n                x += spacingDir * glyph * fontSize / 1000;\n                continue;\n              }\n\n              var restoreNeeded = false;\n              var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n              var character = glyph.fontChar;\n              var accent = glyph.accent;\n              var scaledX, scaledY, scaledAccentX, scaledAccentY;\n              var width = glyph.width;\n\n              if (vertical) {\n                var vmetric, vx, vy;\n                vmetric = glyph.vmetric || defaultVMetrics;\n                vx = glyph.vmetric ? vmetric[1] : width * 0.5;\n                vx = -vx * widthAdvanceScale;\n                vy = vmetric[2] * widthAdvanceScale;\n                width = vmetric ? -vmetric[0] : width;\n                scaledX = vx / fontSizeScale;\n                scaledY = (x + vy) / fontSizeScale;\n              } else {\n                scaledX = x / fontSizeScale;\n                scaledY = 0;\n              }\n\n              if (font.remeasure && width > 0) {\n                var measuredWidth = ctx.measureText(character).width * 1000 / fontSize * fontSizeScale;\n\n                if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\n                  var characterScaleX = width / measuredWidth;\n                  restoreNeeded = true;\n                  ctx.save();\n                  ctx.scale(characterScaleX, 1);\n                  scaledX /= characterScaleX;\n                } else if (width !== measuredWidth) {\n                  scaledX += (width - measuredWidth) / 2000 * fontSize / fontSizeScale;\n                }\n              }\n\n              if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\n                if (simpleFillText && !accent) {\n                  ctx.fillText(character, scaledX, scaledY);\n                } else {\n                  this.paintChar(character, scaledX, scaledY, patternTransform);\n\n                  if (accent) {\n                    scaledAccentX = scaledX + fontSize * accent.offset.x / fontSizeScale;\n                    scaledAccentY = scaledY - fontSize * accent.offset.y / fontSizeScale;\n                    this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY, patternTransform);\n                  }\n                }\n              }\n\n              var charWidth;\n\n              if (vertical) {\n                charWidth = width * widthAdvanceScale - spacing * fontDirection;\n              } else {\n                charWidth = width * widthAdvanceScale + spacing * fontDirection;\n              }\n\n              x += charWidth;\n\n              if (restoreNeeded) {\n                ctx.restore();\n              }\n            }\n\n            if (vertical) {\n              current.y -= x;\n            } else {\n              current.x += x * textHScale;\n            }\n\n            ctx.restore();\n          },\n          showType3Text: function CanvasGraphics_showType3Text(glyphs) {\n            var ctx = this.ctx;\n            var current = this.current;\n            var font = current.font;\n            var fontSize = current.fontSize;\n            var fontDirection = current.fontDirection;\n            var spacingDir = font.vertical ? 1 : -1;\n            var charSpacing = current.charSpacing;\n            var wordSpacing = current.wordSpacing;\n            var textHScale = current.textHScale * fontDirection;\n            var fontMatrix = current.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n            var glyphsLength = glyphs.length;\n            var isTextInvisible = current.textRenderingMode === _util.TextRenderingMode.INVISIBLE;\n            var i, glyph, width, spacingLength;\n\n            if (isTextInvisible || fontSize === 0) {\n              return;\n            }\n\n            this._cachedGetSinglePixelWidth = null;\n            ctx.save();\n            ctx.transform.apply(ctx, current.textMatrix);\n            ctx.translate(current.x, current.y);\n            ctx.scale(textHScale, fontDirection);\n\n            for (i = 0; i < glyphsLength; ++i) {\n              glyph = glyphs[i];\n\n              if ((0, _util.isNum)(glyph)) {\n                spacingLength = spacingDir * glyph * fontSize / 1000;\n                this.ctx.translate(spacingLength, 0);\n                current.x += spacingLength * textHScale;\n                continue;\n              }\n\n              var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n              var operatorList = font.charProcOperatorList[glyph.operatorListId];\n\n              if (!operatorList) {\n                (0, _util.warn)(`Type3 character "${glyph.operatorListId}" is not available.`);\n                continue;\n              }\n\n              if (this.contentVisible) {\n                this.processingType3 = glyph;\n                this.save();\n                ctx.scale(fontSize, fontSize);\n                ctx.transform.apply(ctx, fontMatrix);\n                this.executeOperatorList(operatorList);\n                this.restore();\n              }\n\n              var transformed = _util.Util.applyTransform([glyph.width, 0], fontMatrix);\n\n              width = transformed[0] * fontSize + spacing;\n              ctx.translate(width, 0);\n              current.x += width * textHScale;\n            }\n\n            ctx.restore();\n            this.processingType3 = null;\n          },\n          setCharWidth: function CanvasGraphics_setCharWidth(xWidth, yWidth) {},\n          setCharWidthAndBounds: function CanvasGraphics_setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {\n            this.ctx.rect(llx, lly, urx - llx, ury - lly);\n            this.clip();\n            this.endPath();\n          },\n          getColorN_Pattern: function CanvasGraphics_getColorN_Pattern(IR) {\n            var pattern;\n\n            if (IR[0] === "TilingPattern") {\n              var color = IR[1];\n              var baseTransform = this.baseTransform || this.ctx.mozCurrentTransform.slice();\n              var canvasGraphicsFactory = {\n                createCanvasGraphics: ctx => {\n                  return new CanvasGraphics(ctx, this.commonObjs, this.objs, this.canvasFactory, this.webGLContext);\n                }\n              };\n              pattern = new _pattern_helper.TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);\n            } else {\n              pattern = (0, _pattern_helper.getShadingPatternFromIR)(IR);\n            }\n\n            return pattern;\n          },\n          setStrokeColorN: function CanvasGraphics_setStrokeColorN() {\n            this.current.strokeColor = this.getColorN_Pattern(arguments);\n          },\n          setFillColorN: function CanvasGraphics_setFillColorN() {\n            this.current.fillColor = this.getColorN_Pattern(arguments);\n            this.current.patternFill = true;\n          },\n          setStrokeRGBColor: function CanvasGraphics_setStrokeRGBColor(r, g, b) {\n            var color = _util.Util.makeCssRgb(r, g, b);\n\n            this.ctx.strokeStyle = color;\n            this.current.strokeColor = color;\n          },\n          setFillRGBColor: function CanvasGraphics_setFillRGBColor(r, g, b) {\n            var color = _util.Util.makeCssRgb(r, g, b);\n\n            this.ctx.fillStyle = color;\n            this.current.fillColor = color;\n            this.current.patternFill = false;\n          },\n          shadingFill: function CanvasGraphics_shadingFill(patternIR) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            var ctx = this.ctx;\n            this.save();\n            var pattern = (0, _pattern_helper.getShadingPatternFromIR)(patternIR);\n            ctx.fillStyle = pattern.getPattern(ctx, this, true);\n            var inv = ctx.mozCurrentTransformInverse;\n\n            if (inv) {\n              var canvas = ctx.canvas;\n              var width = canvas.width;\n              var height = canvas.height;\n\n              var bl = _util.Util.applyTransform([0, 0], inv);\n\n              var br = _util.Util.applyTransform([0, height], inv);\n\n              var ul = _util.Util.applyTransform([width, 0], inv);\n\n              var ur = _util.Util.applyTransform([width, height], inv);\n\n              var x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n              var y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n              var x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n              var y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n              this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n            } else {\n              this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n            }\n\n            this.restore();\n          },\n          beginInlineImage: function CanvasGraphics_beginInlineImage() {\n            (0, _util.unreachable)("Should not call beginInlineImage");\n          },\n          beginImageData: function CanvasGraphics_beginImageData() {\n            (0, _util.unreachable)("Should not call beginImageData");\n          },\n          paintFormXObjectBegin: function CanvasGraphics_paintFormXObjectBegin(matrix, bbox) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.save();\n            this.baseTransformStack.push(this.baseTransform);\n\n            if (Array.isArray(matrix) && matrix.length === 6) {\n              this.transform.apply(this, matrix);\n            }\n\n            this.baseTransform = this.ctx.mozCurrentTransform;\n\n            if (bbox) {\n              var width = bbox[2] - bbox[0];\n              var height = bbox[3] - bbox[1];\n              this.ctx.rect(bbox[0], bbox[1], width, height);\n              this.clip();\n              this.endPath();\n            }\n          },\n          paintFormXObjectEnd: function CanvasGraphics_paintFormXObjectEnd() {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.restore();\n            this.baseTransform = this.baseTransformStack.pop();\n          },\n          beginGroup: function CanvasGraphics_beginGroup(group) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.save();\n            var currentCtx = this.ctx;\n\n            if (!group.isolated) {\n              (0, _util.info)("TODO: Support non-isolated groups.");\n            }\n\n            if (group.knockout) {\n              (0, _util.warn)("Knockout groups not supported.");\n            }\n\n            var currentTransform = currentCtx.mozCurrentTransform;\n\n            if (group.matrix) {\n              currentCtx.transform.apply(currentCtx, group.matrix);\n            }\n\n            if (!group.bbox) {\n              throw new Error("Bounding box is required.");\n            }\n\n            var bounds = _util.Util.getAxialAlignedBoundingBox(group.bbox, currentCtx.mozCurrentTransform);\n\n            var canvasBounds = [0, 0, currentCtx.canvas.width, currentCtx.canvas.height];\n            bounds = _util.Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];\n            var offsetX = Math.floor(bounds[0]);\n            var offsetY = Math.floor(bounds[1]);\n            var drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\n            var drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\n            var scaleX = 1,\n                scaleY = 1;\n\n            if (drawnWidth > MAX_GROUP_SIZE) {\n              scaleX = drawnWidth / MAX_GROUP_SIZE;\n              drawnWidth = MAX_GROUP_SIZE;\n            }\n\n            if (drawnHeight > MAX_GROUP_SIZE) {\n              scaleY = drawnHeight / MAX_GROUP_SIZE;\n              drawnHeight = MAX_GROUP_SIZE;\n            }\n\n            var cacheId = "groupAt" + this.groupLevel;\n\n            if (group.smask) {\n              cacheId += "_smask_" + this.smaskCounter++ % 2;\n            }\n\n            var scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);\n            var groupCtx = scratchCanvas.context;\n            groupCtx.scale(1 / scaleX, 1 / scaleY);\n            groupCtx.translate(-offsetX, -offsetY);\n            groupCtx.transform.apply(groupCtx, currentTransform);\n\n            if (group.smask) {\n              this.smaskStack.push({\n                canvas: scratchCanvas.canvas,\n                context: groupCtx,\n                offsetX,\n                offsetY,\n                scaleX,\n                scaleY,\n                subtype: group.smask.subtype,\n                backdrop: group.smask.backdrop,\n                transferMap: group.smask.transferMap || null,\n                startTransformInverse: null\n              });\n            } else {\n              currentCtx.setTransform(1, 0, 0, 1, 0, 0);\n              currentCtx.translate(offsetX, offsetY);\n              currentCtx.scale(scaleX, scaleY);\n            }\n\n            copyCtxState(currentCtx, groupCtx);\n            this.ctx = groupCtx;\n            this.setGState([["BM", "source-over"], ["ca", 1], ["CA", 1]]);\n            this.groupStack.push(currentCtx);\n            this.groupLevel++;\n            this.current.activeSMask = null;\n          },\n          endGroup: function CanvasGraphics_endGroup(group) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.groupLevel--;\n            var groupCtx = this.ctx;\n            this.ctx = this.groupStack.pop();\n\n            if (this.ctx.imageSmoothingEnabled !== undefined) {\n              this.ctx.imageSmoothingEnabled = false;\n            } else {\n              this.ctx.mozImageSmoothingEnabled = false;\n            }\n\n            if (group.smask) {\n              this.tempSMask = this.smaskStack.pop();\n            } else {\n              this.ctx.drawImage(groupCtx.canvas, 0, 0);\n            }\n\n            this.restore();\n          },\n          beginAnnotations: function CanvasGraphics_beginAnnotations() {\n            this.save();\n\n            if (this.baseTransform) {\n              this.ctx.setTransform.apply(this.ctx, this.baseTransform);\n            }\n          },\n          endAnnotations: function CanvasGraphics_endAnnotations() {\n            this.restore();\n          },\n          beginAnnotation: function CanvasGraphics_beginAnnotation(rect, transform, matrix) {\n            this.save();\n            resetCtxToDefault(this.ctx);\n            this.current = new CanvasExtraState();\n\n            if (Array.isArray(rect) && rect.length === 4) {\n              var width = rect[2] - rect[0];\n              var height = rect[3] - rect[1];\n              this.ctx.rect(rect[0], rect[1], width, height);\n              this.clip();\n              this.endPath();\n            }\n\n            this.transform.apply(this, transform);\n            this.transform.apply(this, matrix);\n          },\n          endAnnotation: function CanvasGraphics_endAnnotation() {\n            this.restore();\n          },\n          paintImageMaskXObject: function CanvasGraphics_paintImageMaskXObject(img) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            var ctx = this.ctx;\n            var width = img.width,\n                height = img.height;\n            var fillColor = this.current.fillColor;\n            var isPatternFill = this.current.patternFill;\n            var glyph = this.processingType3;\n\n            if (COMPILE_TYPE3_GLYPHS && glyph && glyph.compiled === undefined) {\n              if (width <= MAX_SIZE_TO_COMPILE && height <= MAX_SIZE_TO_COMPILE) {\n                glyph.compiled = compileType3Glyph({\n                  data: img.data,\n                  width,\n                  height\n                });\n              } else {\n                glyph.compiled = null;\n              }\n            }\n\n            if (glyph && glyph.compiled) {\n              glyph.compiled(ctx);\n              return;\n            }\n\n            var maskCanvas = this.cachedCanvases.getCanvas("maskCanvas", width, height);\n            var maskCtx = maskCanvas.context;\n            maskCtx.save();\n            putBinaryImageMask(maskCtx, img);\n            maskCtx.globalCompositeOperation = "source-in";\n            maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;\n            maskCtx.fillRect(0, 0, width, height);\n            maskCtx.restore();\n            this.paintInlineImageXObject(maskCanvas.canvas);\n          },\n\n          paintImageMaskXObjectRepeat(imgData, scaleX, skewX = 0, skewY = 0, scaleY, positions) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            var width = imgData.width;\n            var height = imgData.height;\n            var fillColor = this.current.fillColor;\n            var isPatternFill = this.current.patternFill;\n            var maskCanvas = this.cachedCanvases.getCanvas("maskCanvas", width, height);\n            var maskCtx = maskCanvas.context;\n            maskCtx.save();\n            putBinaryImageMask(maskCtx, imgData);\n            maskCtx.globalCompositeOperation = "source-in";\n            maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;\n            maskCtx.fillRect(0, 0, width, height);\n            maskCtx.restore();\n            var ctx = this.ctx;\n\n            for (var i = 0, ii = positions.length; i < ii; i += 2) {\n              ctx.save();\n              ctx.transform(scaleX, skewX, skewY, scaleY, positions[i], positions[i + 1]);\n              ctx.scale(1, -1);\n              ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n              ctx.restore();\n            }\n          },\n\n          paintImageMaskXObjectGroup: function CanvasGraphics_paintImageMaskXObjectGroup(images) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            var ctx = this.ctx;\n            var fillColor = this.current.fillColor;\n            var isPatternFill = this.current.patternFill;\n\n            for (var i = 0, ii = images.length; i < ii; i++) {\n              var image = images[i];\n              var width = image.width,\n                  height = image.height;\n              var maskCanvas = this.cachedCanvases.getCanvas("maskCanvas", width, height);\n              var maskCtx = maskCanvas.context;\n              maskCtx.save();\n              putBinaryImageMask(maskCtx, image);\n              maskCtx.globalCompositeOperation = "source-in";\n              maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;\n              maskCtx.fillRect(0, 0, width, height);\n              maskCtx.restore();\n              ctx.save();\n              ctx.transform.apply(ctx, image.transform);\n              ctx.scale(1, -1);\n              ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n              ctx.restore();\n            }\n          },\n          paintImageXObject: function CanvasGraphics_paintImageXObject(objId) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const imgData = objId.startsWith("g_") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n            if (!imgData) {\n              (0, _util.warn)("Dependent image isn\'t ready yet");\n              return;\n            }\n\n            this.paintInlineImageXObject(imgData);\n          },\n          paintImageXObjectRepeat: function CanvasGraphics_paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const imgData = objId.startsWith("g_") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n            if (!imgData) {\n              (0, _util.warn)("Dependent image isn\'t ready yet");\n              return;\n            }\n\n            var width = imgData.width;\n            var height = imgData.height;\n            var map = [];\n\n            for (var i = 0, ii = positions.length; i < ii; i += 2) {\n              map.push({\n                transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],\n                x: 0,\n                y: 0,\n                w: width,\n                h: height\n              });\n            }\n\n            this.paintInlineImageXObjectGroup(imgData, map);\n          },\n          paintInlineImageXObject: function CanvasGraphics_paintInlineImageXObject(imgData) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            var width = imgData.width;\n            var height = imgData.height;\n            var ctx = this.ctx;\n            this.save();\n            ctx.scale(1 / width, -1 / height);\n            var currentTransform = ctx.mozCurrentTransformInverse;\n            var a = currentTransform[0],\n                b = currentTransform[1];\n            var widthScale = Math.max(Math.sqrt(a * a + b * b), 1);\n            var c = currentTransform[2],\n                d = currentTransform[3];\n            var heightScale = Math.max(Math.sqrt(c * c + d * d), 1);\n            var imgToPaint, tmpCanvas;\n\n            if (typeof HTMLElement === "function" && imgData instanceof HTMLElement || !imgData.data) {\n              imgToPaint = imgData;\n            } else {\n              tmpCanvas = this.cachedCanvases.getCanvas("inlineImage", width, height);\n              var tmpCtx = tmpCanvas.context;\n              putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n              imgToPaint = tmpCanvas.canvas;\n            }\n\n            var paintWidth = width,\n                paintHeight = height;\n            var tmpCanvasId = "prescale1";\n\n            while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {\n              var newWidth = paintWidth,\n                  newHeight = paintHeight;\n\n              if (widthScale > 2 && paintWidth > 1) {\n                newWidth = Math.ceil(paintWidth / 2);\n                widthScale /= paintWidth / newWidth;\n              }\n\n              if (heightScale > 2 && paintHeight > 1) {\n                newHeight = Math.ceil(paintHeight / 2);\n                heightScale /= paintHeight / newHeight;\n              }\n\n              tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);\n              tmpCtx = tmpCanvas.context;\n              tmpCtx.clearRect(0, 0, newWidth, newHeight);\n              tmpCtx.drawImage(imgToPaint, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);\n              imgToPaint = tmpCanvas.canvas;\n              paintWidth = newWidth;\n              paintHeight = newHeight;\n              tmpCanvasId = tmpCanvasId === "prescale1" ? "prescale2" : "prescale1";\n            }\n\n            ctx.drawImage(imgToPaint, 0, 0, paintWidth, paintHeight, 0, -height, width, height);\n\n            if (this.imageLayer) {\n              var position = this.getCanvasPosition(0, -height);\n              this.imageLayer.appendImage({\n                imgData,\n                left: position[0],\n                top: position[1],\n                width: width / currentTransform[0],\n                height: height / currentTransform[3]\n              });\n            }\n\n            this.restore();\n          },\n          paintInlineImageXObjectGroup: function CanvasGraphics_paintInlineImageXObjectGroup(imgData, map) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            var ctx = this.ctx;\n            var w = imgData.width;\n            var h = imgData.height;\n            var tmpCanvas = this.cachedCanvases.getCanvas("inlineImage", w, h);\n            var tmpCtx = tmpCanvas.context;\n            putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n\n            for (var i = 0, ii = map.length; i < ii; i++) {\n              var entry = map[i];\n              ctx.save();\n              ctx.transform.apply(ctx, entry.transform);\n              ctx.scale(1, -1);\n              ctx.drawImage(tmpCanvas.canvas, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);\n\n              if (this.imageLayer) {\n                var position = this.getCanvasPosition(entry.x, entry.y);\n                this.imageLayer.appendImage({\n                  imgData,\n                  left: position[0],\n                  top: position[1],\n                  width: w,\n                  height: h\n                });\n              }\n\n              ctx.restore();\n            }\n          },\n          paintSolidColorImageMask: function CanvasGraphics_paintSolidColorImageMask() {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.ctx.fillRect(0, 0, 1, 1);\n          },\n          markPoint: function CanvasGraphics_markPoint(tag) {},\n          markPointProps: function CanvasGraphics_markPointProps(tag, properties) {},\n          beginMarkedContent: function CanvasGraphics_beginMarkedContent(tag) {\n            this.markedContentStack.push({\n              visible: true\n            });\n          },\n          beginMarkedContentProps: function CanvasGraphics_beginMarkedContentProps(tag, properties) {\n            if (tag === "OC") {\n              this.markedContentStack.push({\n                visible: this.optionalContentConfig.isVisible(properties)\n              });\n            } else {\n              this.markedContentStack.push({\n                visible: true\n              });\n            }\n\n            this.contentVisible = this.isContentVisible();\n          },\n          endMarkedContent: function CanvasGraphics_endMarkedContent() {\n            this.markedContentStack.pop();\n            this.contentVisible = this.isContentVisible();\n          },\n          beginCompat: function CanvasGraphics_beginCompat() {},\n          endCompat: function CanvasGraphics_endCompat() {},\n          consumePath: function CanvasGraphics_consumePath() {\n            var ctx = this.ctx;\n\n            if (this.pendingClip) {\n              if (this.pendingClip === EO_CLIP) {\n                ctx.clip("evenodd");\n              } else {\n                ctx.clip();\n              }\n\n              this.pendingClip = null;\n            }\n\n            ctx.beginPath();\n          },\n\n          getSinglePixelWidth(scale) {\n            if (this._cachedGetSinglePixelWidth === null) {\n              const inverse = this.ctx.mozCurrentTransformInverse;\n              this._cachedGetSinglePixelWidth = Math.sqrt(Math.max(inverse[0] * inverse[0] + inverse[1] * inverse[1], inverse[2] * inverse[2] + inverse[3] * inverse[3]));\n            }\n\n            return this._cachedGetSinglePixelWidth;\n          },\n\n          getCanvasPosition: function CanvasGraphics_getCanvasPosition(x, y) {\n            var transform = this.ctx.mozCurrentTransform;\n            return [transform[0] * x + transform[2] * y + transform[4], transform[1] * x + transform[3] * y + transform[5]];\n          },\n          isContentVisible: function CanvasGraphics_isContentVisible() {\n            for (let i = this.markedContentStack.length - 1; i >= 0; i--) {\n              if (!this.markedContentStack[i].visible) {\n                return false;\n              }\n            }\n\n            return true;\n          }\n        };\n\n        for (var op in _util.OPS) {\n          CanvasGraphics.prototype[_util.OPS[op]] = CanvasGraphics.prototype[op];\n        }\n\n        return CanvasGraphics;\n      }();\n\n      exports.CanvasGraphics = CanvasGraphics;\n      /***/\n    },\n    /* 11 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.getShadingPatternFromIR = getShadingPatternFromIR;\n      exports.TilingPattern = void 0;\n\n      var _util = __w_pdfjs_require__(2);\n\n      var ShadingIRs = {};\n\n      function applyBoundingBox(ctx, bbox) {\n        if (!bbox || typeof Path2D === "undefined") {\n          return;\n        }\n\n        const width = bbox[2] - bbox[0];\n        const height = bbox[3] - bbox[1];\n        const region = new Path2D();\n        region.rect(bbox[0], bbox[1], width, height);\n        ctx.clip(region);\n      }\n\n      ShadingIRs.RadialAxial = {\n        fromIR: function RadialAxial_fromIR(raw) {\n          var type = raw[1];\n          var bbox = raw[2];\n          var colorStops = raw[3];\n          var p0 = raw[4];\n          var p1 = raw[5];\n          var r0 = raw[6];\n          var r1 = raw[7];\n          return {\n            type: "Pattern",\n            getPattern: function RadialAxial_getPattern(ctx) {\n              applyBoundingBox(ctx, bbox);\n              var grad;\n\n              if (type === "axial") {\n                grad = ctx.createLinearGradient(p0[0], p0[1], p1[0], p1[1]);\n              } else if (type === "radial") {\n                grad = ctx.createRadialGradient(p0[0], p0[1], r0, p1[0], p1[1], r1);\n              }\n\n              for (var i = 0, ii = colorStops.length; i < ii; ++i) {\n                var c = colorStops[i];\n                grad.addColorStop(c[0], c[1]);\n              }\n\n              return grad;\n            }\n          };\n        }\n      };\n\n      var createMeshCanvas = function createMeshCanvasClosure() {\n        function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\n          var coords = context.coords,\n              colors = context.colors;\n          var bytes = data.data,\n              rowSize = data.width * 4;\n          var tmp;\n\n          if (coords[p1 + 1] > coords[p2 + 1]) {\n            tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n            tmp = c1;\n            c1 = c2;\n            c2 = tmp;\n          }\n\n          if (coords[p2 + 1] > coords[p3 + 1]) {\n            tmp = p2;\n            p2 = p3;\n            p3 = tmp;\n            tmp = c2;\n            c2 = c3;\n            c3 = tmp;\n          }\n\n          if (coords[p1 + 1] > coords[p2 + 1]) {\n            tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n            tmp = c1;\n            c1 = c2;\n            c2 = tmp;\n          }\n\n          var x1 = (coords[p1] + context.offsetX) * context.scaleX;\n          var y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\n          var x2 = (coords[p2] + context.offsetX) * context.scaleX;\n          var y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\n          var x3 = (coords[p3] + context.offsetX) * context.scaleX;\n          var y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\n\n          if (y1 >= y3) {\n            return;\n          }\n\n          var c1r = colors[c1],\n              c1g = colors[c1 + 1],\n              c1b = colors[c1 + 2];\n          var c2r = colors[c2],\n              c2g = colors[c2 + 1],\n              c2b = colors[c2 + 2];\n          var c3r = colors[c3],\n              c3g = colors[c3 + 1],\n              c3b = colors[c3 + 2];\n          var minY = Math.round(y1),\n              maxY = Math.round(y3);\n          var xa, car, cag, cab;\n          var xb, cbr, cbg, cbb;\n\n          for (var y = minY; y <= maxY; y++) {\n            if (y < y2) {\n              let k;\n\n              if (y < y1) {\n                k = 0;\n              } else if (y1 === y2) {\n                k = 1;\n              } else {\n                k = (y1 - y) / (y1 - y2);\n              }\n\n              xa = x1 - (x1 - x2) * k;\n              car = c1r - (c1r - c2r) * k;\n              cag = c1g - (c1g - c2g) * k;\n              cab = c1b - (c1b - c2b) * k;\n            } else {\n              let k;\n\n              if (y > y3) {\n                k = 1;\n              } else if (y2 === y3) {\n                k = 0;\n              } else {\n                k = (y2 - y) / (y2 - y3);\n              }\n\n              xa = x2 - (x2 - x3) * k;\n              car = c2r - (c2r - c3r) * k;\n              cag = c2g - (c2g - c3g) * k;\n              cab = c2b - (c2b - c3b) * k;\n            }\n\n            let k;\n\n            if (y < y1) {\n              k = 0;\n            } else if (y > y3) {\n              k = 1;\n            } else {\n              k = (y1 - y) / (y1 - y3);\n            }\n\n            xb = x1 - (x1 - x3) * k;\n            cbr = c1r - (c1r - c3r) * k;\n            cbg = c1g - (c1g - c3g) * k;\n            cbb = c1b - (c1b - c3b) * k;\n            var x1_ = Math.round(Math.min(xa, xb));\n            var x2_ = Math.round(Math.max(xa, xb));\n            var j = rowSize * y + x1_ * 4;\n\n            for (var x = x1_; x <= x2_; x++) {\n              k = (xa - x) / (xa - xb);\n\n              if (k < 0) {\n                k = 0;\n              } else if (k > 1) {\n                k = 1;\n              }\n\n              bytes[j++] = car - (car - cbr) * k | 0;\n              bytes[j++] = cag - (cag - cbg) * k | 0;\n              bytes[j++] = cab - (cab - cbb) * k | 0;\n              bytes[j++] = 255;\n            }\n          }\n        }\n\n        function drawFigure(data, figure, context) {\n          var ps = figure.coords;\n          var cs = figure.colors;\n          var i, ii;\n\n          switch (figure.type) {\n            case "lattice":\n              var verticesPerRow = figure.verticesPerRow;\n              var rows = Math.floor(ps.length / verticesPerRow) - 1;\n              var cols = verticesPerRow - 1;\n\n              for (i = 0; i < rows; i++) {\n                var q = i * verticesPerRow;\n\n                for (var j = 0; j < cols; j++, q++) {\n                  drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);\n                  drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);\n                }\n              }\n\n              break;\n\n            case "triangles":\n              for (i = 0, ii = ps.length; i < ii; i += 3) {\n                drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);\n              }\n\n              break;\n\n            default:\n              throw new Error("illegal figure");\n          }\n        }\n\n        function createMeshCanvas(bounds, combinesScale, coords, colors, figures, backgroundColor, cachedCanvases, webGLContext) {\n          var EXPECTED_SCALE = 1.1;\n          var MAX_PATTERN_SIZE = 3000;\n          var BORDER_SIZE = 2;\n          var offsetX = Math.floor(bounds[0]);\n          var offsetY = Math.floor(bounds[1]);\n          var boundsWidth = Math.ceil(bounds[2]) - offsetX;\n          var boundsHeight = Math.ceil(bounds[3]) - offsetY;\n          var width = Math.min(Math.ceil(Math.abs(boundsWidth * combinesScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n          var height = Math.min(Math.ceil(Math.abs(boundsHeight * combinesScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n          var scaleX = boundsWidth / width;\n          var scaleY = boundsHeight / height;\n          var context = {\n            coords,\n            colors,\n            offsetX: -offsetX,\n            offsetY: -offsetY,\n            scaleX: 1 / scaleX,\n            scaleY: 1 / scaleY\n          };\n          var paddedWidth = width + BORDER_SIZE * 2;\n          var paddedHeight = height + BORDER_SIZE * 2;\n          var canvas, tmpCanvas, i, ii;\n\n          if (webGLContext.isEnabled) {\n            canvas = webGLContext.drawFigures({\n              width,\n              height,\n              backgroundColor,\n              figures,\n              context\n            });\n            tmpCanvas = cachedCanvases.getCanvas("mesh", paddedWidth, paddedHeight, false);\n            tmpCanvas.context.drawImage(canvas, BORDER_SIZE, BORDER_SIZE);\n            canvas = tmpCanvas.canvas;\n          } else {\n            tmpCanvas = cachedCanvases.getCanvas("mesh", paddedWidth, paddedHeight, false);\n            var tmpCtx = tmpCanvas.context;\n            var data = tmpCtx.createImageData(width, height);\n\n            if (backgroundColor) {\n              var bytes = data.data;\n\n              for (i = 0, ii = bytes.length; i < ii; i += 4) {\n                bytes[i] = backgroundColor[0];\n                bytes[i + 1] = backgroundColor[1];\n                bytes[i + 2] = backgroundColor[2];\n                bytes[i + 3] = 255;\n              }\n            }\n\n            for (i = 0; i < figures.length; i++) {\n              drawFigure(data, figures[i], context);\n            }\n\n            tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\n            canvas = tmpCanvas.canvas;\n          }\n\n          return {\n            canvas,\n            offsetX: offsetX - BORDER_SIZE * scaleX,\n            offsetY: offsetY - BORDER_SIZE * scaleY,\n            scaleX,\n            scaleY\n          };\n        }\n\n        return createMeshCanvas;\n      }();\n\n      ShadingIRs.Mesh = {\n        fromIR: function Mesh_fromIR(raw) {\n          var coords = raw[2];\n          var colors = raw[3];\n          var figures = raw[4];\n          var bounds = raw[5];\n          var matrix = raw[6];\n          var bbox = raw[7];\n          var background = raw[8];\n          return {\n            type: "Pattern",\n            getPattern: function Mesh_getPattern(ctx, owner, shadingFill) {\n              applyBoundingBox(ctx, bbox);\n              var scale;\n\n              if (shadingFill) {\n                scale = _util.Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);\n              } else {\n                scale = _util.Util.singularValueDecompose2dScale(owner.baseTransform);\n\n                if (matrix) {\n                  var matrixScale = _util.Util.singularValueDecompose2dScale(matrix);\n\n                  scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];\n                }\n              }\n\n              var temporaryPatternCanvas = createMeshCanvas(bounds, scale, coords, colors, figures, shadingFill ? null : background, owner.cachedCanvases, owner.webGLContext);\n\n              if (!shadingFill) {\n                ctx.setTransform.apply(ctx, owner.baseTransform);\n\n                if (matrix) {\n                  ctx.transform.apply(ctx, matrix);\n                }\n              }\n\n              ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\n              ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\n              return ctx.createPattern(temporaryPatternCanvas.canvas, "no-repeat");\n            }\n          };\n        }\n      };\n      ShadingIRs.Dummy = {\n        fromIR: function Dummy_fromIR() {\n          return {\n            type: "Pattern",\n            getPattern: function Dummy_fromIR_getPattern() {\n              return "hotpink";\n            }\n          };\n        }\n      };\n\n      function getShadingPatternFromIR(raw) {\n        var shadingIR = ShadingIRs[raw[0]];\n\n        if (!shadingIR) {\n          throw new Error(`Unknown IR type: ${raw[0]}`);\n        }\n\n        return shadingIR.fromIR(raw);\n      }\n\n      var TilingPattern = function TilingPatternClosure() {\n        var PaintType = {\n          COLORED: 1,\n          UNCOLORED: 2\n        };\n        var MAX_PATTERN_SIZE = 3000;\n\n        function TilingPattern(IR, color, ctx, canvasGraphicsFactory, baseTransform) {\n          this.operatorList = IR[2];\n          this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];\n          this.bbox = IR[4];\n          this.xstep = IR[5];\n          this.ystep = IR[6];\n          this.paintType = IR[7];\n          this.tilingType = IR[8];\n          this.color = color;\n          this.canvasGraphicsFactory = canvasGraphicsFactory;\n          this.baseTransform = baseTransform;\n          this.type = "Pattern";\n          this.ctx = ctx;\n        }\n\n        TilingPattern.prototype = {\n          createPatternCanvas: function TilinPattern_createPatternCanvas(owner) {\n            var operatorList = this.operatorList;\n            var bbox = this.bbox;\n            var xstep = this.xstep;\n            var ystep = this.ystep;\n            var paintType = this.paintType;\n            var tilingType = this.tilingType;\n            var color = this.color;\n            var canvasGraphicsFactory = this.canvasGraphicsFactory;\n            (0, _util.info)("TilingType: " + tilingType);\n            var x0 = bbox[0],\n                y0 = bbox[1],\n                x1 = bbox[2],\n                y1 = bbox[3];\n\n            var matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);\n\n            var curMatrixScale = _util.Util.singularValueDecompose2dScale(this.baseTransform);\n\n            var combinedScale = [matrixScale[0] * curMatrixScale[0], matrixScale[1] * curMatrixScale[1]];\n            var dimx = this.getSizeAndScale(xstep, this.ctx.canvas.width, combinedScale[0]);\n            var dimy = this.getSizeAndScale(ystep, this.ctx.canvas.height, combinedScale[1]);\n            var tmpCanvas = owner.cachedCanvases.getCanvas("pattern", dimx.size, dimy.size, true);\n            var tmpCtx = tmpCanvas.context;\n            var graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\n            graphics.groupLevel = owner.groupLevel;\n            this.setFillAndStrokeStyleToContext(graphics, paintType, color);\n            graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\n            graphics.transform(1, 0, 0, 1, -x0, -y0);\n            this.clipBbox(graphics, bbox, x0, y0, x1, y1);\n            graphics.executeOperatorList(operatorList);\n            this.ctx.transform(1, 0, 0, 1, x0, y0);\n            this.ctx.scale(1 / dimx.scale, 1 / dimy.scale);\n            return tmpCanvas.canvas;\n          },\n          getSizeAndScale: function TilingPattern_getSizeAndScale(step, realOutputSize, scale) {\n            step = Math.abs(step);\n            var maxSize = Math.max(MAX_PATTERN_SIZE, realOutputSize);\n            var size = Math.ceil(step * scale);\n\n            if (size >= maxSize) {\n              size = maxSize;\n            } else {\n              scale = size / step;\n            }\n\n            return {\n              scale,\n              size\n            };\n          },\n          clipBbox: function clipBbox(graphics, bbox, x0, y0, x1, y1) {\n            if (Array.isArray(bbox) && bbox.length === 4) {\n              var bboxWidth = x1 - x0;\n              var bboxHeight = y1 - y0;\n              graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\n              graphics.clip();\n              graphics.endPath();\n            }\n          },\n          setFillAndStrokeStyleToContext: function setFillAndStrokeStyleToContext(graphics, paintType, color) {\n            const context = graphics.ctx,\n                  current = graphics.current;\n\n            switch (paintType) {\n              case PaintType.COLORED:\n                var ctx = this.ctx;\n                context.fillStyle = ctx.fillStyle;\n                context.strokeStyle = ctx.strokeStyle;\n                current.fillColor = ctx.fillStyle;\n                current.strokeColor = ctx.strokeStyle;\n                break;\n\n              case PaintType.UNCOLORED:\n                var cssColor = _util.Util.makeCssRgb(color[0], color[1], color[2]);\n\n                context.fillStyle = cssColor;\n                context.strokeStyle = cssColor;\n                current.fillColor = cssColor;\n                current.strokeColor = cssColor;\n                break;\n\n              default:\n                throw new _util.FormatError(`Unsupported paint type: ${paintType}`);\n            }\n          },\n          getPattern: function TilingPattern_getPattern(ctx, owner) {\n            ctx = this.ctx;\n            ctx.setTransform.apply(ctx, this.baseTransform);\n            ctx.transform.apply(ctx, this.matrix);\n            var temporaryPatternCanvas = this.createPatternCanvas(owner);\n            return ctx.createPattern(temporaryPatternCanvas, "repeat");\n          }\n        };\n        return TilingPattern;\n      }();\n\n      exports.TilingPattern = TilingPattern;\n      /***/\n    },\n    /* 12 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.GlobalWorkerOptions = void 0;\n      const GlobalWorkerOptions = Object.create(null);\n      exports.GlobalWorkerOptions = GlobalWorkerOptions;\n      GlobalWorkerOptions.workerPort = GlobalWorkerOptions.workerPort === undefined ? null : GlobalWorkerOptions.workerPort;\n      GlobalWorkerOptions.workerSrc = GlobalWorkerOptions.workerSrc === undefined ? "" : GlobalWorkerOptions.workerSrc;\n      /***/\n    },\n    /* 13 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.MessageHandler = void 0;\n\n      var _util = __w_pdfjs_require__(2);\n\n      const CallbackKind = {\n        UNKNOWN: 0,\n        DATA: 1,\n        ERROR: 2\n      };\n      const StreamKind = {\n        UNKNOWN: 0,\n        CANCEL: 1,\n        CANCEL_COMPLETE: 2,\n        CLOSE: 3,\n        ENQUEUE: 4,\n        ERROR: 5,\n        PULL: 6,\n        PULL_COMPLETE: 7,\n        START_COMPLETE: 8\n      };\n\n      function wrapReason(reason) {\n        if (typeof reason !== "object" || reason === null) {\n          return reason;\n        }\n\n        switch (reason.name) {\n          case "AbortException":\n            return new _util.AbortException(reason.message);\n\n          case "MissingPDFException":\n            return new _util.MissingPDFException(reason.message);\n\n          case "UnexpectedResponseException":\n            return new _util.UnexpectedResponseException(reason.message, reason.status);\n\n          case "UnknownErrorException":\n            return new _util.UnknownErrorException(reason.message, reason.details);\n\n          default:\n            return new _util.UnknownErrorException(reason.message, reason.toString());\n        }\n      }\n\n      class MessageHandler {\n        constructor(sourceName, targetName, comObj) {\n          this.sourceName = sourceName;\n          this.targetName = targetName;\n          this.comObj = comObj;\n          this.callbackId = 1;\n          this.streamId = 1;\n          this.postMessageTransfers = true;\n          this.streamSinks = Object.create(null);\n          this.streamControllers = Object.create(null);\n          this.callbackCapabilities = Object.create(null);\n          this.actionHandler = Object.create(null);\n\n          this._onComObjOnMessage = event => {\n            const data = event.data;\n\n            if (data.targetName !== this.sourceName) {\n              return;\n            }\n\n            if (data.stream) {\n              this._processStreamMessage(data);\n\n              return;\n            }\n\n            if (data.callback) {\n              const callbackId = data.callbackId;\n              const capability = this.callbackCapabilities[callbackId];\n\n              if (!capability) {\n                throw new Error(`Cannot resolve callback ${callbackId}`);\n              }\n\n              delete this.callbackCapabilities[callbackId];\n\n              if (data.callback === CallbackKind.DATA) {\n                capability.resolve(data.data);\n              } else if (data.callback === CallbackKind.ERROR) {\n                capability.reject(wrapReason(data.reason));\n              } else {\n                throw new Error("Unexpected callback case");\n              }\n\n              return;\n            }\n\n            const action = this.actionHandler[data.action];\n\n            if (!action) {\n              throw new Error(`Unknown action from worker: ${data.action}`);\n            }\n\n            if (data.callbackId) {\n              const cbSourceName = this.sourceName;\n              const cbTargetName = data.sourceName;\n              new Promise(function (resolve) {\n                resolve(action(data.data));\n              }).then(function (result) {\n                comObj.postMessage({\n                  sourceName: cbSourceName,\n                  targetName: cbTargetName,\n                  callback: CallbackKind.DATA,\n                  callbackId: data.callbackId,\n                  data: result\n                });\n              }, function (reason) {\n                comObj.postMessage({\n                  sourceName: cbSourceName,\n                  targetName: cbTargetName,\n                  callback: CallbackKind.ERROR,\n                  callbackId: data.callbackId,\n                  reason: wrapReason(reason)\n                });\n              });\n              return;\n            }\n\n            if (data.streamId) {\n              this._createStreamSink(data);\n\n              return;\n            }\n\n            action(data.data);\n          };\n\n          comObj.addEventListener("message", this._onComObjOnMessage);\n        }\n\n        on(actionName, handler) {\n          const ah = this.actionHandler;\n\n          if (ah[actionName]) {\n            throw new Error(`There is already an actionName called "${actionName}"`);\n          }\n\n          ah[actionName] = handler;\n        }\n\n        send(actionName, data, transfers) {\n          this._postMessage({\n            sourceName: this.sourceName,\n            targetName: this.targetName,\n            action: actionName,\n            data\n          }, transfers);\n        }\n\n        sendWithPromise(actionName, data, transfers) {\n          const callbackId = this.callbackId++;\n          const capability = (0, _util.createPromiseCapability)();\n          this.callbackCapabilities[callbackId] = capability;\n\n          try {\n            this._postMessage({\n              sourceName: this.sourceName,\n              targetName: this.targetName,\n              action: actionName,\n              callbackId,\n              data\n            }, transfers);\n          } catch (ex) {\n            capability.reject(ex);\n          }\n\n          return capability.promise;\n        }\n\n        sendWithStream(actionName, data, queueingStrategy, transfers) {\n          const streamId = this.streamId++;\n          const sourceName = this.sourceName;\n          const targetName = this.targetName;\n          const comObj = this.comObj;\n          return new ReadableStream({\n            start: controller => {\n              const startCapability = (0, _util.createPromiseCapability)();\n              this.streamControllers[streamId] = {\n                controller,\n                startCall: startCapability,\n                pullCall: null,\n                cancelCall: null,\n                isClosed: false\n              };\n\n              this._postMessage({\n                sourceName,\n                targetName,\n                action: actionName,\n                streamId,\n                data,\n                desiredSize: controller.desiredSize\n              }, transfers);\n\n              return startCapability.promise;\n            },\n            pull: controller => {\n              const pullCapability = (0, _util.createPromiseCapability)();\n              this.streamControllers[streamId].pullCall = pullCapability;\n              comObj.postMessage({\n                sourceName,\n                targetName,\n                stream: StreamKind.PULL,\n                streamId,\n                desiredSize: controller.desiredSize\n              });\n              return pullCapability.promise;\n            },\n            cancel: reason => {\n              (0, _util.assert)(reason instanceof Error, "cancel must have a valid reason");\n              const cancelCapability = (0, _util.createPromiseCapability)();\n              this.streamControllers[streamId].cancelCall = cancelCapability;\n              this.streamControllers[streamId].isClosed = true;\n              comObj.postMessage({\n                sourceName,\n                targetName,\n                stream: StreamKind.CANCEL,\n                streamId,\n                reason: wrapReason(reason)\n              });\n              return cancelCapability.promise;\n            }\n          }, queueingStrategy);\n        }\n\n        _createStreamSink(data) {\n          const self = this;\n          const action = this.actionHandler[data.action];\n          const streamId = data.streamId;\n          const sourceName = this.sourceName;\n          const targetName = data.sourceName;\n          const comObj = this.comObj;\n          const streamSink = {\n            enqueue(chunk, size = 1, transfers) {\n              if (this.isCancelled) {\n                return;\n              }\n\n              const lastDesiredSize = this.desiredSize;\n              this.desiredSize -= size;\n\n              if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n                this.sinkCapability = (0, _util.createPromiseCapability)();\n                this.ready = this.sinkCapability.promise;\n              }\n\n              self._postMessage({\n                sourceName,\n                targetName,\n                stream: StreamKind.ENQUEUE,\n                streamId,\n                chunk\n              }, transfers);\n            },\n\n            close() {\n              if (this.isCancelled) {\n                return;\n              }\n\n              this.isCancelled = true;\n              comObj.postMessage({\n                sourceName,\n                targetName,\n                stream: StreamKind.CLOSE,\n                streamId\n              });\n              delete self.streamSinks[streamId];\n            },\n\n            error(reason) {\n              (0, _util.assert)(reason instanceof Error, "error must have a valid reason");\n\n              if (this.isCancelled) {\n                return;\n              }\n\n              this.isCancelled = true;\n              comObj.postMessage({\n                sourceName,\n                targetName,\n                stream: StreamKind.ERROR,\n                streamId,\n                reason: wrapReason(reason)\n              });\n            },\n\n            sinkCapability: (0, _util.createPromiseCapability)(),\n            onPull: null,\n            onCancel: null,\n            isCancelled: false,\n            desiredSize: data.desiredSize,\n            ready: null\n          };\n          streamSink.sinkCapability.resolve();\n          streamSink.ready = streamSink.sinkCapability.promise;\n          this.streamSinks[streamId] = streamSink;\n          new Promise(function (resolve) {\n            resolve(action(data.data, streamSink));\n          }).then(function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.START_COMPLETE,\n              streamId,\n              success: true\n            });\n          }, function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.START_COMPLETE,\n              streamId,\n              reason: wrapReason(reason)\n            });\n          });\n        }\n\n        _processStreamMessage(data) {\n          const streamId = data.streamId;\n          const sourceName = this.sourceName;\n          const targetName = data.sourceName;\n          const comObj = this.comObj;\n\n          switch (data.stream) {\n            case StreamKind.START_COMPLETE:\n              if (data.success) {\n                this.streamControllers[streamId].startCall.resolve();\n              } else {\n                this.streamControllers[streamId].startCall.reject(wrapReason(data.reason));\n              }\n\n              break;\n\n            case StreamKind.PULL_COMPLETE:\n              if (data.success) {\n                this.streamControllers[streamId].pullCall.resolve();\n              } else {\n                this.streamControllers[streamId].pullCall.reject(wrapReason(data.reason));\n              }\n\n              break;\n\n            case StreamKind.PULL:\n              if (!this.streamSinks[streamId]) {\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.PULL_COMPLETE,\n                  streamId,\n                  success: true\n                });\n                break;\n              }\n\n              if (this.streamSinks[streamId].desiredSize <= 0 && data.desiredSize > 0) {\n                this.streamSinks[streamId].sinkCapability.resolve();\n              }\n\n              this.streamSinks[streamId].desiredSize = data.desiredSize;\n              const {\n                onPull\n              } = this.streamSinks[data.streamId];\n              new Promise(function (resolve) {\n                resolve(onPull && onPull());\n              }).then(function () {\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.PULL_COMPLETE,\n                  streamId,\n                  success: true\n                });\n              }, function (reason) {\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.PULL_COMPLETE,\n                  streamId,\n                  reason: wrapReason(reason)\n                });\n              });\n              break;\n\n            case StreamKind.ENQUEUE:\n              (0, _util.assert)(this.streamControllers[streamId], "enqueue should have stream controller");\n\n              if (this.streamControllers[streamId].isClosed) {\n                break;\n              }\n\n              this.streamControllers[streamId].controller.enqueue(data.chunk);\n              break;\n\n            case StreamKind.CLOSE:\n              (0, _util.assert)(this.streamControllers[streamId], "close should have stream controller");\n\n              if (this.streamControllers[streamId].isClosed) {\n                break;\n              }\n\n              this.streamControllers[streamId].isClosed = true;\n              this.streamControllers[streamId].controller.close();\n\n              this._deleteStreamController(streamId);\n\n              break;\n\n            case StreamKind.ERROR:\n              (0, _util.assert)(this.streamControllers[streamId], "error should have stream controller");\n              this.streamControllers[streamId].controller.error(wrapReason(data.reason));\n\n              this._deleteStreamController(streamId);\n\n              break;\n\n            case StreamKind.CANCEL_COMPLETE:\n              if (data.success) {\n                this.streamControllers[streamId].cancelCall.resolve();\n              } else {\n                this.streamControllers[streamId].cancelCall.reject(wrapReason(data.reason));\n              }\n\n              this._deleteStreamController(streamId);\n\n              break;\n\n            case StreamKind.CANCEL:\n              if (!this.streamSinks[streamId]) {\n                break;\n              }\n\n              const {\n                onCancel\n              } = this.streamSinks[data.streamId];\n              new Promise(function (resolve) {\n                resolve(onCancel && onCancel(wrapReason(data.reason)));\n              }).then(function () {\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.CANCEL_COMPLETE,\n                  streamId,\n                  success: true\n                });\n              }, function (reason) {\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.CANCEL_COMPLETE,\n                  streamId,\n                  reason: wrapReason(reason)\n                });\n              });\n              this.streamSinks[streamId].sinkCapability.reject(wrapReason(data.reason));\n              this.streamSinks[streamId].isCancelled = true;\n              delete this.streamSinks[streamId];\n              break;\n\n            default:\n              throw new Error("Unexpected stream case");\n          }\n        }\n\n        async _deleteStreamController(streamId) {\n          await Promise.allSettled([this.streamControllers[streamId].startCall, this.streamControllers[streamId].pullCall, this.streamControllers[streamId].cancelCall].map(function (capability) {\n            return capability && capability.promise;\n          }));\n          delete this.streamControllers[streamId];\n        }\n\n        _postMessage(message, transfers) {\n          if (transfers && this.postMessageTransfers) {\n            this.comObj.postMessage(message, transfers);\n          } else {\n            this.comObj.postMessage(message);\n          }\n        }\n\n        destroy() {\n          this.comObj.removeEventListener("message", this._onComObjOnMessage);\n        }\n\n      }\n\n      exports.MessageHandler = MessageHandler;\n      /***/\n    },\n    /* 14 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.Metadata = void 0;\n\n      var _util = __w_pdfjs_require__(2);\n\n      var _xml_parser = __w_pdfjs_require__(15);\n\n      class Metadata {\n        constructor(data) {\n          (0, _util.assert)(typeof data === "string", "Metadata: input is not a string");\n          data = this._repair(data);\n          const parser = new _xml_parser.SimpleXMLParser();\n          const xmlDocument = parser.parseFromString(data);\n          this._metadataMap = new Map();\n\n          if (xmlDocument) {\n            this._parse(xmlDocument);\n          }\n        }\n\n        _repair(data) {\n          return data.replace(/^[^<]+/, "").replace(/>\\\\376\\\\377([^<]+)/g, function (all, codes) {\n            const bytes = codes.replace(/\\\\([0-3])([0-7])([0-7])/g, function (code, d1, d2, d3) {\n              return String.fromCharCode(d1 * 64 + d2 * 8 + d3 * 1);\n            }).replace(/&(amp|apos|gt|lt|quot);/g, function (str, name) {\n              switch (name) {\n                case "amp":\n                  return "&";\n\n                case "apos":\n                  return "\'";\n\n                case "gt":\n                  return ">";\n\n                case "lt":\n                  return "<";\n\n                case "quot":\n                  return \'"\';\n              }\n\n              throw new Error(`_repair: ${name} isn\'t defined.`);\n            });\n            let chars = "";\n\n            for (let i = 0, ii = bytes.length; i < ii; i += 2) {\n              const code = bytes.charCodeAt(i) * 256 + bytes.charCodeAt(i + 1);\n\n              if (code >= 32 && code < 127 && code !== 60 && code !== 62 && code !== 38) {\n                chars += String.fromCharCode(code);\n              } else {\n                chars += "&#x" + (0x10000 + code).toString(16).substring(1) + ";";\n              }\n            }\n\n            return ">" + chars;\n          });\n        }\n\n        _parse(xmlDocument) {\n          let rdf = xmlDocument.documentElement;\n\n          if (rdf.nodeName.toLowerCase() !== "rdf:rdf") {\n            rdf = rdf.firstChild;\n\n            while (rdf && rdf.nodeName.toLowerCase() !== "rdf:rdf") {\n              rdf = rdf.nextSibling;\n            }\n          }\n\n          const nodeName = rdf ? rdf.nodeName.toLowerCase() : null;\n\n          if (!rdf || nodeName !== "rdf:rdf" || !rdf.hasChildNodes()) {\n            return;\n          }\n\n          const children = rdf.childNodes;\n\n          for (let i = 0, ii = children.length; i < ii; i++) {\n            const desc = children[i];\n\n            if (desc.nodeName.toLowerCase() !== "rdf:description") {\n              continue;\n            }\n\n            for (let j = 0, jj = desc.childNodes.length; j < jj; j++) {\n              if (desc.childNodes[j].nodeName.toLowerCase() !== "#text") {\n                const entry = desc.childNodes[j];\n                const name = entry.nodeName.toLowerCase();\n\n                this._metadataMap.set(name, entry.textContent.trim());\n              }\n            }\n          }\n        }\n\n        get(name) {\n          return this._metadataMap.has(name) ? this._metadataMap.get(name) : null;\n        }\n\n        getAll() {\n          return Object.fromEntries(this._metadataMap);\n        }\n\n        has(name) {\n          return this._metadataMap.has(name);\n        }\n\n      }\n\n      exports.Metadata = Metadata;\n      /***/\n    },\n    /* 15 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.SimpleXMLParser = void 0;\n      const XMLParserErrorCode = {\n        NoError: 0,\n        EndOfDocument: -1,\n        UnterminatedCdat: -2,\n        UnterminatedXmlDeclaration: -3,\n        UnterminatedDoctypeDeclaration: -4,\n        UnterminatedComment: -5,\n        MalformedElement: -6,\n        OutOfMemory: -7,\n        UnterminatedAttributeValue: -8,\n        UnterminatedElement: -9,\n        ElementNeverBegun: -10\n      };\n\n      function isWhitespace(s, index) {\n        const ch = s[index];\n        return ch === " " || ch === "\\n" || ch === "\\r" || ch === "\\t";\n      }\n\n      function isWhitespaceString(s) {\n        for (let i = 0, ii = s.length; i < ii; i++) {\n          if (!isWhitespace(s, i)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      class XMLParserBase {\n        _resolveEntities(s) {\n          return s.replace(/&([^;]+);/g, (all, entity) => {\n            if (entity.substring(0, 2) === "#x") {\n              return String.fromCharCode(parseInt(entity.substring(2), 16));\n            } else if (entity.substring(0, 1) === "#") {\n              return String.fromCharCode(parseInt(entity.substring(1), 10));\n            }\n\n            switch (entity) {\n              case "lt":\n                return "<";\n\n              case "gt":\n                return ">";\n\n              case "amp":\n                return "&";\n\n              case "quot":\n                return \'"\';\n            }\n\n            return this.onResolveEntity(entity);\n          });\n        }\n\n        _parseContent(s, start) {\n          const attributes = [];\n          let pos = start;\n\n          function skipWs() {\n            while (pos < s.length && isWhitespace(s, pos)) {\n              ++pos;\n            }\n          }\n\n          while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== ">" && s[pos] !== "/") {\n            ++pos;\n          }\n\n          const name = s.substring(start, pos);\n          skipWs();\n\n          while (pos < s.length && s[pos] !== ">" && s[pos] !== "/" && s[pos] !== "?") {\n            skipWs();\n            let attrName = "",\n                attrValue = "";\n\n            while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== "=") {\n              attrName += s[pos];\n              ++pos;\n            }\n\n            skipWs();\n\n            if (s[pos] !== "=") {\n              return null;\n            }\n\n            ++pos;\n            skipWs();\n            const attrEndChar = s[pos];\n\n            if (attrEndChar !== \'"\' && attrEndChar !== "\'") {\n              return null;\n            }\n\n            const attrEndIndex = s.indexOf(attrEndChar, ++pos);\n\n            if (attrEndIndex < 0) {\n              return null;\n            }\n\n            attrValue = s.substring(pos, attrEndIndex);\n            attributes.push({\n              name: attrName,\n              value: this._resolveEntities(attrValue)\n            });\n            pos = attrEndIndex + 1;\n            skipWs();\n          }\n\n          return {\n            name,\n            attributes,\n            parsed: pos - start\n          };\n        }\n\n        _parseProcessingInstruction(s, start) {\n          let pos = start;\n\n          function skipWs() {\n            while (pos < s.length && isWhitespace(s, pos)) {\n              ++pos;\n            }\n          }\n\n          while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== ">" && s[pos] !== "/") {\n            ++pos;\n          }\n\n          const name = s.substring(start, pos);\n          skipWs();\n          const attrStart = pos;\n\n          while (pos < s.length && (s[pos] !== "?" || s[pos + 1] !== ">")) {\n            ++pos;\n          }\n\n          const value = s.substring(attrStart, pos);\n          return {\n            name,\n            value,\n            parsed: pos - start\n          };\n        }\n\n        parseXml(s) {\n          let i = 0;\n\n          while (i < s.length) {\n            const ch = s[i];\n            let j = i;\n\n            if (ch === "<") {\n              ++j;\n              const ch2 = s[j];\n              let q;\n\n              switch (ch2) {\n                case "/":\n                  ++j;\n                  q = s.indexOf(">", j);\n\n                  if (q < 0) {\n                    this.onError(XMLParserErrorCode.UnterminatedElement);\n                    return;\n                  }\n\n                  this.onEndElement(s.substring(j, q));\n                  j = q + 1;\n                  break;\n\n                case "?":\n                  ++j;\n\n                  const pi = this._parseProcessingInstruction(s, j);\n\n                  if (s.substring(j + pi.parsed, j + pi.parsed + 2) !== "?>") {\n                    this.onError(XMLParserErrorCode.UnterminatedXmlDeclaration);\n                    return;\n                  }\n\n                  this.onPi(pi.name, pi.value);\n                  j += pi.parsed + 2;\n                  break;\n\n                case "!":\n                  if (s.substring(j + 1, j + 3) === "--") {\n                    q = s.indexOf("--\x3e", j + 3);\n\n                    if (q < 0) {\n                      this.onError(XMLParserErrorCode.UnterminatedComment);\n                      return;\n                    }\n\n                    this.onComment(s.substring(j + 3, q));\n                    j = q + 3;\n                  } else if (s.substring(j + 1, j + 8) === "[CDATA[") {\n                    q = s.indexOf("]]>", j + 8);\n\n                    if (q < 0) {\n                      this.onError(XMLParserErrorCode.UnterminatedCdat);\n                      return;\n                    }\n\n                    this.onCdata(s.substring(j + 8, q));\n                    j = q + 3;\n                  } else if (s.substring(j + 1, j + 8) === "DOCTYPE") {\n                    const q2 = s.indexOf("[", j + 8);\n                    let complexDoctype = false;\n                    q = s.indexOf(">", j + 8);\n\n                    if (q < 0) {\n                      this.onError(XMLParserErrorCode.UnterminatedDoctypeDeclaration);\n                      return;\n                    }\n\n                    if (q2 > 0 && q > q2) {\n                      q = s.indexOf("]>", j + 8);\n\n                      if (q < 0) {\n                        this.onError(XMLParserErrorCode.UnterminatedDoctypeDeclaration);\n                        return;\n                      }\n\n                      complexDoctype = true;\n                    }\n\n                    const doctypeContent = s.substring(j + 8, q + (complexDoctype ? 1 : 0));\n                    this.onDoctype(doctypeContent);\n                    j = q + (complexDoctype ? 2 : 1);\n                  } else {\n                    this.onError(XMLParserErrorCode.MalformedElement);\n                    return;\n                  }\n\n                  break;\n\n                default:\n                  const content = this._parseContent(s, j);\n\n                  if (content === null) {\n                    this.onError(XMLParserErrorCode.MalformedElement);\n                    return;\n                  }\n\n                  let isClosed = false;\n\n                  if (s.substring(j + content.parsed, j + content.parsed + 2) === "/>") {\n                    isClosed = true;\n                  } else if (s.substring(j + content.parsed, j + content.parsed + 1) !== ">") {\n                    this.onError(XMLParserErrorCode.UnterminatedElement);\n                    return;\n                  }\n\n                  this.onBeginElement(content.name, content.attributes, isClosed);\n                  j += content.parsed + (isClosed ? 2 : 1);\n                  break;\n              }\n            } else {\n              while (j < s.length && s[j] !== "<") {\n                j++;\n              }\n\n              const text = s.substring(i, j);\n              this.onText(this._resolveEntities(text));\n            }\n\n            i = j;\n          }\n        }\n\n        onResolveEntity(name) {\n          return `&${name};`;\n        }\n\n        onPi(name, value) {}\n\n        onComment(text) {}\n\n        onCdata(text) {}\n\n        onDoctype(doctypeContent) {}\n\n        onText(text) {}\n\n        onBeginElement(name, attributes, isEmpty) {}\n\n        onEndElement(name) {}\n\n        onError(code) {}\n\n      }\n\n      class SimpleDOMNode {\n        constructor(nodeName, nodeValue) {\n          this.nodeName = nodeName;\n          this.nodeValue = nodeValue;\n          Object.defineProperty(this, "parentNode", {\n            value: null,\n            writable: true\n          });\n        }\n\n        get firstChild() {\n          return this.childNodes && this.childNodes[0];\n        }\n\n        get nextSibling() {\n          const childNodes = this.parentNode.childNodes;\n\n          if (!childNodes) {\n            return undefined;\n          }\n\n          const index = childNodes.indexOf(this);\n\n          if (index === -1) {\n            return undefined;\n          }\n\n          return childNodes[index + 1];\n        }\n\n        get textContent() {\n          if (!this.childNodes) {\n            return this.nodeValue || "";\n          }\n\n          return this.childNodes.map(function (child) {\n            return child.textContent;\n          }).join("");\n        }\n\n        hasChildNodes() {\n          return this.childNodes && this.childNodes.length > 0;\n        }\n\n      }\n\n      class SimpleXMLParser extends XMLParserBase {\n        constructor() {\n          super();\n          this._currentFragment = null;\n          this._stack = null;\n          this._errorCode = XMLParserErrorCode.NoError;\n        }\n\n        parseFromString(data) {\n          this._currentFragment = [];\n          this._stack = [];\n          this._errorCode = XMLParserErrorCode.NoError;\n          this.parseXml(data);\n\n          if (this._errorCode !== XMLParserErrorCode.NoError) {\n            return undefined;\n          }\n\n          const [documentElement] = this._currentFragment;\n\n          if (!documentElement) {\n            return undefined;\n          }\n\n          return {\n            documentElement\n          };\n        }\n\n        onResolveEntity(name) {\n          switch (name) {\n            case "apos":\n              return "\'";\n          }\n\n          return super.onResolveEntity(name);\n        }\n\n        onText(text) {\n          if (isWhitespaceString(text)) {\n            return;\n          }\n\n          const node = new SimpleDOMNode("#text", text);\n\n          this._currentFragment.push(node);\n        }\n\n        onCdata(text) {\n          const node = new SimpleDOMNode("#text", text);\n\n          this._currentFragment.push(node);\n        }\n\n        onBeginElement(name, attributes, isEmpty) {\n          const node = new SimpleDOMNode(name);\n          node.childNodes = [];\n\n          this._currentFragment.push(node);\n\n          if (isEmpty) {\n            return;\n          }\n\n          this._stack.push(this._currentFragment);\n\n          this._currentFragment = node.childNodes;\n        }\n\n        onEndElement(name) {\n          this._currentFragment = this._stack.pop() || [];\n          const lastElement = this._currentFragment[this._currentFragment.length - 1];\n\n          if (!lastElement) {\n            return;\n          }\n\n          for (let i = 0, ii = lastElement.childNodes.length; i < ii; i++) {\n            lastElement.childNodes[i].parentNode = lastElement;\n          }\n        }\n\n        onError(code) {\n          this._errorCode = code;\n        }\n\n      }\n\n      exports.SimpleXMLParser = SimpleXMLParser;\n      /***/\n    },\n    /* 16 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.OptionalContentConfig = void 0;\n\n      var _util = __w_pdfjs_require__(2);\n\n      class OptionalContentGroup {\n        constructor(name, intent) {\n          this.visible = true;\n          this.name = name;\n          this.intent = intent;\n        }\n\n      }\n\n      class OptionalContentConfig {\n        constructor(data) {\n          this.name = null;\n          this.creator = null;\n          this._order = null;\n          this._groups = new Map();\n\n          if (data === null) {\n            return;\n          }\n\n          this.name = data.name;\n          this.creator = data.creator;\n          this._order = data.order;\n\n          for (const group of data.groups) {\n            this._groups.set(group.id, new OptionalContentGroup(group.name, group.intent));\n          }\n\n          if (data.baseState === "OFF") {\n            for (const group of this._groups) {\n              group.visible = false;\n            }\n          }\n\n          for (const on of data.on) {\n            this._groups.get(on).visible = true;\n          }\n\n          for (const off of data.off) {\n            this._groups.get(off).visible = false;\n          }\n        }\n\n        isVisible(group) {\n          if (group.type === "OCG") {\n            if (!this._groups.has(group.id)) {\n              (0, _util.warn)(`Optional content group not found: ${group.id}`);\n              return true;\n            }\n\n            return this._groups.get(group.id).visible;\n          } else if (group.type === "OCMD") {\n            if (group.expression) {\n              (0, _util.warn)("Visibility expression not supported yet.");\n            }\n\n            if (!group.policy || group.policy === "AnyOn") {\n              for (const id of group.ids) {\n                if (!this._groups.has(id)) {\n                  (0, _util.warn)(`Optional content group not found: ${id}`);\n                  return true;\n                }\n\n                if (this._groups.get(id).visible) {\n                  return true;\n                }\n              }\n\n              return false;\n            } else if (group.policy === "AllOn") {\n              for (const id of group.ids) {\n                if (!this._groups.has(id)) {\n                  (0, _util.warn)(`Optional content group not found: ${id}`);\n                  return true;\n                }\n\n                if (!this._groups.get(id).visible) {\n                  return false;\n                }\n              }\n\n              return true;\n            } else if (group.policy === "AnyOff") {\n              for (const id of group.ids) {\n                if (!this._groups.has(id)) {\n                  (0, _util.warn)(`Optional content group not found: ${id}`);\n                  return true;\n                }\n\n                if (!this._groups.get(id).visible) {\n                  return true;\n                }\n              }\n\n              return false;\n            } else if (group.policy === "AllOff") {\n              for (const id of group.ids) {\n                if (!this._groups.has(id)) {\n                  (0, _util.warn)(`Optional content group not found: ${id}`);\n                  return true;\n                }\n\n                if (this._groups.get(id).visible) {\n                  return false;\n                }\n              }\n\n              return true;\n            }\n\n            (0, _util.warn)(`Unknown optional content policy ${group.policy}.`);\n            return true;\n          }\n\n          (0, _util.warn)(`Unknown group type ${group.type}.`);\n          return true;\n        }\n\n        setVisibility(id, visible = true) {\n          if (!this._groups.has(id)) {\n            (0, _util.warn)(`Optional content group not found: ${id}`);\n            return;\n          }\n\n          this._groups.get(id).visible = !!visible;\n        }\n\n        getOrder() {\n          if (!this._groups.size) {\n            return null;\n          }\n\n          if (this._order) {\n            return this._order.slice();\n          }\n\n          return Array.from(this._groups.keys());\n        }\n\n        getGroups() {\n          if (!this._groups.size) {\n            return null;\n          }\n\n          return Object.fromEntries(this._groups);\n        }\n\n        getGroup(id) {\n          return this._groups.get(id) || null;\n        }\n\n      }\n\n      exports.OptionalContentConfig = OptionalContentConfig;\n      /***/\n    },\n    /* 17 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.PDFDataTransportStream = void 0;\n\n      var _util = __w_pdfjs_require__(2);\n\n      class PDFDataTransportStream {\n        constructor(params, pdfDataRangeTransport) {\n          (0, _util.assert)(pdfDataRangeTransport, \'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.\');\n          this._queuedChunks = [];\n          this._progressiveDone = params.progressiveDone || false;\n          const initialData = params.initialData;\n\n          if (initialData && initialData.length > 0) {\n            const buffer = new Uint8Array(initialData).buffer;\n\n            this._queuedChunks.push(buffer);\n          }\n\n          this._pdfDataRangeTransport = pdfDataRangeTransport;\n          this._isStreamingSupported = !params.disableStream;\n          this._isRangeSupported = !params.disableRange;\n          this._contentLength = params.length;\n          this._fullRequestReader = null;\n          this._rangeReaders = [];\n\n          this._pdfDataRangeTransport.addRangeListener((begin, chunk) => {\n            this._onReceiveData({\n              begin,\n              chunk\n            });\n          });\n\n          this._pdfDataRangeTransport.addProgressListener((loaded, total) => {\n            this._onProgress({\n              loaded,\n              total\n            });\n          });\n\n          this._pdfDataRangeTransport.addProgressiveReadListener(chunk => {\n            this._onReceiveData({\n              chunk\n            });\n          });\n\n          this._pdfDataRangeTransport.addProgressiveDoneListener(() => {\n            this._onProgressiveDone();\n          });\n\n          this._pdfDataRangeTransport.transportReady();\n        }\n\n        _onReceiveData(args) {\n          const buffer = new Uint8Array(args.chunk).buffer;\n\n          if (args.begin === undefined) {\n            if (this._fullRequestReader) {\n              this._fullRequestReader._enqueue(buffer);\n            } else {\n              this._queuedChunks.push(buffer);\n            }\n          } else {\n            const found = this._rangeReaders.some(function (rangeReader) {\n              if (rangeReader._begin !== args.begin) {\n                return false;\n              }\n\n              rangeReader._enqueue(buffer);\n\n              return true;\n            });\n\n            (0, _util.assert)(found, "_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.");\n          }\n        }\n\n        get _progressiveDataLength() {\n          return this._fullRequestReader ? this._fullRequestReader._loaded : 0;\n        }\n\n        _onProgress(evt) {\n          if (evt.total === undefined) {\n            const firstReader = this._rangeReaders[0];\n\n            if (firstReader && firstReader.onProgress) {\n              firstReader.onProgress({\n                loaded: evt.loaded\n              });\n            }\n          } else {\n            const fullReader = this._fullRequestReader;\n\n            if (fullReader && fullReader.onProgress) {\n              fullReader.onProgress({\n                loaded: evt.loaded,\n                total: evt.total\n              });\n            }\n          }\n        }\n\n        _onProgressiveDone() {\n          if (this._fullRequestReader) {\n            this._fullRequestReader.progressiveDone();\n          }\n\n          this._progressiveDone = true;\n        }\n\n        _removeRangeReader(reader) {\n          const i = this._rangeReaders.indexOf(reader);\n\n          if (i >= 0) {\n            this._rangeReaders.splice(i, 1);\n          }\n        }\n\n        getFullReader() {\n          (0, _util.assert)(!this._fullRequestReader, "PDFDataTransportStream.getFullReader can only be called once.");\n          const queuedChunks = this._queuedChunks;\n          this._queuedChunks = null;\n          return new PDFDataTransportStreamReader(this, queuedChunks, this._progressiveDone);\n        }\n\n        getRangeReader(begin, end) {\n          if (end <= this._progressiveDataLength) {\n            return null;\n          }\n\n          const reader = new PDFDataTransportStreamRangeReader(this, begin, end);\n\n          this._pdfDataRangeTransport.requestDataRange(begin, end);\n\n          this._rangeReaders.push(reader);\n\n          return reader;\n        }\n\n        cancelAllRequests(reason) {\n          if (this._fullRequestReader) {\n            this._fullRequestReader.cancel(reason);\n          }\n\n          const readers = this._rangeReaders.slice(0);\n\n          readers.forEach(function (rangeReader) {\n            rangeReader.cancel(reason);\n          });\n\n          this._pdfDataRangeTransport.abort();\n        }\n\n      }\n\n      exports.PDFDataTransportStream = PDFDataTransportStream;\n\n      class PDFDataTransportStreamReader {\n        constructor(stream, queuedChunks, progressiveDone = false) {\n          this._stream = stream;\n          this._done = progressiveDone || false;\n          this._filename = null;\n          this._queuedChunks = queuedChunks || [];\n          this._loaded = 0;\n\n          for (const chunk of this._queuedChunks) {\n            this._loaded += chunk.byteLength;\n          }\n\n          this._requests = [];\n          this._headersReady = Promise.resolve();\n          stream._fullRequestReader = this;\n          this.onProgress = null;\n        }\n\n        _enqueue(chunk) {\n          if (this._done) {\n            return;\n          }\n\n          if (this._requests.length > 0) {\n            const requestCapability = this._requests.shift();\n\n            requestCapability.resolve({\n              value: chunk,\n              done: false\n            });\n          } else {\n            this._queuedChunks.push(chunk);\n          }\n\n          this._loaded += chunk.byteLength;\n        }\n\n        get headersReady() {\n          return this._headersReady;\n        }\n\n        get filename() {\n          return this._filename;\n        }\n\n        get isRangeSupported() {\n          return this._stream._isRangeSupported;\n        }\n\n        get isStreamingSupported() {\n          return this._stream._isStreamingSupported;\n        }\n\n        get contentLength() {\n          return this._stream._contentLength;\n        }\n\n        async read() {\n          if (this._queuedChunks.length > 0) {\n            const chunk = this._queuedChunks.shift();\n\n            return {\n              value: chunk,\n              done: false\n            };\n          }\n\n          if (this._done) {\n            return {\n              value: undefined,\n              done: true\n            };\n          }\n\n          const requestCapability = (0, _util.createPromiseCapability)();\n\n          this._requests.push(requestCapability);\n\n          return requestCapability.promise;\n        }\n\n        cancel(reason) {\n          this._done = true;\n\n          this._requests.forEach(function (requestCapability) {\n            requestCapability.resolve({\n              value: undefined,\n              done: true\n            });\n          });\n\n          this._requests = [];\n        }\n\n        progressiveDone() {\n          if (this._done) {\n            return;\n          }\n\n          this._done = true;\n        }\n\n      }\n\n      class PDFDataTransportStreamRangeReader {\n        constructor(stream, begin, end) {\n          this._stream = stream;\n          this._begin = begin;\n          this._end = end;\n          this._queuedChunk = null;\n          this._requests = [];\n          this._done = false;\n          this.onProgress = null;\n        }\n\n        _enqueue(chunk) {\n          if (this._done) {\n            return;\n          }\n\n          if (this._requests.length === 0) {\n            this._queuedChunk = chunk;\n          } else {\n            const requestsCapability = this._requests.shift();\n\n            requestsCapability.resolve({\n              value: chunk,\n              done: false\n            });\n\n            this._requests.forEach(function (requestCapability) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            });\n\n            this._requests = [];\n          }\n\n          this._done = true;\n\n          this._stream._removeRangeReader(this);\n        }\n\n        get isStreamingSupported() {\n          return false;\n        }\n\n        async read() {\n          if (this._queuedChunk) {\n            const chunk = this._queuedChunk;\n            this._queuedChunk = null;\n            return {\n              value: chunk,\n              done: false\n            };\n          }\n\n          if (this._done) {\n            return {\n              value: undefined,\n              done: true\n            };\n          }\n\n          const requestCapability = (0, _util.createPromiseCapability)();\n\n          this._requests.push(requestCapability);\n\n          return requestCapability.promise;\n        }\n\n        cancel(reason) {\n          this._done = true;\n\n          this._requests.forEach(function (requestCapability) {\n            requestCapability.resolve({\n              value: undefined,\n              done: true\n            });\n          });\n\n          this._requests = [];\n\n          this._stream._removeRangeReader(this);\n        }\n\n      }\n      /***/\n\n    },\n    /* 18 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.WebGLContext = void 0;\n\n      var _util = __w_pdfjs_require__(2);\n\n      class WebGLContext {\n        constructor({\n          enable = false\n        }) {\n          this._enabled = enable === true;\n        }\n\n        get isEnabled() {\n          let enabled = this._enabled;\n\n          if (enabled) {\n            enabled = WebGLUtils.tryInitGL();\n          }\n\n          return (0, _util.shadow)(this, "isEnabled", enabled);\n        }\n\n        composeSMask({\n          layer,\n          mask,\n          properties\n        }) {\n          return WebGLUtils.composeSMask(layer, mask, properties);\n        }\n\n        drawFigures({\n          width,\n          height,\n          backgroundColor,\n          figures,\n          context\n        }) {\n          return WebGLUtils.drawFigures(width, height, backgroundColor, figures, context);\n        }\n\n        clear() {\n          WebGLUtils.cleanup();\n        }\n\n      }\n\n      exports.WebGLContext = WebGLContext;\n\n      var WebGLUtils = function WebGLUtilsClosure() {\n        function loadShader(gl, code, shaderType) {\n          var shader = gl.createShader(shaderType);\n          gl.shaderSource(shader, code);\n          gl.compileShader(shader);\n          var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n          if (!compiled) {\n            var errorMsg = gl.getShaderInfoLog(shader);\n            throw new Error("Error during shader compilation: " + errorMsg);\n          }\n\n          return shader;\n        }\n\n        function createVertexShader(gl, code) {\n          return loadShader(gl, code, gl.VERTEX_SHADER);\n        }\n\n        function createFragmentShader(gl, code) {\n          return loadShader(gl, code, gl.FRAGMENT_SHADER);\n        }\n\n        function createProgram(gl, shaders) {\n          var program = gl.createProgram();\n\n          for (var i = 0, ii = shaders.length; i < ii; ++i) {\n            gl.attachShader(program, shaders[i]);\n          }\n\n          gl.linkProgram(program);\n          var linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n          if (!linked) {\n            var errorMsg = gl.getProgramInfoLog(program);\n            throw new Error("Error during program linking: " + errorMsg);\n          }\n\n          return program;\n        }\n\n        function createTexture(gl, image, textureId) {\n          gl.activeTexture(textureId);\n          var texture = gl.createTexture();\n          gl.bindTexture(gl.TEXTURE_2D, texture);\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n          return texture;\n        }\n\n        var currentGL, currentCanvas;\n\n        function generateGL() {\n          if (currentGL) {\n            return;\n          }\n\n          currentCanvas = document.createElement("canvas");\n          currentGL = currentCanvas.getContext("webgl", {\n            premultipliedalpha: false\n          });\n        }\n\n        var smaskVertexShaderCode = "\\\n  attribute vec2 a_position;                                    \\\n  attribute vec2 a_texCoord;                                    \\\n                                                                \\\n  uniform vec2 u_resolution;                                    \\\n                                                                \\\n  varying vec2 v_texCoord;                                      \\\n                                                                \\\n  void main() {                                                 \\\n    vec2 clipSpace = (a_position / u_resolution) * 2.0 - 1.0;   \\\n    gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);          \\\n                                                                \\\n    v_texCoord = a_texCoord;                                    \\\n  }                                                             ";\n        var smaskFragmentShaderCode = "\\\n  precision mediump float;                                      \\\n                                                                \\\n  uniform vec4 u_backdrop;                                      \\\n  uniform int u_subtype;                                        \\\n  uniform sampler2D u_image;                                    \\\n  uniform sampler2D u_mask;                                     \\\n                                                                \\\n  varying vec2 v_texCoord;                                      \\\n                                                                \\\n  void main() {                                                 \\\n    vec4 imageColor = texture2D(u_image, v_texCoord);           \\\n    vec4 maskColor = texture2D(u_mask, v_texCoord);             \\\n    if (u_backdrop.a > 0.0) {                                   \\\n      maskColor.rgb = maskColor.rgb * maskColor.a +             \\\n                      u_backdrop.rgb * (1.0 - maskColor.a);     \\\n    }                                                           \\\n    float lum;                                                  \\\n    if (u_subtype == 0) {                                       \\\n      lum = maskColor.a;                                        \\\n    } else {                                                    \\\n      lum = maskColor.r * 0.3 + maskColor.g * 0.59 +            \\\n            maskColor.b * 0.11;                                 \\\n    }                                                           \\\n    imageColor.a *= lum;                                        \\\n    imageColor.rgb *= imageColor.a;                             \\\n    gl_FragColor = imageColor;                                  \\\n  }                                                             ";\n        var smaskCache = null;\n\n        function initSmaskGL() {\n          var canvas, gl;\n          generateGL();\n          canvas = currentCanvas;\n          currentCanvas = null;\n          gl = currentGL;\n          currentGL = null;\n          var vertexShader = createVertexShader(gl, smaskVertexShaderCode);\n          var fragmentShader = createFragmentShader(gl, smaskFragmentShaderCode);\n          var program = createProgram(gl, [vertexShader, fragmentShader]);\n          gl.useProgram(program);\n          var cache = {};\n          cache.gl = gl;\n          cache.canvas = canvas;\n          cache.resolutionLocation = gl.getUniformLocation(program, "u_resolution");\n          cache.positionLocation = gl.getAttribLocation(program, "a_position");\n          cache.backdropLocation = gl.getUniformLocation(program, "u_backdrop");\n          cache.subtypeLocation = gl.getUniformLocation(program, "u_subtype");\n          var texCoordLocation = gl.getAttribLocation(program, "a_texCoord");\n          var texLayerLocation = gl.getUniformLocation(program, "u_image");\n          var texMaskLocation = gl.getUniformLocation(program, "u_mask");\n          var texCoordBuffer = gl.createBuffer();\n          gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n          gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0]), gl.STATIC_DRAW);\n          gl.enableVertexAttribArray(texCoordLocation);\n          gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);\n          gl.uniform1i(texLayerLocation, 0);\n          gl.uniform1i(texMaskLocation, 1);\n          smaskCache = cache;\n        }\n\n        function composeSMask(layer, mask, properties) {\n          var width = layer.width,\n              height = layer.height;\n\n          if (!smaskCache) {\n            initSmaskGL();\n          }\n\n          var cache = smaskCache,\n              canvas = cache.canvas,\n              gl = cache.gl;\n          canvas.width = width;\n          canvas.height = height;\n          gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n          gl.uniform2f(cache.resolutionLocation, width, height);\n\n          if (properties.backdrop) {\n            gl.uniform4f(cache.resolutionLocation, properties.backdrop[0], properties.backdrop[1], properties.backdrop[2], 1);\n          } else {\n            gl.uniform4f(cache.resolutionLocation, 0, 0, 0, 0);\n          }\n\n          gl.uniform1i(cache.subtypeLocation, properties.subtype === "Luminosity" ? 1 : 0);\n          var texture = createTexture(gl, layer, gl.TEXTURE0);\n          var maskTexture = createTexture(gl, mask, gl.TEXTURE1);\n          var buffer = gl.createBuffer();\n          gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n          gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, 0, width, 0, 0, height, 0, height, width, 0, width, height]), gl.STATIC_DRAW);\n          gl.enableVertexAttribArray(cache.positionLocation);\n          gl.vertexAttribPointer(cache.positionLocation, 2, gl.FLOAT, false, 0, 0);\n          gl.clearColor(0, 0, 0, 0);\n          gl.enable(gl.BLEND);\n          gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n          gl.clear(gl.COLOR_BUFFER_BIT);\n          gl.drawArrays(gl.TRIANGLES, 0, 6);\n          gl.flush();\n          gl.deleteTexture(texture);\n          gl.deleteTexture(maskTexture);\n          gl.deleteBuffer(buffer);\n          return canvas;\n        }\n\n        var figuresVertexShaderCode = "\\\n  attribute vec2 a_position;                                    \\\n  attribute vec3 a_color;                                       \\\n                                                                \\\n  uniform vec2 u_resolution;                                    \\\n  uniform vec2 u_scale;                                         \\\n  uniform vec2 u_offset;                                        \\\n                                                                \\\n  varying vec4 v_color;                                         \\\n                                                                \\\n  void main() {                                                 \\\n    vec2 position = (a_position + u_offset) * u_scale;          \\\n    vec2 clipSpace = (position / u_resolution) * 2.0 - 1.0;     \\\n    gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);          \\\n                                                                \\\n    v_color = vec4(a_color / 255.0, 1.0);                       \\\n  }                                                             ";\n        var figuresFragmentShaderCode = "\\\n  precision mediump float;                                      \\\n                                                                \\\n  varying vec4 v_color;                                         \\\n                                                                \\\n  void main() {                                                 \\\n    gl_FragColor = v_color;                                     \\\n  }                                                             ";\n        var figuresCache = null;\n\n        function initFiguresGL() {\n          var canvas, gl;\n          generateGL();\n          canvas = currentCanvas;\n          currentCanvas = null;\n          gl = currentGL;\n          currentGL = null;\n          var vertexShader = createVertexShader(gl, figuresVertexShaderCode);\n          var fragmentShader = createFragmentShader(gl, figuresFragmentShaderCode);\n          var program = createProgram(gl, [vertexShader, fragmentShader]);\n          gl.useProgram(program);\n          var cache = {};\n          cache.gl = gl;\n          cache.canvas = canvas;\n          cache.resolutionLocation = gl.getUniformLocation(program, "u_resolution");\n          cache.scaleLocation = gl.getUniformLocation(program, "u_scale");\n          cache.offsetLocation = gl.getUniformLocation(program, "u_offset");\n          cache.positionLocation = gl.getAttribLocation(program, "a_position");\n          cache.colorLocation = gl.getAttribLocation(program, "a_color");\n          figuresCache = cache;\n        }\n\n        function drawFigures(width, height, backgroundColor, figures, context) {\n          if (!figuresCache) {\n            initFiguresGL();\n          }\n\n          var cache = figuresCache,\n              canvas = cache.canvas,\n              gl = cache.gl;\n          canvas.width = width;\n          canvas.height = height;\n          gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n          gl.uniform2f(cache.resolutionLocation, width, height);\n          var count = 0;\n          var i, ii, rows;\n\n          for (i = 0, ii = figures.length; i < ii; i++) {\n            switch (figures[i].type) {\n              case "lattice":\n                rows = figures[i].coords.length / figures[i].verticesPerRow | 0;\n                count += (rows - 1) * (figures[i].verticesPerRow - 1) * 6;\n                break;\n\n              case "triangles":\n                count += figures[i].coords.length;\n                break;\n            }\n          }\n\n          var coords = new Float32Array(count * 2);\n          var colors = new Uint8Array(count * 3);\n          var coordsMap = context.coords,\n              colorsMap = context.colors;\n          var pIndex = 0,\n              cIndex = 0;\n\n          for (i = 0, ii = figures.length; i < ii; i++) {\n            var figure = figures[i],\n                ps = figure.coords,\n                cs = figure.colors;\n\n            switch (figure.type) {\n              case "lattice":\n                var cols = figure.verticesPerRow;\n                rows = ps.length / cols | 0;\n\n                for (var row = 1; row < rows; row++) {\n                  var offset = row * cols + 1;\n\n                  for (var col = 1; col < cols; col++, offset++) {\n                    coords[pIndex] = coordsMap[ps[offset - cols - 1]];\n                    coords[pIndex + 1] = coordsMap[ps[offset - cols - 1] + 1];\n                    coords[pIndex + 2] = coordsMap[ps[offset - cols]];\n                    coords[pIndex + 3] = coordsMap[ps[offset - cols] + 1];\n                    coords[pIndex + 4] = coordsMap[ps[offset - 1]];\n                    coords[pIndex + 5] = coordsMap[ps[offset - 1] + 1];\n                    colors[cIndex] = colorsMap[cs[offset - cols - 1]];\n                    colors[cIndex + 1] = colorsMap[cs[offset - cols - 1] + 1];\n                    colors[cIndex + 2] = colorsMap[cs[offset - cols - 1] + 2];\n                    colors[cIndex + 3] = colorsMap[cs[offset - cols]];\n                    colors[cIndex + 4] = colorsMap[cs[offset - cols] + 1];\n                    colors[cIndex + 5] = colorsMap[cs[offset - cols] + 2];\n                    colors[cIndex + 6] = colorsMap[cs[offset - 1]];\n                    colors[cIndex + 7] = colorsMap[cs[offset - 1] + 1];\n                    colors[cIndex + 8] = colorsMap[cs[offset - 1] + 2];\n                    coords[pIndex + 6] = coords[pIndex + 2];\n                    coords[pIndex + 7] = coords[pIndex + 3];\n                    coords[pIndex + 8] = coords[pIndex + 4];\n                    coords[pIndex + 9] = coords[pIndex + 5];\n                    coords[pIndex + 10] = coordsMap[ps[offset]];\n                    coords[pIndex + 11] = coordsMap[ps[offset] + 1];\n                    colors[cIndex + 9] = colors[cIndex + 3];\n                    colors[cIndex + 10] = colors[cIndex + 4];\n                    colors[cIndex + 11] = colors[cIndex + 5];\n                    colors[cIndex + 12] = colors[cIndex + 6];\n                    colors[cIndex + 13] = colors[cIndex + 7];\n                    colors[cIndex + 14] = colors[cIndex + 8];\n                    colors[cIndex + 15] = colorsMap[cs[offset]];\n                    colors[cIndex + 16] = colorsMap[cs[offset] + 1];\n                    colors[cIndex + 17] = colorsMap[cs[offset] + 2];\n                    pIndex += 12;\n                    cIndex += 18;\n                  }\n                }\n\n                break;\n\n              case "triangles":\n                for (var j = 0, jj = ps.length; j < jj; j++) {\n                  coords[pIndex] = coordsMap[ps[j]];\n                  coords[pIndex + 1] = coordsMap[ps[j] + 1];\n                  colors[cIndex] = colorsMap[cs[j]];\n                  colors[cIndex + 1] = colorsMap[cs[j] + 1];\n                  colors[cIndex + 2] = colorsMap[cs[j] + 2];\n                  pIndex += 2;\n                  cIndex += 3;\n                }\n\n                break;\n            }\n          }\n\n          if (backgroundColor) {\n            gl.clearColor(backgroundColor[0] / 255, backgroundColor[1] / 255, backgroundColor[2] / 255, 1.0);\n          } else {\n            gl.clearColor(0, 0, 0, 0);\n          }\n\n          gl.clear(gl.COLOR_BUFFER_BIT);\n          var coordsBuffer = gl.createBuffer();\n          gl.bindBuffer(gl.ARRAY_BUFFER, coordsBuffer);\n          gl.bufferData(gl.ARRAY_BUFFER, coords, gl.STATIC_DRAW);\n          gl.enableVertexAttribArray(cache.positionLocation);\n          gl.vertexAttribPointer(cache.positionLocation, 2, gl.FLOAT, false, 0, 0);\n          var colorsBuffer = gl.createBuffer();\n          gl.bindBuffer(gl.ARRAY_BUFFER, colorsBuffer);\n          gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);\n          gl.enableVertexAttribArray(cache.colorLocation);\n          gl.vertexAttribPointer(cache.colorLocation, 3, gl.UNSIGNED_BYTE, false, 0, 0);\n          gl.uniform2f(cache.scaleLocation, context.scaleX, context.scaleY);\n          gl.uniform2f(cache.offsetLocation, context.offsetX, context.offsetY);\n          gl.drawArrays(gl.TRIANGLES, 0, count);\n          gl.flush();\n          gl.deleteBuffer(coordsBuffer);\n          gl.deleteBuffer(colorsBuffer);\n          return canvas;\n        }\n\n        return {\n          tryInitGL() {\n            try {\n              generateGL();\n              return !!currentGL;\n            } catch (ex) {}\n\n            return false;\n          },\n\n          composeSMask,\n          drawFigures,\n\n          cleanup() {\n            if (smaskCache && smaskCache.canvas) {\n              smaskCache.canvas.width = 0;\n              smaskCache.canvas.height = 0;\n            }\n\n            if (figuresCache && figuresCache.canvas) {\n              figuresCache.canvas.width = 0;\n              figuresCache.canvas.height = 0;\n            }\n\n            smaskCache = null;\n            figuresCache = null;\n          }\n\n        };\n      }();\n      /***/\n\n    },\n    /* 19 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.AnnotationLayer = void 0;\n\n      var _display_utils = __w_pdfjs_require__(1);\n\n      var _util = __w_pdfjs_require__(2);\n\n      var _annotation_storage = __w_pdfjs_require__(8);\n\n      class AnnotationElementFactory {\n        static create(parameters) {\n          const subtype = parameters.data.annotationType;\n\n          switch (subtype) {\n            case _util.AnnotationType.LINK:\n              return new LinkAnnotationElement(parameters);\n\n            case _util.AnnotationType.TEXT:\n              return new TextAnnotationElement(parameters);\n\n            case _util.AnnotationType.WIDGET:\n              const fieldType = parameters.data.fieldType;\n\n              switch (fieldType) {\n                case "Tx":\n                  return new TextWidgetAnnotationElement(parameters);\n\n                case "Btn":\n                  if (parameters.data.radioButton) {\n                    return new RadioButtonWidgetAnnotationElement(parameters);\n                  } else if (parameters.data.checkBox) {\n                    return new CheckboxWidgetAnnotationElement(parameters);\n                  }\n\n                  return new PushButtonWidgetAnnotationElement(parameters);\n\n                case "Ch":\n                  return new ChoiceWidgetAnnotationElement(parameters);\n              }\n\n              return new WidgetAnnotationElement(parameters);\n\n            case _util.AnnotationType.POPUP:\n              return new PopupAnnotationElement(parameters);\n\n            case _util.AnnotationType.FREETEXT:\n              return new FreeTextAnnotationElement(parameters);\n\n            case _util.AnnotationType.LINE:\n              return new LineAnnotationElement(parameters);\n\n            case _util.AnnotationType.SQUARE:\n              return new SquareAnnotationElement(parameters);\n\n            case _util.AnnotationType.CIRCLE:\n              return new CircleAnnotationElement(parameters);\n\n            case _util.AnnotationType.POLYLINE:\n              return new PolylineAnnotationElement(parameters);\n\n            case _util.AnnotationType.CARET:\n              return new CaretAnnotationElement(parameters);\n\n            case _util.AnnotationType.INK:\n              return new InkAnnotationElement(parameters);\n\n            case _util.AnnotationType.POLYGON:\n              return new PolygonAnnotationElement(parameters);\n\n            case _util.AnnotationType.HIGHLIGHT:\n              return new HighlightAnnotationElement(parameters);\n\n            case _util.AnnotationType.UNDERLINE:\n              return new UnderlineAnnotationElement(parameters);\n\n            case _util.AnnotationType.SQUIGGLY:\n              return new SquigglyAnnotationElement(parameters);\n\n            case _util.AnnotationType.STRIKEOUT:\n              return new StrikeOutAnnotationElement(parameters);\n\n            case _util.AnnotationType.STAMP:\n              return new StampAnnotationElement(parameters);\n\n            case _util.AnnotationType.FILEATTACHMENT:\n              return new FileAttachmentAnnotationElement(parameters);\n\n            default:\n              return new AnnotationElement(parameters);\n          }\n        }\n\n      }\n\n      class AnnotationElement {\n        constructor(parameters, isRenderable = false, ignoreBorder = false) {\n          this.isRenderable = isRenderable;\n          this.data = parameters.data;\n          this.layer = parameters.layer;\n          this.page = parameters.page;\n          this.viewport = parameters.viewport;\n          this.linkService = parameters.linkService;\n          this.downloadManager = parameters.downloadManager;\n          this.imageResourcesPath = parameters.imageResourcesPath;\n          this.renderInteractiveForms = parameters.renderInteractiveForms;\n          this.svgFactory = parameters.svgFactory;\n          this.annotationStorage = parameters.annotationStorage;\n\n          if (isRenderable) {\n            this.container = this._createContainer(ignoreBorder);\n          }\n        }\n\n        _createContainer(ignoreBorder = false) {\n          const data = this.data,\n                page = this.page,\n                viewport = this.viewport;\n          const container = document.createElement("section");\n          let width = data.rect[2] - data.rect[0];\n          let height = data.rect[3] - data.rect[1];\n          container.setAttribute("data-annotation-id", data.id);\n\n          const rect = _util.Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);\n\n          container.style.transform = `matrix(${viewport.transform.join(",")})`;\n          container.style.transformOrigin = `-${rect[0]}px -${rect[1]}px`;\n\n          if (!ignoreBorder && data.borderStyle.width > 0) {\n            container.style.borderWidth = `${data.borderStyle.width}px`;\n\n            if (data.borderStyle.style !== _util.AnnotationBorderStyleType.UNDERLINE) {\n              width = width - 2 * data.borderStyle.width;\n              height = height - 2 * data.borderStyle.width;\n            }\n\n            const horizontalRadius = data.borderStyle.horizontalCornerRadius;\n            const verticalRadius = data.borderStyle.verticalCornerRadius;\n\n            if (horizontalRadius > 0 || verticalRadius > 0) {\n              const radius = `${horizontalRadius}px / ${verticalRadius}px`;\n              container.style.borderRadius = radius;\n            }\n\n            switch (data.borderStyle.style) {\n              case _util.AnnotationBorderStyleType.SOLID:\n                container.style.borderStyle = "solid";\n                break;\n\n              case _util.AnnotationBorderStyleType.DASHED:\n                container.style.borderStyle = "dashed";\n                break;\n\n              case _util.AnnotationBorderStyleType.BEVELED:\n                (0, _util.warn)("Unimplemented border style: beveled");\n                break;\n\n              case _util.AnnotationBorderStyleType.INSET:\n                (0, _util.warn)("Unimplemented border style: inset");\n                break;\n\n              case _util.AnnotationBorderStyleType.UNDERLINE:\n                container.style.borderBottomStyle = "solid";\n                break;\n\n              default:\n                break;\n            }\n\n            if (data.color) {\n              container.style.borderColor = _util.Util.makeCssRgb(data.color[0] | 0, data.color[1] | 0, data.color[2] | 0);\n            } else {\n              container.style.borderWidth = 0;\n            }\n          }\n\n          container.style.left = `${rect[0]}px`;\n          container.style.top = `${rect[1]}px`;\n          container.style.width = `${width}px`;\n          container.style.height = `${height}px`;\n          return container;\n        }\n\n        _createPopup(container, trigger, data) {\n          if (!trigger) {\n            trigger = document.createElement("div");\n            trigger.style.height = container.style.height;\n            trigger.style.width = container.style.width;\n            container.appendChild(trigger);\n          }\n\n          const popupElement = new PopupElement({\n            container,\n            trigger,\n            color: data.color,\n            title: data.title,\n            modificationDate: data.modificationDate,\n            contents: data.contents,\n            hideWrapper: true\n          });\n          const popup = popupElement.render();\n          popup.style.left = container.style.width;\n          container.appendChild(popup);\n        }\n\n        render() {\n          (0, _util.unreachable)("Abstract method `AnnotationElement.render` called");\n        }\n\n      }\n\n      class LinkAnnotationElement extends AnnotationElement {\n        constructor(parameters) {\n          const isRenderable = !!(parameters.data.url || parameters.data.dest || parameters.data.action);\n          super(parameters, isRenderable);\n        }\n\n        render() {\n          this.container.className = "linkAnnotation";\n          const {\n            data,\n            linkService\n          } = this;\n          const link = document.createElement("a");\n\n          if (data.url) {\n            (0, _display_utils.addLinkAttributes)(link, {\n              url: data.url,\n              target: data.newWindow ? _display_utils.LinkTarget.BLANK : linkService.externalLinkTarget,\n              rel: linkService.externalLinkRel,\n              enabled: linkService.externalLinkEnabled\n            });\n          } else if (data.action) {\n            this._bindNamedAction(link, data.action);\n          } else {\n            this._bindLink(link, data.dest);\n          }\n\n          this.container.appendChild(link);\n          return this.container;\n        }\n\n        _bindLink(link, destination) {\n          link.href = this.linkService.getDestinationHash(destination);\n\n          link.onclick = () => {\n            if (destination) {\n              this.linkService.navigateTo(destination);\n            }\n\n            return false;\n          };\n\n          if (destination) {\n            link.className = "internalLink";\n          }\n        }\n\n        _bindNamedAction(link, action) {\n          link.href = this.linkService.getAnchorUrl("");\n\n          link.onclick = () => {\n            this.linkService.executeNamedAction(action);\n            return false;\n          };\n\n          link.className = "internalLink";\n        }\n\n      }\n\n      class TextAnnotationElement extends AnnotationElement {\n        constructor(parameters) {\n          const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n          super(parameters, isRenderable);\n        }\n\n        render() {\n          this.container.className = "textAnnotation";\n          const image = document.createElement("img");\n          image.style.height = this.container.style.height;\n          image.style.width = this.container.style.width;\n          image.src = this.imageResourcesPath + "annotation-" + this.data.name.toLowerCase() + ".svg";\n          image.alt = "[{{type}} Annotation]";\n          image.dataset.l10nId = "text_annotation_type";\n          image.dataset.l10nArgs = JSON.stringify({\n            type: this.data.name\n          });\n\n          if (!this.data.hasPopup) {\n            this._createPopup(this.container, image, this.data);\n          }\n\n          this.container.appendChild(image);\n          return this.container;\n        }\n\n      }\n\n      class WidgetAnnotationElement extends AnnotationElement {\n        render() {\n          return this.container;\n        }\n\n      }\n\n      class TextWidgetAnnotationElement extends WidgetAnnotationElement {\n        constructor(parameters) {\n          const isRenderable = parameters.renderInteractiveForms || !parameters.data.hasAppearance && !!parameters.data.fieldValue;\n          super(parameters, isRenderable);\n        }\n\n        render() {\n          const TEXT_ALIGNMENT = ["left", "center", "right"];\n          const storage = this.annotationStorage;\n          const id = this.data.id;\n          this.container.className = "textWidgetAnnotation";\n          let element = null;\n\n          if (this.renderInteractiveForms) {\n            const textContent = storage.getOrCreateValue(id, this.data.fieldValue);\n\n            if (this.data.multiLine) {\n              element = document.createElement("textarea");\n              element.textContent = textContent;\n            } else {\n              element = document.createElement("input");\n              element.type = "text";\n              element.setAttribute("value", textContent);\n            }\n\n            element.addEventListener("input", function (event) {\n              storage.setValue(id, event.target.value);\n            });\n            element.disabled = this.data.readOnly;\n            element.name = this.data.fieldName;\n\n            if (this.data.maxLen !== null) {\n              element.maxLength = this.data.maxLen;\n            }\n\n            if (this.data.comb) {\n              const fieldWidth = this.data.rect[2] - this.data.rect[0];\n              const combWidth = fieldWidth / this.data.maxLen;\n              element.classList.add("comb");\n              element.style.letterSpacing = `calc(${combWidth}px - 1ch)`;\n            }\n          } else {\n            element = document.createElement("div");\n            element.textContent = this.data.fieldValue;\n            element.style.verticalAlign = "middle";\n            element.style.display = "table-cell";\n            let font = null;\n\n            if (this.data.fontRefName && this.page.commonObjs.has(this.data.fontRefName)) {\n              font = this.page.commonObjs.get(this.data.fontRefName);\n            }\n\n            this._setTextStyle(element, font);\n          }\n\n          if (this.data.textAlignment !== null) {\n            element.style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\n          }\n\n          this.container.appendChild(element);\n          return this.container;\n        }\n\n        _setTextStyle(element, font) {\n          const style = element.style;\n          style.fontSize = `${this.data.fontSize}px`;\n          style.direction = this.data.fontDirection < 0 ? "rtl" : "ltr";\n\n          if (!font) {\n            return;\n          }\n\n          let bold = "normal";\n\n          if (font.black) {\n            bold = "900";\n          } else if (font.bold) {\n            bold = "bold";\n          }\n\n          style.fontWeight = bold;\n          style.fontStyle = font.italic ? "italic" : "normal";\n          const fontFamily = font.loadedName ? `"${font.loadedName}", ` : "";\n          const fallbackName = font.fallbackName || "Helvetica, sans-serif";\n          style.fontFamily = fontFamily + fallbackName;\n        }\n\n      }\n\n      class CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {\n        constructor(parameters) {\n          super(parameters, parameters.renderInteractiveForms);\n        }\n\n        render() {\n          const storage = this.annotationStorage;\n          const data = this.data;\n          const id = data.id;\n          const value = storage.getOrCreateValue(id, data.fieldValue && data.fieldValue !== "Off");\n          this.container.className = "buttonWidgetAnnotation checkBox";\n          const element = document.createElement("input");\n          element.disabled = data.readOnly;\n          element.type = "checkbox";\n          element.name = this.data.fieldName;\n\n          if (value) {\n            element.setAttribute("checked", true);\n          }\n\n          element.addEventListener("change", function (event) {\n            storage.setValue(id, event.target.checked);\n          });\n          this.container.appendChild(element);\n          return this.container;\n        }\n\n      }\n\n      class RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {\n        constructor(parameters) {\n          super(parameters, parameters.renderInteractiveForms);\n        }\n\n        render() {\n          this.container.className = "buttonWidgetAnnotation radioButton";\n          const storage = this.annotationStorage;\n          const data = this.data;\n          const id = data.id;\n          const value = storage.getOrCreateValue(id, data.fieldValue === data.buttonValue);\n          const element = document.createElement("input");\n          element.disabled = data.readOnly;\n          element.type = "radio";\n          element.name = data.fieldName;\n\n          if (value) {\n            element.setAttribute("checked", true);\n          }\n\n          element.addEventListener("change", function (event) {\n            const name = event.target.name;\n\n            for (const radio of document.getElementsByName(name)) {\n              if (radio !== event.target) {\n                storage.setValue(radio.parentNode.getAttribute("data-annotation-id"), false);\n              }\n            }\n\n            storage.setValue(id, event.target.checked);\n          });\n          this.container.appendChild(element);\n          return this.container;\n        }\n\n      }\n\n      class PushButtonWidgetAnnotationElement extends LinkAnnotationElement {\n        render() {\n          const container = super.render();\n          container.className = "buttonWidgetAnnotation pushButton";\n          return container;\n        }\n\n      }\n\n      class ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {\n        constructor(parameters) {\n          super(parameters, parameters.renderInteractiveForms);\n        }\n\n        render() {\n          this.container.className = "choiceWidgetAnnotation";\n          const storage = this.annotationStorage;\n          const id = this.data.id;\n          storage.getOrCreateValue(id, this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : null);\n          const selectElement = document.createElement("select");\n          selectElement.disabled = this.data.readOnly;\n          selectElement.name = this.data.fieldName;\n\n          if (!this.data.combo) {\n            selectElement.size = this.data.options.length;\n\n            if (this.data.multiSelect) {\n              selectElement.multiple = true;\n            }\n          }\n\n          for (const option of this.data.options) {\n            const optionElement = document.createElement("option");\n            optionElement.textContent = option.displayValue;\n            optionElement.value = option.exportValue;\n\n            if (this.data.fieldValue.includes(option.exportValue)) {\n              optionElement.setAttribute("selected", true);\n            }\n\n            selectElement.appendChild(optionElement);\n          }\n\n          selectElement.addEventListener("input", function (event) {\n            const options = event.target.options;\n            const value = options[options.selectedIndex].value;\n            storage.setValue(id, value);\n          });\n          this.container.appendChild(selectElement);\n          return this.container;\n        }\n\n      }\n\n      class PopupAnnotationElement extends AnnotationElement {\n        constructor(parameters) {\n          const isRenderable = !!(parameters.data.title || parameters.data.contents);\n          super(parameters, isRenderable);\n        }\n\n        render() {\n          const IGNORE_TYPES = ["Line", "Square", "Circle", "PolyLine", "Polygon", "Ink"];\n          this.container.className = "popupAnnotation";\n\n          if (IGNORE_TYPES.includes(this.data.parentType)) {\n            return this.container;\n          }\n\n          const selector = `[data-annotation-id="${this.data.parentId}"]`;\n          const parentElement = this.layer.querySelector(selector);\n\n          if (!parentElement) {\n            return this.container;\n          }\n\n          const popup = new PopupElement({\n            container: this.container,\n            trigger: parentElement,\n            color: this.data.color,\n            title: this.data.title,\n            modificationDate: this.data.modificationDate,\n            contents: this.data.contents\n          });\n          const parentLeft = parseFloat(parentElement.style.left);\n          const parentWidth = parseFloat(parentElement.style.width);\n          this.container.style.transformOrigin = `-${parentLeft + parentWidth}px -${parentElement.style.top}`;\n          this.container.style.left = `${parentLeft + parentWidth}px`;\n          this.container.appendChild(popup.render());\n          return this.container;\n        }\n\n      }\n\n      class PopupElement {\n        constructor(parameters) {\n          this.container = parameters.container;\n          this.trigger = parameters.trigger;\n          this.color = parameters.color;\n          this.title = parameters.title;\n          this.modificationDate = parameters.modificationDate;\n          this.contents = parameters.contents;\n          this.hideWrapper = parameters.hideWrapper || false;\n          this.pinned = false;\n        }\n\n        render() {\n          const BACKGROUND_ENLIGHT = 0.7;\n          const wrapper = document.createElement("div");\n          wrapper.className = "popupWrapper";\n          this.hideElement = this.hideWrapper ? wrapper : this.container;\n          this.hideElement.setAttribute("hidden", true);\n          const popup = document.createElement("div");\n          popup.className = "popup";\n          const color = this.color;\n\n          if (color) {\n            const r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];\n            const g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];\n            const b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];\n            popup.style.backgroundColor = _util.Util.makeCssRgb(r | 0, g | 0, b | 0);\n          }\n\n          const title = document.createElement("h1");\n          title.textContent = this.title;\n          popup.appendChild(title);\n\n          const dateObject = _display_utils.PDFDateString.toDateObject(this.modificationDate);\n\n          if (dateObject) {\n            const modificationDate = document.createElement("span");\n            modificationDate.textContent = "{{date}}, {{time}}";\n            modificationDate.dataset.l10nId = "annotation_date_string";\n            modificationDate.dataset.l10nArgs = JSON.stringify({\n              date: dateObject.toLocaleDateString(),\n              time: dateObject.toLocaleTimeString()\n            });\n            popup.appendChild(modificationDate);\n          }\n\n          const contents = this._formatContents(this.contents);\n\n          popup.appendChild(contents);\n          this.trigger.addEventListener("click", this._toggle.bind(this));\n          this.trigger.addEventListener("mouseover", this._show.bind(this, false));\n          this.trigger.addEventListener("mouseout", this._hide.bind(this, false));\n          popup.addEventListener("click", this._hide.bind(this, true));\n          wrapper.appendChild(popup);\n          return wrapper;\n        }\n\n        _formatContents(contents) {\n          const p = document.createElement("p");\n          const lines = contents.split(/(?:\\r\\n?|\\n)/);\n\n          for (let i = 0, ii = lines.length; i < ii; ++i) {\n            const line = lines[i];\n            p.appendChild(document.createTextNode(line));\n\n            if (i < ii - 1) {\n              p.appendChild(document.createElement("br"));\n            }\n          }\n\n          return p;\n        }\n\n        _toggle() {\n          if (this.pinned) {\n            this._hide(true);\n          } else {\n            this._show(true);\n          }\n        }\n\n        _show(pin = false) {\n          if (pin) {\n            this.pinned = true;\n          }\n\n          if (this.hideElement.hasAttribute("hidden")) {\n            this.hideElement.removeAttribute("hidden");\n            this.container.style.zIndex += 1;\n          }\n        }\n\n        _hide(unpin = true) {\n          if (unpin) {\n            this.pinned = false;\n          }\n\n          if (!this.hideElement.hasAttribute("hidden") && !this.pinned) {\n            this.hideElement.setAttribute("hidden", true);\n            this.container.style.zIndex -= 1;\n          }\n        }\n\n      }\n\n      class FreeTextAnnotationElement extends AnnotationElement {\n        constructor(parameters) {\n          const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n          super(parameters, isRenderable, true);\n        }\n\n        render() {\n          this.container.className = "freeTextAnnotation";\n\n          if (!this.data.hasPopup) {\n            this._createPopup(this.container, null, this.data);\n          }\n\n          return this.container;\n        }\n\n      }\n\n      class LineAnnotationElement extends AnnotationElement {\n        constructor(parameters) {\n          const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n          super(parameters, isRenderable, true);\n        }\n\n        render() {\n          this.container.className = "lineAnnotation";\n          const data = this.data;\n          const width = data.rect[2] - data.rect[0];\n          const height = data.rect[3] - data.rect[1];\n          const svg = this.svgFactory.create(width, height);\n          const line = this.svgFactory.createElement("svg:line");\n          line.setAttribute("x1", data.rect[2] - data.lineCoordinates[0]);\n          line.setAttribute("y1", data.rect[3] - data.lineCoordinates[1]);\n          line.setAttribute("x2", data.rect[2] - data.lineCoordinates[2]);\n          line.setAttribute("y2", data.rect[3] - data.lineCoordinates[3]);\n          line.setAttribute("stroke-width", data.borderStyle.width || 1);\n          line.setAttribute("stroke", "transparent");\n          svg.appendChild(line);\n          this.container.append(svg);\n\n          this._createPopup(this.container, line, data);\n\n          return this.container;\n        }\n\n      }\n\n      class SquareAnnotationElement extends AnnotationElement {\n        constructor(parameters) {\n          const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n          super(parameters, isRenderable, true);\n        }\n\n        render() {\n          this.container.className = "squareAnnotation";\n          const data = this.data;\n          const width = data.rect[2] - data.rect[0];\n          const height = data.rect[3] - data.rect[1];\n          const svg = this.svgFactory.create(width, height);\n          const borderWidth = data.borderStyle.width;\n          const square = this.svgFactory.createElement("svg:rect");\n          square.setAttribute("x", borderWidth / 2);\n          square.setAttribute("y", borderWidth / 2);\n          square.setAttribute("width", width - borderWidth);\n          square.setAttribute("height", height - borderWidth);\n          square.setAttribute("stroke-width", borderWidth || 1);\n          square.setAttribute("stroke", "transparent");\n          square.setAttribute("fill", "none");\n          svg.appendChild(square);\n          this.container.append(svg);\n\n          this._createPopup(this.container, square, data);\n\n          return this.container;\n        }\n\n      }\n\n      class CircleAnnotationElement extends AnnotationElement {\n        constructor(parameters) {\n          const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n          super(parameters, isRenderable, true);\n        }\n\n        render() {\n          this.container.className = "circleAnnotation";\n          const data = this.data;\n          const width = data.rect[2] - data.rect[0];\n          const height = data.rect[3] - data.rect[1];\n          const svg = this.svgFactory.create(width, height);\n          const borderWidth = data.borderStyle.width;\n          const circle = this.svgFactory.createElement("svg:ellipse");\n          circle.setAttribute("cx", width / 2);\n          circle.setAttribute("cy", height / 2);\n          circle.setAttribute("rx", width / 2 - borderWidth / 2);\n          circle.setAttribute("ry", height / 2 - borderWidth / 2);\n          circle.setAttribute("stroke-width", borderWidth || 1);\n          circle.setAttribute("stroke", "transparent");\n          circle.setAttribute("fill", "none");\n          svg.appendChild(circle);\n          this.container.append(svg);\n\n          this._createPopup(this.container, circle, data);\n\n          return this.container;\n        }\n\n      }\n\n      class PolylineAnnotationElement extends AnnotationElement {\n        constructor(parameters) {\n          const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n          super(parameters, isRenderable, true);\n          this.containerClassName = "polylineAnnotation";\n          this.svgElementName = "svg:polyline";\n        }\n\n        render() {\n          this.container.className = this.containerClassName;\n          const data = this.data;\n          const width = data.rect[2] - data.rect[0];\n          const height = data.rect[3] - data.rect[1];\n          const svg = this.svgFactory.create(width, height);\n          let points = [];\n\n          for (const coordinate of data.vertices) {\n            const x = coordinate.x - data.rect[0];\n            const y = data.rect[3] - coordinate.y;\n            points.push(x + "," + y);\n          }\n\n          points = points.join(" ");\n          const polyline = this.svgFactory.createElement(this.svgElementName);\n          polyline.setAttribute("points", points);\n          polyline.setAttribute("stroke-width", data.borderStyle.width || 1);\n          polyline.setAttribute("stroke", "transparent");\n          polyline.setAttribute("fill", "none");\n          svg.appendChild(polyline);\n          this.container.append(svg);\n\n          this._createPopup(this.container, polyline, data);\n\n          return this.container;\n        }\n\n      }\n\n      class PolygonAnnotationElement extends PolylineAnnotationElement {\n        constructor(parameters) {\n          super(parameters);\n          this.containerClassName = "polygonAnnotation";\n          this.svgElementName = "svg:polygon";\n        }\n\n      }\n\n      class CaretAnnotationElement extends AnnotationElement {\n        constructor(parameters) {\n          const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n          super(parameters, isRenderable, true);\n        }\n\n        render() {\n          this.container.className = "caretAnnotation";\n\n          if (!this.data.hasPopup) {\n            this._createPopup(this.container, null, this.data);\n          }\n\n          return this.container;\n        }\n\n      }\n\n      class InkAnnotationElement extends AnnotationElement {\n        constructor(parameters) {\n          const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n          super(parameters, isRenderable, true);\n          this.containerClassName = "inkAnnotation";\n          this.svgElementName = "svg:polyline";\n        }\n\n        render() {\n          this.container.className = this.containerClassName;\n          const data = this.data;\n          const width = data.rect[2] - data.rect[0];\n          const height = data.rect[3] - data.rect[1];\n          const svg = this.svgFactory.create(width, height);\n\n          for (const inkList of data.inkLists) {\n            let points = [];\n\n            for (const coordinate of inkList) {\n              const x = coordinate.x - data.rect[0];\n              const y = data.rect[3] - coordinate.y;\n              points.push(`${x},${y}`);\n            }\n\n            points = points.join(" ");\n            const polyline = this.svgFactory.createElement(this.svgElementName);\n            polyline.setAttribute("points", points);\n            polyline.setAttribute("stroke-width", data.borderStyle.width || 1);\n            polyline.setAttribute("stroke", "transparent");\n            polyline.setAttribute("fill", "none");\n\n            this._createPopup(this.container, polyline, data);\n\n            svg.appendChild(polyline);\n          }\n\n          this.container.append(svg);\n          return this.container;\n        }\n\n      }\n\n      class HighlightAnnotationElement extends AnnotationElement {\n        constructor(parameters) {\n          const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n          super(parameters, isRenderable, true);\n        }\n\n        render() {\n          this.container.className = "highlightAnnotation";\n\n          if (!this.data.hasPopup) {\n            this._createPopup(this.container, null, this.data);\n          }\n\n          return this.container;\n        }\n\n      }\n\n      class UnderlineAnnotationElement extends AnnotationElement {\n        constructor(parameters) {\n          const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n          super(parameters, isRenderable, true);\n        }\n\n        render() {\n          this.container.className = "underlineAnnotation";\n\n          if (!this.data.hasPopup) {\n            this._createPopup(this.container, null, this.data);\n          }\n\n          return this.container;\n        }\n\n      }\n\n      class SquigglyAnnotationElement extends AnnotationElement {\n        constructor(parameters) {\n          const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n          super(parameters, isRenderable, true);\n        }\n\n        render() {\n          this.container.className = "squigglyAnnotation";\n\n          if (!this.data.hasPopup) {\n            this._createPopup(this.container, null, this.data);\n          }\n\n          return this.container;\n        }\n\n      }\n\n      class StrikeOutAnnotationElement extends AnnotationElement {\n        constructor(parameters) {\n          const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n          super(parameters, isRenderable, true);\n        }\n\n        render() {\n          this.container.className = "strikeoutAnnotation";\n\n          if (!this.data.hasPopup) {\n            this._createPopup(this.container, null, this.data);\n          }\n\n          return this.container;\n        }\n\n      }\n\n      class StampAnnotationElement extends AnnotationElement {\n        constructor(parameters) {\n          const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n          super(parameters, isRenderable, true);\n        }\n\n        render() {\n          this.container.className = "stampAnnotation";\n\n          if (!this.data.hasPopup) {\n            this._createPopup(this.container, null, this.data);\n          }\n\n          return this.container;\n        }\n\n      }\n\n      class FileAttachmentAnnotationElement extends AnnotationElement {\n        constructor(parameters) {\n          super(parameters, true);\n          const {\n            filename,\n            content\n          } = this.data.file;\n          this.filename = (0, _display_utils.getFilenameFromUrl)(filename);\n          this.content = content;\n\n          if (this.linkService.eventBus) {\n            this.linkService.eventBus.dispatch("fileattachmentannotation", {\n              source: this,\n              id: (0, _util.stringToPDFString)(filename),\n              filename,\n              content\n            });\n          }\n        }\n\n        render() {\n          this.container.className = "fileAttachmentAnnotation";\n          const trigger = document.createElement("div");\n          trigger.style.height = this.container.style.height;\n          trigger.style.width = this.container.style.width;\n          trigger.addEventListener("dblclick", this._download.bind(this));\n\n          if (!this.data.hasPopup && (this.data.title || this.data.contents)) {\n            this._createPopup(this.container, trigger, this.data);\n          }\n\n          this.container.appendChild(trigger);\n          return this.container;\n        }\n\n        _download() {\n          if (!this.downloadManager) {\n            (0, _util.warn)("Download cannot be started due to unavailable download manager");\n            return;\n          }\n\n          this.downloadManager.downloadData(this.content, this.filename, "");\n        }\n\n      }\n\n      class AnnotationLayer {\n        static render(parameters) {\n          const sortedAnnotations = [],\n                popupAnnotations = [];\n\n          for (const data of parameters.annotations) {\n            if (!data) {\n              continue;\n            }\n\n            if (data.annotationType === _util.AnnotationType.POPUP) {\n              popupAnnotations.push(data);\n              continue;\n            }\n\n            sortedAnnotations.push(data);\n          }\n\n          if (popupAnnotations.length) {\n            sortedAnnotations.push(...popupAnnotations);\n          }\n\n          for (const data of sortedAnnotations) {\n            const element = AnnotationElementFactory.create({\n              data,\n              layer: parameters.div,\n              page: parameters.page,\n              viewport: parameters.viewport,\n              linkService: parameters.linkService,\n              downloadManager: parameters.downloadManager,\n              imageResourcesPath: parameters.imageResourcesPath || "",\n              renderInteractiveForms: typeof parameters.renderInteractiveForms === "boolean" ? parameters.renderInteractiveForms : true,\n              svgFactory: new _display_utils.DOMSVGFactory(),\n              annotationStorage: parameters.annotationStorage || new _annotation_storage.AnnotationStorage()\n            });\n\n            if (element.isRenderable) {\n              parameters.div.appendChild(element.render());\n            }\n          }\n        }\n\n        static update(parameters) {\n          for (const data of parameters.annotations) {\n            const element = parameters.div.querySelector(`[data-annotation-id="${data.id}"]`);\n\n            if (element) {\n              element.style.transform = `matrix(${parameters.viewport.transform.join(",")})`;\n            }\n          }\n\n          parameters.div.removeAttribute("hidden");\n        }\n\n      }\n\n      exports.AnnotationLayer = AnnotationLayer;\n      /***/\n    },\n    /* 20 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.renderTextLayer = void 0;\n\n      var _util = __w_pdfjs_require__(2);\n\n      var renderTextLayer = function renderTextLayerClosure() {\n        var MAX_TEXT_DIVS_TO_RENDER = 100000;\n        var NonWhitespaceRegexp = /\\S/;\n\n        function isAllWhitespace(str) {\n          return !NonWhitespaceRegexp.test(str);\n        }\n\n        function appendText(task, geom, styles) {\n          var textDiv = document.createElement("span");\n          var textDivProperties = {\n            angle: 0,\n            canvasWidth: 0,\n            isWhitespace: false,\n            originalTransform: null,\n            paddingBottom: 0,\n            paddingLeft: 0,\n            paddingRight: 0,\n            paddingTop: 0,\n            scale: 1\n          };\n\n          task._textDivs.push(textDiv);\n\n          if (isAllWhitespace(geom.str)) {\n            textDivProperties.isWhitespace = true;\n\n            task._textDivProperties.set(textDiv, textDivProperties);\n\n            return;\n          }\n\n          var tx = _util.Util.transform(task._viewport.transform, geom.transform);\n\n          var angle = Math.atan2(tx[1], tx[0]);\n          var style = styles[geom.fontName];\n\n          if (style.vertical) {\n            angle += Math.PI / 2;\n          }\n\n          var fontHeight = Math.sqrt(tx[2] * tx[2] + tx[3] * tx[3]);\n          var fontAscent = fontHeight;\n\n          if (style.ascent) {\n            fontAscent = style.ascent * fontAscent;\n          } else if (style.descent) {\n            fontAscent = (1 + style.descent) * fontAscent;\n          }\n\n          let left, top;\n\n          if (angle === 0) {\n            left = tx[4];\n            top = tx[5] - fontAscent;\n          } else {\n            left = tx[4] + fontAscent * Math.sin(angle);\n            top = tx[5] - fontAscent * Math.cos(angle);\n          }\n\n          textDiv.style.left = `${left}px`;\n          textDiv.style.top = `${top}px`;\n          textDiv.style.fontSize = `${fontHeight}px`;\n          textDiv.style.fontFamily = style.fontFamily;\n          textDiv.textContent = geom.str;\n\n          if (task._fontInspectorEnabled) {\n            textDiv.dataset.fontName = geom.fontName;\n          }\n\n          if (angle !== 0) {\n            textDivProperties.angle = angle * (180 / Math.PI);\n          }\n\n          let shouldScaleText = false;\n\n          if (geom.str.length > 1) {\n            shouldScaleText = true;\n          } else if (geom.transform[0] !== geom.transform[3]) {\n            const absScaleX = Math.abs(geom.transform[0]),\n                  absScaleY = Math.abs(geom.transform[3]);\n\n            if (absScaleX !== absScaleY && Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5) {\n              shouldScaleText = true;\n            }\n          }\n\n          if (shouldScaleText) {\n            if (style.vertical) {\n              textDivProperties.canvasWidth = geom.height * task._viewport.scale;\n            } else {\n              textDivProperties.canvasWidth = geom.width * task._viewport.scale;\n            }\n          }\n\n          task._textDivProperties.set(textDiv, textDivProperties);\n\n          if (task._textContentStream) {\n            task._layoutText(textDiv);\n          }\n\n          if (task._enhanceTextSelection) {\n            var angleCos = 1,\n                angleSin = 0;\n\n            if (angle !== 0) {\n              angleCos = Math.cos(angle);\n              angleSin = Math.sin(angle);\n            }\n\n            var divWidth = (style.vertical ? geom.height : geom.width) * task._viewport.scale;\n            var divHeight = fontHeight;\n            var m, b;\n\n            if (angle !== 0) {\n              m = [angleCos, angleSin, -angleSin, angleCos, left, top];\n              b = _util.Util.getAxialAlignedBoundingBox([0, 0, divWidth, divHeight], m);\n            } else {\n              b = [left, top, left + divWidth, top + divHeight];\n            }\n\n            task._bounds.push({\n              left: b[0],\n              top: b[1],\n              right: b[2],\n              bottom: b[3],\n              div: textDiv,\n              size: [divWidth, divHeight],\n              m\n            });\n          }\n        }\n\n        function render(task) {\n          if (task._canceled) {\n            return;\n          }\n\n          var textDivs = task._textDivs;\n          var capability = task._capability;\n          var textDivsLength = textDivs.length;\n\n          if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {\n            task._renderingDone = true;\n            capability.resolve();\n            return;\n          }\n\n          if (!task._textContentStream) {\n            for (var i = 0; i < textDivsLength; i++) {\n              task._layoutText(textDivs[i]);\n            }\n          }\n\n          task._renderingDone = true;\n          capability.resolve();\n        }\n\n        function findPositiveMin(ts, offset, count) {\n          let result = 0;\n\n          for (let i = 0; i < count; i++) {\n            const t = ts[offset++];\n\n            if (t > 0) {\n              result = result ? Math.min(t, result) : t;\n            }\n          }\n\n          return result;\n        }\n\n        function expand(task) {\n          var bounds = task._bounds;\n          var viewport = task._viewport;\n          var expanded = expandBounds(viewport.width, viewport.height, bounds);\n\n          for (var i = 0; i < expanded.length; i++) {\n            var div = bounds[i].div;\n\n            var divProperties = task._textDivProperties.get(div);\n\n            if (divProperties.angle === 0) {\n              divProperties.paddingLeft = bounds[i].left - expanded[i].left;\n              divProperties.paddingTop = bounds[i].top - expanded[i].top;\n              divProperties.paddingRight = expanded[i].right - bounds[i].right;\n              divProperties.paddingBottom = expanded[i].bottom - bounds[i].bottom;\n\n              task._textDivProperties.set(div, divProperties);\n\n              continue;\n            }\n\n            var e = expanded[i],\n                b = bounds[i];\n            var m = b.m,\n                c = m[0],\n                s = m[1];\n            var points = [[0, 0], [0, b.size[1]], [b.size[0], 0], b.size];\n            var ts = new Float64Array(64);\n            points.forEach(function (p, j) {\n              var t = _util.Util.applyTransform(p, m);\n\n              ts[j + 0] = c && (e.left - t[0]) / c;\n              ts[j + 4] = s && (e.top - t[1]) / s;\n              ts[j + 8] = c && (e.right - t[0]) / c;\n              ts[j + 12] = s && (e.bottom - t[1]) / s;\n              ts[j + 16] = s && (e.left - t[0]) / -s;\n              ts[j + 20] = c && (e.top - t[1]) / c;\n              ts[j + 24] = s && (e.right - t[0]) / -s;\n              ts[j + 28] = c && (e.bottom - t[1]) / c;\n              ts[j + 32] = c && (e.left - t[0]) / -c;\n              ts[j + 36] = s && (e.top - t[1]) / -s;\n              ts[j + 40] = c && (e.right - t[0]) / -c;\n              ts[j + 44] = s && (e.bottom - t[1]) / -s;\n              ts[j + 48] = s && (e.left - t[0]) / s;\n              ts[j + 52] = c && (e.top - t[1]) / -c;\n              ts[j + 56] = s && (e.right - t[0]) / s;\n              ts[j + 60] = c && (e.bottom - t[1]) / -c;\n            });\n            var boxScale = 1 + Math.min(Math.abs(c), Math.abs(s));\n            divProperties.paddingLeft = findPositiveMin(ts, 32, 16) / boxScale;\n            divProperties.paddingTop = findPositiveMin(ts, 48, 16) / boxScale;\n            divProperties.paddingRight = findPositiveMin(ts, 0, 16) / boxScale;\n            divProperties.paddingBottom = findPositiveMin(ts, 16, 16) / boxScale;\n\n            task._textDivProperties.set(div, divProperties);\n          }\n        }\n\n        function expandBounds(width, height, boxes) {\n          var bounds = boxes.map(function (box, i) {\n            return {\n              x1: box.left,\n              y1: box.top,\n              x2: box.right,\n              y2: box.bottom,\n              index: i,\n              x1New: undefined,\n              x2New: undefined\n            };\n          });\n          expandBoundsLTR(width, bounds);\n          var expanded = new Array(boxes.length);\n          bounds.forEach(function (b) {\n            var i = b.index;\n            expanded[i] = {\n              left: b.x1New,\n              top: 0,\n              right: b.x2New,\n              bottom: 0\n            };\n          });\n          boxes.map(function (box, i) {\n            var e = expanded[i],\n                b = bounds[i];\n            b.x1 = box.top;\n            b.y1 = width - e.right;\n            b.x2 = box.bottom;\n            b.y2 = width - e.left;\n            b.index = i;\n            b.x1New = undefined;\n            b.x2New = undefined;\n          });\n          expandBoundsLTR(height, bounds);\n          bounds.forEach(function (b) {\n            var i = b.index;\n            expanded[i].top = b.x1New;\n            expanded[i].bottom = b.x2New;\n          });\n          return expanded;\n        }\n\n        function expandBoundsLTR(width, bounds) {\n          bounds.sort(function (a, b) {\n            return a.x1 - b.x1 || a.index - b.index;\n          });\n          var fakeBoundary = {\n            x1: -Infinity,\n            y1: -Infinity,\n            x2: 0,\n            y2: Infinity,\n            index: -1,\n            x1New: 0,\n            x2New: 0\n          };\n          var horizon = [{\n            start: -Infinity,\n            end: Infinity,\n            boundary: fakeBoundary\n          }];\n          bounds.forEach(function (boundary) {\n            var i = 0;\n\n            while (i < horizon.length && horizon[i].end <= boundary.y1) {\n              i++;\n            }\n\n            var j = horizon.length - 1;\n\n            while (j >= 0 && horizon[j].start >= boundary.y2) {\n              j--;\n            }\n\n            var horizonPart, affectedBoundary;\n            var q,\n                k,\n                maxXNew = -Infinity;\n\n            for (q = i; q <= j; q++) {\n              horizonPart = horizon[q];\n              affectedBoundary = horizonPart.boundary;\n              var xNew;\n\n              if (affectedBoundary.x2 > boundary.x1) {\n                xNew = affectedBoundary.index > boundary.index ? affectedBoundary.x1New : boundary.x1;\n              } else if (affectedBoundary.x2New === undefined) {\n                xNew = (affectedBoundary.x2 + boundary.x1) / 2;\n              } else {\n                xNew = affectedBoundary.x2New;\n              }\n\n              if (xNew > maxXNew) {\n                maxXNew = xNew;\n              }\n            }\n\n            boundary.x1New = maxXNew;\n\n            for (q = i; q <= j; q++) {\n              horizonPart = horizon[q];\n              affectedBoundary = horizonPart.boundary;\n\n              if (affectedBoundary.x2New === undefined) {\n                if (affectedBoundary.x2 > boundary.x1) {\n                  if (affectedBoundary.index > boundary.index) {\n                    affectedBoundary.x2New = affectedBoundary.x2;\n                  }\n                } else {\n                  affectedBoundary.x2New = maxXNew;\n                }\n              } else if (affectedBoundary.x2New > maxXNew) {\n                affectedBoundary.x2New = Math.max(maxXNew, affectedBoundary.x2);\n              }\n            }\n\n            var changedHorizon = [],\n                lastBoundary = null;\n\n            for (q = i; q <= j; q++) {\n              horizonPart = horizon[q];\n              affectedBoundary = horizonPart.boundary;\n              var useBoundary = affectedBoundary.x2 > boundary.x2 ? affectedBoundary : boundary;\n\n              if (lastBoundary === useBoundary) {\n                changedHorizon[changedHorizon.length - 1].end = horizonPart.end;\n              } else {\n                changedHorizon.push({\n                  start: horizonPart.start,\n                  end: horizonPart.end,\n                  boundary: useBoundary\n                });\n                lastBoundary = useBoundary;\n              }\n            }\n\n            if (horizon[i].start < boundary.y1) {\n              changedHorizon[0].start = boundary.y1;\n              changedHorizon.unshift({\n                start: horizon[i].start,\n                end: boundary.y1,\n                boundary: horizon[i].boundary\n              });\n            }\n\n            if (boundary.y2 < horizon[j].end) {\n              changedHorizon[changedHorizon.length - 1].end = boundary.y2;\n              changedHorizon.push({\n                start: boundary.y2,\n                end: horizon[j].end,\n                boundary: horizon[j].boundary\n              });\n            }\n\n            for (q = i; q <= j; q++) {\n              horizonPart = horizon[q];\n              affectedBoundary = horizonPart.boundary;\n\n              if (affectedBoundary.x2New !== undefined) {\n                continue;\n              }\n\n              var used = false;\n\n              for (k = i - 1; !used && k >= 0 && horizon[k].start >= affectedBoundary.y1; k--) {\n                used = horizon[k].boundary === affectedBoundary;\n              }\n\n              for (k = j + 1; !used && k < horizon.length && horizon[k].end <= affectedBoundary.y2; k++) {\n                used = horizon[k].boundary === affectedBoundary;\n              }\n\n              for (k = 0; !used && k < changedHorizon.length; k++) {\n                used = changedHorizon[k].boundary === affectedBoundary;\n              }\n\n              if (!used) {\n                affectedBoundary.x2New = maxXNew;\n              }\n            }\n\n            Array.prototype.splice.apply(horizon, [i, j - i + 1].concat(changedHorizon));\n          });\n          horizon.forEach(function (horizonPart) {\n            var affectedBoundary = horizonPart.boundary;\n\n            if (affectedBoundary.x2New === undefined) {\n              affectedBoundary.x2New = Math.max(width, affectedBoundary.x2);\n            }\n          });\n        }\n\n        function TextLayerRenderTask({\n          textContent,\n          textContentStream,\n          container,\n          viewport,\n          textDivs,\n          textContentItemsStr,\n          enhanceTextSelection\n        }) {\n          this._textContent = textContent;\n          this._textContentStream = textContentStream;\n          this._container = container;\n          this._document = container.ownerDocument;\n          this._viewport = viewport;\n          this._textDivs = textDivs || [];\n          this._textContentItemsStr = textContentItemsStr || [];\n          this._enhanceTextSelection = !!enhanceTextSelection;\n          this._fontInspectorEnabled = !!(globalThis.FontInspector && globalThis.FontInspector.enabled);\n          this._reader = null;\n          this._layoutTextLastFontSize = null;\n          this._layoutTextLastFontFamily = null;\n          this._layoutTextCtx = null;\n          this._textDivProperties = new WeakMap();\n          this._renderingDone = false;\n          this._canceled = false;\n          this._capability = (0, _util.createPromiseCapability)();\n          this._renderTimer = null;\n          this._bounds = [];\n\n          this._capability.promise.finally(() => {\n            if (this._layoutTextCtx) {\n              this._layoutTextCtx.canvas.width = 0;\n              this._layoutTextCtx.canvas.height = 0;\n              this._layoutTextCtx = null;\n            }\n          }).catch(() => {});\n        }\n\n        TextLayerRenderTask.prototype = {\n          get promise() {\n            return this._capability.promise;\n          },\n\n          cancel: function TextLayer_cancel() {\n            this._canceled = true;\n\n            if (this._reader) {\n              this._reader.cancel(new _util.AbortException("TextLayer task cancelled."));\n\n              this._reader = null;\n            }\n\n            if (this._renderTimer !== null) {\n              clearTimeout(this._renderTimer);\n              this._renderTimer = null;\n            }\n\n            this._capability.reject(new Error("TextLayer task cancelled."));\n          },\n\n          _processItems(items, styleCache) {\n            for (let i = 0, len = items.length; i < len; i++) {\n              this._textContentItemsStr.push(items[i].str);\n\n              appendText(this, items[i], styleCache);\n            }\n          },\n\n          _layoutText(textDiv) {\n            const textDivProperties = this._textDivProperties.get(textDiv);\n\n            if (textDivProperties.isWhitespace) {\n              return;\n            }\n\n            let transform = "";\n\n            if (textDivProperties.canvasWidth !== 0) {\n              const {\n                fontSize,\n                fontFamily\n              } = textDiv.style;\n\n              if (fontSize !== this._layoutTextLastFontSize || fontFamily !== this._layoutTextLastFontFamily) {\n                this._layoutTextCtx.font = `${fontSize} ${fontFamily}`;\n                this._layoutTextLastFontSize = fontSize;\n                this._layoutTextLastFontFamily = fontFamily;\n              }\n\n              const {\n                width\n              } = this._layoutTextCtx.measureText(textDiv.textContent);\n\n              if (width > 0) {\n                textDivProperties.scale = textDivProperties.canvasWidth / width;\n                transform = `scaleX(${textDivProperties.scale})`;\n              }\n            }\n\n            if (textDivProperties.angle !== 0) {\n              transform = `rotate(${textDivProperties.angle}deg) ${transform}`;\n            }\n\n            if (transform.length > 0) {\n              if (this._enhanceTextSelection) {\n                textDivProperties.originalTransform = transform;\n              }\n\n              textDiv.style.transform = transform;\n            }\n\n            this._textDivProperties.set(textDiv, textDivProperties);\n\n            this._container.appendChild(textDiv);\n          },\n\n          _render: function TextLayer_render(timeout) {\n            const capability = (0, _util.createPromiseCapability)();\n            let styleCache = Object.create(null);\n\n            const canvas = this._document.createElement("canvas");\n\n            canvas.mozOpaque = true;\n            this._layoutTextCtx = canvas.getContext("2d", {\n              alpha: false\n            });\n\n            if (this._textContent) {\n              const textItems = this._textContent.items;\n              const textStyles = this._textContent.styles;\n\n              this._processItems(textItems, textStyles);\n\n              capability.resolve();\n            } else if (this._textContentStream) {\n              const pump = () => {\n                this._reader.read().then(({\n                  value,\n                  done\n                }) => {\n                  if (done) {\n                    capability.resolve();\n                    return;\n                  }\n\n                  Object.assign(styleCache, value.styles);\n\n                  this._processItems(value.items, styleCache);\n\n                  pump();\n                }, capability.reject);\n              };\n\n              this._reader = this._textContentStream.getReader();\n              pump();\n            } else {\n              throw new Error(\'Neither "textContent" nor "textContentStream"\' + " parameters specified.");\n            }\n\n            capability.promise.then(() => {\n              styleCache = null;\n\n              if (!timeout) {\n                render(this);\n              } else {\n                this._renderTimer = setTimeout(() => {\n                  render(this);\n                  this._renderTimer = null;\n                }, timeout);\n              }\n            }, this._capability.reject);\n          },\n          expandTextDivs: function TextLayer_expandTextDivs(expandDivs) {\n            if (!this._enhanceTextSelection || !this._renderingDone) {\n              return;\n            }\n\n            if (this._bounds !== null) {\n              expand(this);\n              this._bounds = null;\n            }\n\n            const transformBuf = [],\n                  paddingBuf = [];\n\n            for (var i = 0, ii = this._textDivs.length; i < ii; i++) {\n              const div = this._textDivs[i];\n\n              const divProps = this._textDivProperties.get(div);\n\n              if (divProps.isWhitespace) {\n                continue;\n              }\n\n              if (expandDivs) {\n                transformBuf.length = 0;\n                paddingBuf.length = 0;\n\n                if (divProps.originalTransform) {\n                  transformBuf.push(divProps.originalTransform);\n                }\n\n                if (divProps.paddingTop > 0) {\n                  paddingBuf.push(`${divProps.paddingTop}px`);\n                  transformBuf.push(`translateY(${-divProps.paddingTop}px)`);\n                } else {\n                  paddingBuf.push(0);\n                }\n\n                if (divProps.paddingRight > 0) {\n                  paddingBuf.push(`${divProps.paddingRight / divProps.scale}px`);\n                } else {\n                  paddingBuf.push(0);\n                }\n\n                if (divProps.paddingBottom > 0) {\n                  paddingBuf.push(`${divProps.paddingBottom}px`);\n                } else {\n                  paddingBuf.push(0);\n                }\n\n                if (divProps.paddingLeft > 0) {\n                  paddingBuf.push(`${divProps.paddingLeft / divProps.scale}px`);\n                  transformBuf.push(`translateX(${-divProps.paddingLeft / divProps.scale}px)`);\n                } else {\n                  paddingBuf.push(0);\n                }\n\n                div.style.padding = paddingBuf.join(" ");\n\n                if (transformBuf.length) {\n                  div.style.transform = transformBuf.join(" ");\n                }\n              } else {\n                div.style.padding = null;\n                div.style.transform = divProps.originalTransform;\n              }\n            }\n          }\n        };\n\n        function renderTextLayer(renderParameters) {\n          var task = new TextLayerRenderTask({\n            textContent: renderParameters.textContent,\n            textContentStream: renderParameters.textContentStream,\n            container: renderParameters.container,\n            viewport: renderParameters.viewport,\n            textDivs: renderParameters.textDivs,\n            textContentItemsStr: renderParameters.textContentItemsStr,\n            enhanceTextSelection: renderParameters.enhanceTextSelection\n          });\n\n          task._render(renderParameters.timeout);\n\n          return task;\n        }\n\n        return renderTextLayer;\n      }();\n\n      exports.renderTextLayer = renderTextLayer;\n      /***/\n    },\n    /* 21 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.SVGGraphics = void 0;\n\n      var _util = __w_pdfjs_require__(2);\n\n      var _display_utils = __w_pdfjs_require__(1);\n\n      var _is_node = __w_pdfjs_require__(4);\n\n      let SVGGraphics = function () {\n        throw new Error("Not implemented: SVGGraphics");\n      };\n\n      exports.SVGGraphics = SVGGraphics;\n      {\n        const SVG_DEFAULTS = {\n          fontStyle: "normal",\n          fontWeight: "normal",\n          fillColor: "#000000"\n        };\n        const XML_NS = "http://www.w3.org/XML/1998/namespace";\n        const XLINK_NS = "http://www.w3.org/1999/xlink";\n        const LINE_CAP_STYLES = ["butt", "round", "square"];\n        const LINE_JOIN_STYLES = ["miter", "round", "bevel"];\n\n        const convertImgDataToPng = function () {\n          const PNG_HEADER = new Uint8Array([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]);\n          const CHUNK_WRAPPER_SIZE = 12;\n          const crcTable = new Int32Array(256);\n\n          for (let i = 0; i < 256; i++) {\n            let c = i;\n\n            for (let h = 0; h < 8; h++) {\n              if (c & 1) {\n                c = 0xedb88320 ^ c >> 1 & 0x7fffffff;\n              } else {\n                c = c >> 1 & 0x7fffffff;\n              }\n            }\n\n            crcTable[i] = c;\n          }\n\n          function crc32(data, start, end) {\n            let crc = -1;\n\n            for (let i = start; i < end; i++) {\n              const a = (crc ^ data[i]) & 0xff;\n              const b = crcTable[a];\n              crc = crc >>> 8 ^ b;\n            }\n\n            return crc ^ -1;\n          }\n\n          function writePngChunk(type, body, data, offset) {\n            let p = offset;\n            const len = body.length;\n            data[p] = len >> 24 & 0xff;\n            data[p + 1] = len >> 16 & 0xff;\n            data[p + 2] = len >> 8 & 0xff;\n            data[p + 3] = len & 0xff;\n            p += 4;\n            data[p] = type.charCodeAt(0) & 0xff;\n            data[p + 1] = type.charCodeAt(1) & 0xff;\n            data[p + 2] = type.charCodeAt(2) & 0xff;\n            data[p + 3] = type.charCodeAt(3) & 0xff;\n            p += 4;\n            data.set(body, p);\n            p += body.length;\n            const crc = crc32(data, offset + 4, p);\n            data[p] = crc >> 24 & 0xff;\n            data[p + 1] = crc >> 16 & 0xff;\n            data[p + 2] = crc >> 8 & 0xff;\n            data[p + 3] = crc & 0xff;\n          }\n\n          function adler32(data, start, end) {\n            let a = 1;\n            let b = 0;\n\n            for (let i = start; i < end; ++i) {\n              a = (a + (data[i] & 0xff)) % 65521;\n              b = (b + a) % 65521;\n            }\n\n            return b << 16 | a;\n          }\n\n          function deflateSync(literals) {\n            if (!_is_node.isNodeJS) {\n              return deflateSyncUncompressed(literals);\n            }\n\n            try {\n              let input;\n\n              if (parseInt(process.versions.node) >= 8) {\n                input = literals;\n              } else {\n                input = Buffer.from(literals);\n              }\n\n              const output = __webpack_require__(2258).deflateSync(input, {\n                level: 9\n              });\n\n              return output instanceof Uint8Array ? output : new Uint8Array(output);\n            } catch (e) {\n              (0, _util.warn)("Not compressing PNG because zlib.deflateSync is unavailable: " + e);\n            }\n\n            return deflateSyncUncompressed(literals);\n          }\n\n          function deflateSyncUncompressed(literals) {\n            let len = literals.length;\n            const maxBlockLength = 0xffff;\n            const deflateBlocks = Math.ceil(len / maxBlockLength);\n            const idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);\n            let pi = 0;\n            idat[pi++] = 0x78;\n            idat[pi++] = 0x9c;\n            let pos = 0;\n\n            while (len > maxBlockLength) {\n              idat[pi++] = 0x00;\n              idat[pi++] = 0xff;\n              idat[pi++] = 0xff;\n              idat[pi++] = 0x00;\n              idat[pi++] = 0x00;\n              idat.set(literals.subarray(pos, pos + maxBlockLength), pi);\n              pi += maxBlockLength;\n              pos += maxBlockLength;\n              len -= maxBlockLength;\n            }\n\n            idat[pi++] = 0x01;\n            idat[pi++] = len & 0xff;\n            idat[pi++] = len >> 8 & 0xff;\n            idat[pi++] = ~len & 0xffff & 0xff;\n            idat[pi++] = (~len & 0xffff) >> 8 & 0xff;\n            idat.set(literals.subarray(pos), pi);\n            pi += literals.length - pos;\n            const adler = adler32(literals, 0, literals.length);\n            idat[pi++] = adler >> 24 & 0xff;\n            idat[pi++] = adler >> 16 & 0xff;\n            idat[pi++] = adler >> 8 & 0xff;\n            idat[pi++] = adler & 0xff;\n            return idat;\n          }\n\n          function encode(imgData, kind, forceDataSchema, isMask) {\n            const width = imgData.width;\n            const height = imgData.height;\n            let bitDepth, colorType, lineSize;\n            const bytes = imgData.data;\n\n            switch (kind) {\n              case _util.ImageKind.GRAYSCALE_1BPP:\n                colorType = 0;\n                bitDepth = 1;\n                lineSize = width + 7 >> 3;\n                break;\n\n              case _util.ImageKind.RGB_24BPP:\n                colorType = 2;\n                bitDepth = 8;\n                lineSize = width * 3;\n                break;\n\n              case _util.ImageKind.RGBA_32BPP:\n                colorType = 6;\n                bitDepth = 8;\n                lineSize = width * 4;\n                break;\n\n              default:\n                throw new Error("invalid format");\n            }\n\n            const literals = new Uint8Array((1 + lineSize) * height);\n            let offsetLiterals = 0,\n                offsetBytes = 0;\n\n            for (let y = 0; y < height; ++y) {\n              literals[offsetLiterals++] = 0;\n              literals.set(bytes.subarray(offsetBytes, offsetBytes + lineSize), offsetLiterals);\n              offsetBytes += lineSize;\n              offsetLiterals += lineSize;\n            }\n\n            if (kind === _util.ImageKind.GRAYSCALE_1BPP && isMask) {\n              offsetLiterals = 0;\n\n              for (let y = 0; y < height; y++) {\n                offsetLiterals++;\n\n                for (let i = 0; i < lineSize; i++) {\n                  literals[offsetLiterals++] ^= 0xff;\n                }\n              }\n            }\n\n            const ihdr = new Uint8Array([width >> 24 & 0xff, width >> 16 & 0xff, width >> 8 & 0xff, width & 0xff, height >> 24 & 0xff, height >> 16 & 0xff, height >> 8 & 0xff, height & 0xff, bitDepth, colorType, 0x00, 0x00, 0x00]);\n            const idat = deflateSync(literals);\n            const pngLength = PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;\n            const data = new Uint8Array(pngLength);\n            let offset = 0;\n            data.set(PNG_HEADER, offset);\n            offset += PNG_HEADER.length;\n            writePngChunk("IHDR", ihdr, data, offset);\n            offset += CHUNK_WRAPPER_SIZE + ihdr.length;\n            writePngChunk("IDATA", idat, data, offset);\n            offset += CHUNK_WRAPPER_SIZE + idat.length;\n            writePngChunk("IEND", new Uint8Array(0), data, offset);\n            return (0, _util.createObjectURL)(data, "image/png", forceDataSchema);\n          }\n\n          return function convertImgDataToPng(imgData, forceDataSchema, isMask) {\n            const kind = imgData.kind === undefined ? _util.ImageKind.GRAYSCALE_1BPP : imgData.kind;\n            return encode(imgData, kind, forceDataSchema, isMask);\n          };\n        }();\n\n        class SVGExtraState {\n          constructor() {\n            this.fontSizeScale = 1;\n            this.fontWeight = SVG_DEFAULTS.fontWeight;\n            this.fontSize = 0;\n            this.textMatrix = _util.IDENTITY_MATRIX;\n            this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n            this.leading = 0;\n            this.textRenderingMode = _util.TextRenderingMode.FILL;\n            this.textMatrixScale = 1;\n            this.x = 0;\n            this.y = 0;\n            this.lineX = 0;\n            this.lineY = 0;\n            this.charSpacing = 0;\n            this.wordSpacing = 0;\n            this.textHScale = 1;\n            this.textRise = 0;\n            this.fillColor = SVG_DEFAULTS.fillColor;\n            this.strokeColor = "#000000";\n            this.fillAlpha = 1;\n            this.strokeAlpha = 1;\n            this.lineWidth = 1;\n            this.lineJoin = "";\n            this.lineCap = "";\n            this.miterLimit = 0;\n            this.dashArray = [];\n            this.dashPhase = 0;\n            this.dependencies = [];\n            this.activeClipUrl = null;\n            this.clipGroup = null;\n            this.maskId = "";\n          }\n\n          clone() {\n            return Object.create(this);\n          }\n\n          setCurrentPoint(x, y) {\n            this.x = x;\n            this.y = y;\n          }\n\n        }\n\n        function opListToTree(opList) {\n          let opTree = [];\n          const tmp = [];\n\n          for (const opListElement of opList) {\n            if (opListElement.fn === "save") {\n              opTree.push({\n                fnId: 92,\n                fn: "group",\n                items: []\n              });\n              tmp.push(opTree);\n              opTree = opTree[opTree.length - 1].items;\n              continue;\n            }\n\n            if (opListElement.fn === "restore") {\n              opTree = tmp.pop();\n            } else {\n              opTree.push(opListElement);\n            }\n          }\n\n          return opTree;\n        }\n\n        function pf(value) {\n          if (Number.isInteger(value)) {\n            return value.toString();\n          }\n\n          const s = value.toFixed(10);\n          let i = s.length - 1;\n\n          if (s[i] !== "0") {\n            return s;\n          }\n\n          do {\n            i--;\n          } while (s[i] === "0");\n\n          return s.substring(0, s[i] === "." ? i : i + 1);\n        }\n\n        function pm(m) {\n          if (m[4] === 0 && m[5] === 0) {\n            if (m[1] === 0 && m[2] === 0) {\n              if (m[0] === 1 && m[3] === 1) {\n                return "";\n              }\n\n              return `scale(${pf(m[0])} ${pf(m[3])})`;\n            }\n\n            if (m[0] === m[3] && m[1] === -m[2]) {\n              const a = Math.acos(m[0]) * 180 / Math.PI;\n              return `rotate(${pf(a)})`;\n            }\n          } else {\n            if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {\n              return `translate(${pf(m[4])} ${pf(m[5])})`;\n            }\n          }\n\n          return `matrix(${pf(m[0])} ${pf(m[1])} ${pf(m[2])} ${pf(m[3])} ${pf(m[4])} ` + `${pf(m[5])})`;\n        }\n\n        let clipCount = 0;\n        let maskCount = 0;\n        let shadingCount = 0;\n        exports.SVGGraphics = SVGGraphics = class SVGGraphics {\n          constructor(commonObjs, objs, forceDataSchema = false) {\n            this.svgFactory = new _display_utils.DOMSVGFactory();\n            this.current = new SVGExtraState();\n            this.transformMatrix = _util.IDENTITY_MATRIX;\n            this.transformStack = [];\n            this.extraStack = [];\n            this.commonObjs = commonObjs;\n            this.objs = objs;\n            this.pendingClip = null;\n            this.pendingEOFill = false;\n            this.embedFonts = false;\n            this.embeddedFonts = Object.create(null);\n            this.cssStyle = null;\n            this.forceDataSchema = !!forceDataSchema;\n            this._operatorIdMapping = [];\n\n            for (const op in _util.OPS) {\n              this._operatorIdMapping[_util.OPS[op]] = op;\n            }\n          }\n\n          save() {\n            this.transformStack.push(this.transformMatrix);\n            const old = this.current;\n            this.extraStack.push(old);\n            this.current = old.clone();\n          }\n\n          restore() {\n            this.transformMatrix = this.transformStack.pop();\n            this.current = this.extraStack.pop();\n            this.pendingClip = null;\n            this.tgrp = null;\n          }\n\n          group(items) {\n            this.save();\n            this.executeOpTree(items);\n            this.restore();\n          }\n\n          loadDependencies(operatorList) {\n            const fnArray = operatorList.fnArray;\n            const argsArray = operatorList.argsArray;\n\n            for (let i = 0, ii = fnArray.length; i < ii; i++) {\n              if (fnArray[i] !== _util.OPS.dependency) {\n                continue;\n              }\n\n              for (const obj of argsArray[i]) {\n                const objsPool = obj.startsWith("g_") ? this.commonObjs : this.objs;\n                const promise = new Promise(resolve => {\n                  objsPool.get(obj, resolve);\n                });\n                this.current.dependencies.push(promise);\n              }\n            }\n\n            return Promise.all(this.current.dependencies);\n          }\n\n          transform(a, b, c, d, e, f) {\n            const transformMatrix = [a, b, c, d, e, f];\n            this.transformMatrix = _util.Util.transform(this.transformMatrix, transformMatrix);\n            this.tgrp = null;\n          }\n\n          getSVG(operatorList, viewport) {\n            this.viewport = viewport;\n\n            const svgElement = this._initialize(viewport);\n\n            return this.loadDependencies(operatorList).then(() => {\n              this.transformMatrix = _util.IDENTITY_MATRIX;\n              this.executeOpTree(this.convertOpList(operatorList));\n              return svgElement;\n            });\n          }\n\n          convertOpList(operatorList) {\n            const operatorIdMapping = this._operatorIdMapping;\n            const argsArray = operatorList.argsArray;\n            const fnArray = operatorList.fnArray;\n            const opList = [];\n\n            for (let i = 0, ii = fnArray.length; i < ii; i++) {\n              const fnId = fnArray[i];\n              opList.push({\n                fnId,\n                fn: operatorIdMapping[fnId],\n                args: argsArray[i]\n              });\n            }\n\n            return opListToTree(opList);\n          }\n\n          executeOpTree(opTree) {\n            for (const opTreeElement of opTree) {\n              const fn = opTreeElement.fn;\n              const fnId = opTreeElement.fnId;\n              const args = opTreeElement.args;\n\n              switch (fnId | 0) {\n                case _util.OPS.beginText:\n                  this.beginText();\n                  break;\n\n                case _util.OPS.dependency:\n                  break;\n\n                case _util.OPS.setLeading:\n                  this.setLeading(args);\n                  break;\n\n                case _util.OPS.setLeadingMoveText:\n                  this.setLeadingMoveText(args[0], args[1]);\n                  break;\n\n                case _util.OPS.setFont:\n                  this.setFont(args);\n                  break;\n\n                case _util.OPS.showText:\n                  this.showText(args[0]);\n                  break;\n\n                case _util.OPS.showSpacedText:\n                  this.showText(args[0]);\n                  break;\n\n                case _util.OPS.endText:\n                  this.endText();\n                  break;\n\n                case _util.OPS.moveText:\n                  this.moveText(args[0], args[1]);\n                  break;\n\n                case _util.OPS.setCharSpacing:\n                  this.setCharSpacing(args[0]);\n                  break;\n\n                case _util.OPS.setWordSpacing:\n                  this.setWordSpacing(args[0]);\n                  break;\n\n                case _util.OPS.setHScale:\n                  this.setHScale(args[0]);\n                  break;\n\n                case _util.OPS.setTextMatrix:\n                  this.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);\n                  break;\n\n                case _util.OPS.setTextRise:\n                  this.setTextRise(args[0]);\n                  break;\n\n                case _util.OPS.setTextRenderingMode:\n                  this.setTextRenderingMode(args[0]);\n                  break;\n\n                case _util.OPS.setLineWidth:\n                  this.setLineWidth(args[0]);\n                  break;\n\n                case _util.OPS.setLineJoin:\n                  this.setLineJoin(args[0]);\n                  break;\n\n                case _util.OPS.setLineCap:\n                  this.setLineCap(args[0]);\n                  break;\n\n                case _util.OPS.setMiterLimit:\n                  this.setMiterLimit(args[0]);\n                  break;\n\n                case _util.OPS.setFillRGBColor:\n                  this.setFillRGBColor(args[0], args[1], args[2]);\n                  break;\n\n                case _util.OPS.setStrokeRGBColor:\n                  this.setStrokeRGBColor(args[0], args[1], args[2]);\n                  break;\n\n                case _util.OPS.setStrokeColorN:\n                  this.setStrokeColorN(args);\n                  break;\n\n                case _util.OPS.setFillColorN:\n                  this.setFillColorN(args);\n                  break;\n\n                case _util.OPS.shadingFill:\n                  this.shadingFill(args[0]);\n                  break;\n\n                case _util.OPS.setDash:\n                  this.setDash(args[0], args[1]);\n                  break;\n\n                case _util.OPS.setRenderingIntent:\n                  this.setRenderingIntent(args[0]);\n                  break;\n\n                case _util.OPS.setFlatness:\n                  this.setFlatness(args[0]);\n                  break;\n\n                case _util.OPS.setGState:\n                  this.setGState(args[0]);\n                  break;\n\n                case _util.OPS.fill:\n                  this.fill();\n                  break;\n\n                case _util.OPS.eoFill:\n                  this.eoFill();\n                  break;\n\n                case _util.OPS.stroke:\n                  this.stroke();\n                  break;\n\n                case _util.OPS.fillStroke:\n                  this.fillStroke();\n                  break;\n\n                case _util.OPS.eoFillStroke:\n                  this.eoFillStroke();\n                  break;\n\n                case _util.OPS.clip:\n                  this.clip("nonzero");\n                  break;\n\n                case _util.OPS.eoClip:\n                  this.clip("evenodd");\n                  break;\n\n                case _util.OPS.paintSolidColorImageMask:\n                  this.paintSolidColorImageMask();\n                  break;\n\n                case _util.OPS.paintImageXObject:\n                  this.paintImageXObject(args[0]);\n                  break;\n\n                case _util.OPS.paintInlineImageXObject:\n                  this.paintInlineImageXObject(args[0]);\n                  break;\n\n                case _util.OPS.paintImageMaskXObject:\n                  this.paintImageMaskXObject(args[0]);\n                  break;\n\n                case _util.OPS.paintFormXObjectBegin:\n                  this.paintFormXObjectBegin(args[0], args[1]);\n                  break;\n\n                case _util.OPS.paintFormXObjectEnd:\n                  this.paintFormXObjectEnd();\n                  break;\n\n                case _util.OPS.closePath:\n                  this.closePath();\n                  break;\n\n                case _util.OPS.closeStroke:\n                  this.closeStroke();\n                  break;\n\n                case _util.OPS.closeFillStroke:\n                  this.closeFillStroke();\n                  break;\n\n                case _util.OPS.closeEOFillStroke:\n                  this.closeEOFillStroke();\n                  break;\n\n                case _util.OPS.nextLine:\n                  this.nextLine();\n                  break;\n\n                case _util.OPS.transform:\n                  this.transform(args[0], args[1], args[2], args[3], args[4], args[5]);\n                  break;\n\n                case _util.OPS.constructPath:\n                  this.constructPath(args[0], args[1]);\n                  break;\n\n                case _util.OPS.endPath:\n                  this.endPath();\n                  break;\n\n                case 92:\n                  this.group(opTreeElement.items);\n                  break;\n\n                default:\n                  (0, _util.warn)(`Unimplemented operator ${fn}`);\n                  break;\n              }\n            }\n          }\n\n          setWordSpacing(wordSpacing) {\n            this.current.wordSpacing = wordSpacing;\n          }\n\n          setCharSpacing(charSpacing) {\n            this.current.charSpacing = charSpacing;\n          }\n\n          nextLine() {\n            this.moveText(0, this.current.leading);\n          }\n\n          setTextMatrix(a, b, c, d, e, f) {\n            const current = this.current;\n            current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];\n            current.textMatrixScale = Math.sqrt(a * a + b * b);\n            current.x = current.lineX = 0;\n            current.y = current.lineY = 0;\n            current.xcoords = [];\n            current.ycoords = [];\n            current.tspan = this.svgFactory.createElement("svg:tspan");\n            current.tspan.setAttributeNS(null, "font-family", current.fontFamily);\n            current.tspan.setAttributeNS(null, "font-size", `${pf(current.fontSize)}px`);\n            current.tspan.setAttributeNS(null, "y", pf(-current.y));\n            current.txtElement = this.svgFactory.createElement("svg:text");\n            current.txtElement.appendChild(current.tspan);\n          }\n\n          beginText() {\n            const current = this.current;\n            current.x = current.lineX = 0;\n            current.y = current.lineY = 0;\n            current.textMatrix = _util.IDENTITY_MATRIX;\n            current.lineMatrix = _util.IDENTITY_MATRIX;\n            current.textMatrixScale = 1;\n            current.tspan = this.svgFactory.createElement("svg:tspan");\n            current.txtElement = this.svgFactory.createElement("svg:text");\n            current.txtgrp = this.svgFactory.createElement("svg:g");\n            current.xcoords = [];\n            current.ycoords = [];\n          }\n\n          moveText(x, y) {\n            const current = this.current;\n            current.x = current.lineX += x;\n            current.y = current.lineY += y;\n            current.xcoords = [];\n            current.ycoords = [];\n            current.tspan = this.svgFactory.createElement("svg:tspan");\n            current.tspan.setAttributeNS(null, "font-family", current.fontFamily);\n            current.tspan.setAttributeNS(null, "font-size", `${pf(current.fontSize)}px`);\n            current.tspan.setAttributeNS(null, "y", pf(-current.y));\n          }\n\n          showText(glyphs) {\n            const current = this.current;\n            const font = current.font;\n            const fontSize = current.fontSize;\n\n            if (fontSize === 0) {\n              return;\n            }\n\n            const fontSizeScale = current.fontSizeScale;\n            const charSpacing = current.charSpacing;\n            const wordSpacing = current.wordSpacing;\n            const fontDirection = current.fontDirection;\n            const textHScale = current.textHScale * fontDirection;\n            const vertical = font.vertical;\n            const spacingDir = vertical ? 1 : -1;\n            const defaultVMetrics = font.defaultVMetrics;\n            const widthAdvanceScale = fontSize * current.fontMatrix[0];\n            let x = 0;\n\n            for (const glyph of glyphs) {\n              if (glyph === null) {\n                x += fontDirection * wordSpacing;\n                continue;\n              } else if ((0, _util.isNum)(glyph)) {\n                x += spacingDir * glyph * fontSize / 1000;\n                continue;\n              }\n\n              const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n              const character = glyph.fontChar;\n              let scaledX, scaledY;\n              let width = glyph.width;\n\n              if (vertical) {\n                let vx;\n                const vmetric = glyph.vmetric || defaultVMetrics;\n                vx = glyph.vmetric ? vmetric[1] : width * 0.5;\n                vx = -vx * widthAdvanceScale;\n                const vy = vmetric[2] * widthAdvanceScale;\n                width = vmetric ? -vmetric[0] : width;\n                scaledX = vx / fontSizeScale;\n                scaledY = (x + vy) / fontSizeScale;\n              } else {\n                scaledX = x / fontSizeScale;\n                scaledY = 0;\n              }\n\n              if (glyph.isInFont || font.missingFile) {\n                current.xcoords.push(current.x + scaledX);\n\n                if (vertical) {\n                  current.ycoords.push(-current.y + scaledY);\n                }\n\n                current.tspan.textContent += character;\n              } else {}\n\n              let charWidth;\n\n              if (vertical) {\n                charWidth = width * widthAdvanceScale - spacing * fontDirection;\n              } else {\n                charWidth = width * widthAdvanceScale + spacing * fontDirection;\n              }\n\n              x += charWidth;\n            }\n\n            current.tspan.setAttributeNS(null, "x", current.xcoords.map(pf).join(" "));\n\n            if (vertical) {\n              current.tspan.setAttributeNS(null, "y", current.ycoords.map(pf).join(" "));\n            } else {\n              current.tspan.setAttributeNS(null, "y", pf(-current.y));\n            }\n\n            if (vertical) {\n              current.y -= x;\n            } else {\n              current.x += x * textHScale;\n            }\n\n            current.tspan.setAttributeNS(null, "font-family", current.fontFamily);\n            current.tspan.setAttributeNS(null, "font-size", `${pf(current.fontSize)}px`);\n\n            if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {\n              current.tspan.setAttributeNS(null, "font-style", current.fontStyle);\n            }\n\n            if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {\n              current.tspan.setAttributeNS(null, "font-weight", current.fontWeight);\n            }\n\n            const fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n\n            if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n              if (current.fillColor !== SVG_DEFAULTS.fillColor) {\n                current.tspan.setAttributeNS(null, "fill", current.fillColor);\n              }\n\n              if (current.fillAlpha < 1) {\n                current.tspan.setAttributeNS(null, "fill-opacity", current.fillAlpha);\n              }\n            } else if (current.textRenderingMode === _util.TextRenderingMode.ADD_TO_PATH) {\n              current.tspan.setAttributeNS(null, "fill", "transparent");\n            } else {\n              current.tspan.setAttributeNS(null, "fill", "none");\n            }\n\n            if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n              const lineWidthScale = 1 / (current.textMatrixScale || 1);\n\n              this._setStrokeAttributes(current.tspan, lineWidthScale);\n            }\n\n            let textMatrix = current.textMatrix;\n\n            if (current.textRise !== 0) {\n              textMatrix = textMatrix.slice();\n              textMatrix[5] += current.textRise;\n            }\n\n            current.txtElement.setAttributeNS(null, "transform", `${pm(textMatrix)} scale(${pf(textHScale)}, -1)`);\n            current.txtElement.setAttributeNS(XML_NS, "xml:space", "preserve");\n            current.txtElement.appendChild(current.tspan);\n            current.txtgrp.appendChild(current.txtElement);\n\n            this._ensureTransformGroup().appendChild(current.txtElement);\n          }\n\n          setLeadingMoveText(x, y) {\n            this.setLeading(-y);\n            this.moveText(x, y);\n          }\n\n          addFontStyle(fontObj) {\n            if (!fontObj.data) {\n              throw new Error("addFontStyle: No font data available, " + \'ensure that the "fontExtraProperties" API parameter is set.\');\n            }\n\n            if (!this.cssStyle) {\n              this.cssStyle = this.svgFactory.createElement("svg:style");\n              this.cssStyle.setAttributeNS(null, "type", "text/css");\n              this.defs.appendChild(this.cssStyle);\n            }\n\n            const url = (0, _util.createObjectURL)(fontObj.data, fontObj.mimetype, this.forceDataSchema);\n            this.cssStyle.textContent += `@font-face { font-family: "${fontObj.loadedName}";` + ` src: url(${url}); }\\n`;\n          }\n\n          setFont(details) {\n            const current = this.current;\n            const fontObj = this.commonObjs.get(details[0]);\n            let size = details[1];\n            current.font = fontObj;\n\n            if (this.embedFonts && !fontObj.missingFile && !this.embeddedFonts[fontObj.loadedName]) {\n              this.addFontStyle(fontObj);\n              this.embeddedFonts[fontObj.loadedName] = fontObj;\n            }\n\n            current.fontMatrix = fontObj.fontMatrix ? fontObj.fontMatrix : _util.FONT_IDENTITY_MATRIX;\n            let bold = "normal";\n\n            if (fontObj.black) {\n              bold = "900";\n            } else if (fontObj.bold) {\n              bold = "bold";\n            }\n\n            const italic = fontObj.italic ? "italic" : "normal";\n\n            if (size < 0) {\n              size = -size;\n              current.fontDirection = -1;\n            } else {\n              current.fontDirection = 1;\n            }\n\n            current.fontSize = size;\n            current.fontFamily = fontObj.loadedName;\n            current.fontWeight = bold;\n            current.fontStyle = italic;\n            current.tspan = this.svgFactory.createElement("svg:tspan");\n            current.tspan.setAttributeNS(null, "y", pf(-current.y));\n            current.xcoords = [];\n            current.ycoords = [];\n          }\n\n          endText() {\n            const current = this.current;\n\n            if (current.textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG && current.txtElement && current.txtElement.hasChildNodes()) {\n              current.element = current.txtElement;\n              this.clip("nonzero");\n              this.endPath();\n            }\n          }\n\n          setLineWidth(width) {\n            if (width > 0) {\n              this.current.lineWidth = width;\n            }\n          }\n\n          setLineCap(style) {\n            this.current.lineCap = LINE_CAP_STYLES[style];\n          }\n\n          setLineJoin(style) {\n            this.current.lineJoin = LINE_JOIN_STYLES[style];\n          }\n\n          setMiterLimit(limit) {\n            this.current.miterLimit = limit;\n          }\n\n          setStrokeAlpha(strokeAlpha) {\n            this.current.strokeAlpha = strokeAlpha;\n          }\n\n          setStrokeRGBColor(r, g, b) {\n            this.current.strokeColor = _util.Util.makeCssRgb(r, g, b);\n          }\n\n          setFillAlpha(fillAlpha) {\n            this.current.fillAlpha = fillAlpha;\n          }\n\n          setFillRGBColor(r, g, b) {\n            this.current.fillColor = _util.Util.makeCssRgb(r, g, b);\n            this.current.tspan = this.svgFactory.createElement("svg:tspan");\n            this.current.xcoords = [];\n            this.current.ycoords = [];\n          }\n\n          setStrokeColorN(args) {\n            this.current.strokeColor = this._makeColorN_Pattern(args);\n          }\n\n          setFillColorN(args) {\n            this.current.fillColor = this._makeColorN_Pattern(args);\n          }\n\n          shadingFill(args) {\n            const width = this.viewport.width;\n            const height = this.viewport.height;\n\n            const inv = _util.Util.inverseTransform(this.transformMatrix);\n\n            const bl = _util.Util.applyTransform([0, 0], inv);\n\n            const br = _util.Util.applyTransform([0, height], inv);\n\n            const ul = _util.Util.applyTransform([width, 0], inv);\n\n            const ur = _util.Util.applyTransform([width, height], inv);\n\n            const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n            const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n            const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n            const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n            const rect = this.svgFactory.createElement("svg:rect");\n            rect.setAttributeNS(null, "x", x0);\n            rect.setAttributeNS(null, "y", y0);\n            rect.setAttributeNS(null, "width", x1 - x0);\n            rect.setAttributeNS(null, "height", y1 - y0);\n            rect.setAttributeNS(null, "fill", this._makeShadingPattern(args));\n\n            if (this.current.fillAlpha < 1) {\n              rect.setAttributeNS(null, "fill-opacity", this.current.fillAlpha);\n            }\n\n            this._ensureTransformGroup().appendChild(rect);\n          }\n\n          _makeColorN_Pattern(args) {\n            if (args[0] === "TilingPattern") {\n              return this._makeTilingPattern(args);\n            }\n\n            return this._makeShadingPattern(args);\n          }\n\n          _makeTilingPattern(args) {\n            const color = args[1];\n            const operatorList = args[2];\n            const matrix = args[3] || _util.IDENTITY_MATRIX;\n            const [x0, y0, x1, y1] = args[4];\n            const xstep = args[5];\n            const ystep = args[6];\n            const paintType = args[7];\n            const tilingId = `shading${shadingCount++}`;\n\n            const [tx0, ty0] = _util.Util.applyTransform([x0, y0], matrix);\n\n            const [tx1, ty1] = _util.Util.applyTransform([x1, y1], matrix);\n\n            const [xscale, yscale] = _util.Util.singularValueDecompose2dScale(matrix);\n\n            const txstep = xstep * xscale;\n            const tystep = ystep * yscale;\n            const tiling = this.svgFactory.createElement("svg:pattern");\n            tiling.setAttributeNS(null, "id", tilingId);\n            tiling.setAttributeNS(null, "patternUnits", "userSpaceOnUse");\n            tiling.setAttributeNS(null, "width", txstep);\n            tiling.setAttributeNS(null, "height", tystep);\n            tiling.setAttributeNS(null, "x", `${tx0}`);\n            tiling.setAttributeNS(null, "y", `${ty0}`);\n            const svg = this.svg;\n            const transformMatrix = this.transformMatrix;\n            const fillColor = this.current.fillColor;\n            const strokeColor = this.current.strokeColor;\n            const bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);\n            this.svg = bbox;\n            this.transformMatrix = matrix;\n\n            if (paintType === 2) {\n              const cssColor = _util.Util.makeCssRgb(...color);\n\n              this.current.fillColor = cssColor;\n              this.current.strokeColor = cssColor;\n            }\n\n            this.executeOpTree(this.convertOpList(operatorList));\n            this.svg = svg;\n            this.transformMatrix = transformMatrix;\n            this.current.fillColor = fillColor;\n            this.current.strokeColor = strokeColor;\n            tiling.appendChild(bbox.childNodes[0]);\n            this.defs.appendChild(tiling);\n            return `url(#${tilingId})`;\n          }\n\n          _makeShadingPattern(args) {\n            switch (args[0]) {\n              case "RadialAxial":\n                const shadingId = `shading${shadingCount++}`;\n                const colorStops = args[3];\n                let gradient;\n\n                switch (args[1]) {\n                  case "axial":\n                    const point0 = args[4];\n                    const point1 = args[5];\n                    gradient = this.svgFactory.createElement("svg:linearGradient");\n                    gradient.setAttributeNS(null, "id", shadingId);\n                    gradient.setAttributeNS(null, "gradientUnits", "userSpaceOnUse");\n                    gradient.setAttributeNS(null, "x1", point0[0]);\n                    gradient.setAttributeNS(null, "y1", point0[1]);\n                    gradient.setAttributeNS(null, "x2", point1[0]);\n                    gradient.setAttributeNS(null, "y2", point1[1]);\n                    break;\n\n                  case "radial":\n                    const focalPoint = args[4];\n                    const circlePoint = args[5];\n                    const focalRadius = args[6];\n                    const circleRadius = args[7];\n                    gradient = this.svgFactory.createElement("svg:radialGradient");\n                    gradient.setAttributeNS(null, "id", shadingId);\n                    gradient.setAttributeNS(null, "gradientUnits", "userSpaceOnUse");\n                    gradient.setAttributeNS(null, "cx", circlePoint[0]);\n                    gradient.setAttributeNS(null, "cy", circlePoint[1]);\n                    gradient.setAttributeNS(null, "r", circleRadius);\n                    gradient.setAttributeNS(null, "fx", focalPoint[0]);\n                    gradient.setAttributeNS(null, "fy", focalPoint[1]);\n                    gradient.setAttributeNS(null, "fr", focalRadius);\n                    break;\n\n                  default:\n                    throw new Error(`Unknown RadialAxial type: ${args[1]}`);\n                }\n\n                for (const colorStop of colorStops) {\n                  const stop = this.svgFactory.createElement("svg:stop");\n                  stop.setAttributeNS(null, "offset", colorStop[0]);\n                  stop.setAttributeNS(null, "stop-color", colorStop[1]);\n                  gradient.appendChild(stop);\n                }\n\n                this.defs.appendChild(gradient);\n                return `url(#${shadingId})`;\n\n              case "Mesh":\n                (0, _util.warn)("Unimplemented pattern Mesh");\n                return null;\n\n              case "Dummy":\n                return "hotpink";\n\n              default:\n                throw new Error(`Unknown IR type: ${args[0]}`);\n            }\n          }\n\n          setDash(dashArray, dashPhase) {\n            this.current.dashArray = dashArray;\n            this.current.dashPhase = dashPhase;\n          }\n\n          constructPath(ops, args) {\n            const current = this.current;\n            let x = current.x,\n                y = current.y;\n            let d = [];\n            let j = 0;\n\n            for (const op of ops) {\n              switch (op | 0) {\n                case _util.OPS.rectangle:\n                  x = args[j++];\n                  y = args[j++];\n                  const width = args[j++];\n                  const height = args[j++];\n                  const xw = x + width;\n                  const yh = y + height;\n                  d.push("M", pf(x), pf(y), "L", pf(xw), pf(y), "L", pf(xw), pf(yh), "L", pf(x), pf(yh), "Z");\n                  break;\n\n                case _util.OPS.moveTo:\n                  x = args[j++];\n                  y = args[j++];\n                  d.push("M", pf(x), pf(y));\n                  break;\n\n                case _util.OPS.lineTo:\n                  x = args[j++];\n                  y = args[j++];\n                  d.push("L", pf(x), pf(y));\n                  break;\n\n                case _util.OPS.curveTo:\n                  x = args[j + 4];\n                  y = args[j + 5];\n                  d.push("C", pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]), pf(x), pf(y));\n                  j += 6;\n                  break;\n\n                case _util.OPS.curveTo2:\n                  d.push("C", pf(x), pf(y), pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]));\n                  x = args[j + 2];\n                  y = args[j + 3];\n                  j += 4;\n                  break;\n\n                case _util.OPS.curveTo3:\n                  x = args[j + 2];\n                  y = args[j + 3];\n                  d.push("C", pf(args[j]), pf(args[j + 1]), pf(x), pf(y), pf(x), pf(y));\n                  j += 4;\n                  break;\n\n                case _util.OPS.closePath:\n                  d.push("Z");\n                  break;\n              }\n            }\n\n            d = d.join(" ");\n\n            if (current.path && ops.length > 0 && ops[0] !== _util.OPS.rectangle && ops[0] !== _util.OPS.moveTo) {\n              d = current.path.getAttributeNS(null, "d") + d;\n            } else {\n              current.path = this.svgFactory.createElement("svg:path");\n\n              this._ensureTransformGroup().appendChild(current.path);\n            }\n\n            current.path.setAttributeNS(null, "d", d);\n            current.path.setAttributeNS(null, "fill", "none");\n            current.element = current.path;\n            current.setCurrentPoint(x, y);\n          }\n\n          endPath() {\n            const current = this.current;\n            current.path = null;\n\n            if (!this.pendingClip) {\n              return;\n            }\n\n            if (!current.element) {\n              this.pendingClip = null;\n              return;\n            }\n\n            const clipId = `clippath${clipCount++}`;\n            const clipPath = this.svgFactory.createElement("svg:clipPath");\n            clipPath.setAttributeNS(null, "id", clipId);\n            clipPath.setAttributeNS(null, "transform", pm(this.transformMatrix));\n            const clipElement = current.element.cloneNode(true);\n\n            if (this.pendingClip === "evenodd") {\n              clipElement.setAttributeNS(null, "clip-rule", "evenodd");\n            } else {\n              clipElement.setAttributeNS(null, "clip-rule", "nonzero");\n            }\n\n            this.pendingClip = null;\n            clipPath.appendChild(clipElement);\n            this.defs.appendChild(clipPath);\n\n            if (current.activeClipUrl) {\n              current.clipGroup = null;\n              this.extraStack.forEach(function (prev) {\n                prev.clipGroup = null;\n              });\n              clipPath.setAttributeNS(null, "clip-path", current.activeClipUrl);\n            }\n\n            current.activeClipUrl = `url(#${clipId})`;\n            this.tgrp = null;\n          }\n\n          clip(type) {\n            this.pendingClip = type;\n          }\n\n          closePath() {\n            const current = this.current;\n\n            if (current.path) {\n              const d = `${current.path.getAttributeNS(null, "d")}Z`;\n              current.path.setAttributeNS(null, "d", d);\n            }\n          }\n\n          setLeading(leading) {\n            this.current.leading = -leading;\n          }\n\n          setTextRise(textRise) {\n            this.current.textRise = textRise;\n          }\n\n          setTextRenderingMode(textRenderingMode) {\n            this.current.textRenderingMode = textRenderingMode;\n          }\n\n          setHScale(scale) {\n            this.current.textHScale = scale / 100;\n          }\n\n          setRenderingIntent(intent) {}\n\n          setFlatness(flatness) {}\n\n          setGState(states) {\n            for (const [key, value] of states) {\n              switch (key) {\n                case "LW":\n                  this.setLineWidth(value);\n                  break;\n\n                case "LC":\n                  this.setLineCap(value);\n                  break;\n\n                case "LJ":\n                  this.setLineJoin(value);\n                  break;\n\n                case "ML":\n                  this.setMiterLimit(value);\n                  break;\n\n                case "D":\n                  this.setDash(value[0], value[1]);\n                  break;\n\n                case "RI":\n                  this.setRenderingIntent(value);\n                  break;\n\n                case "FL":\n                  this.setFlatness(value);\n                  break;\n\n                case "Font":\n                  this.setFont(value);\n                  break;\n\n                case "CA":\n                  this.setStrokeAlpha(value);\n                  break;\n\n                case "ca":\n                  this.setFillAlpha(value);\n                  break;\n\n                default:\n                  (0, _util.warn)(`Unimplemented graphic state operator ${key}`);\n                  break;\n              }\n            }\n          }\n\n          fill() {\n            const current = this.current;\n\n            if (current.element) {\n              current.element.setAttributeNS(null, "fill", current.fillColor);\n              current.element.setAttributeNS(null, "fill-opacity", current.fillAlpha);\n              this.endPath();\n            }\n          }\n\n          stroke() {\n            const current = this.current;\n\n            if (current.element) {\n              this._setStrokeAttributes(current.element);\n\n              current.element.setAttributeNS(null, "fill", "none");\n              this.endPath();\n            }\n          }\n\n          _setStrokeAttributes(element, lineWidthScale = 1) {\n            const current = this.current;\n            let dashArray = current.dashArray;\n\n            if (lineWidthScale !== 1 && dashArray.length > 0) {\n              dashArray = dashArray.map(function (value) {\n                return lineWidthScale * value;\n              });\n            }\n\n            element.setAttributeNS(null, "stroke", current.strokeColor);\n            element.setAttributeNS(null, "stroke-opacity", current.strokeAlpha);\n            element.setAttributeNS(null, "stroke-miterlimit", pf(current.miterLimit));\n            element.setAttributeNS(null, "stroke-linecap", current.lineCap);\n            element.setAttributeNS(null, "stroke-linejoin", current.lineJoin);\n            element.setAttributeNS(null, "stroke-width", pf(lineWidthScale * current.lineWidth) + "px");\n            element.setAttributeNS(null, "stroke-dasharray", dashArray.map(pf).join(" "));\n            element.setAttributeNS(null, "stroke-dashoffset", pf(lineWidthScale * current.dashPhase) + "px");\n          }\n\n          eoFill() {\n            if (this.current.element) {\n              this.current.element.setAttributeNS(null, "fill-rule", "evenodd");\n            }\n\n            this.fill();\n          }\n\n          fillStroke() {\n            this.stroke();\n            this.fill();\n          }\n\n          eoFillStroke() {\n            if (this.current.element) {\n              this.current.element.setAttributeNS(null, "fill-rule", "evenodd");\n            }\n\n            this.fillStroke();\n          }\n\n          closeStroke() {\n            this.closePath();\n            this.stroke();\n          }\n\n          closeFillStroke() {\n            this.closePath();\n            this.fillStroke();\n          }\n\n          closeEOFillStroke() {\n            this.closePath();\n            this.eoFillStroke();\n          }\n\n          paintSolidColorImageMask() {\n            const rect = this.svgFactory.createElement("svg:rect");\n            rect.setAttributeNS(null, "x", "0");\n            rect.setAttributeNS(null, "y", "0");\n            rect.setAttributeNS(null, "width", "1px");\n            rect.setAttributeNS(null, "height", "1px");\n            rect.setAttributeNS(null, "fill", this.current.fillColor);\n\n            this._ensureTransformGroup().appendChild(rect);\n          }\n\n          paintImageXObject(objId) {\n            const imgData = objId.startsWith("g_") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n            if (!imgData) {\n              (0, _util.warn)(`Dependent image with object ID ${objId} is not ready yet`);\n              return;\n            }\n\n            this.paintInlineImageXObject(imgData);\n          }\n\n          paintInlineImageXObject(imgData, mask) {\n            const width = imgData.width;\n            const height = imgData.height;\n            const imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);\n            const cliprect = this.svgFactory.createElement("svg:rect");\n            cliprect.setAttributeNS(null, "x", "0");\n            cliprect.setAttributeNS(null, "y", "0");\n            cliprect.setAttributeNS(null, "width", pf(width));\n            cliprect.setAttributeNS(null, "height", pf(height));\n            this.current.element = cliprect;\n            this.clip("nonzero");\n            const imgEl = this.svgFactory.createElement("svg:image");\n            imgEl.setAttributeNS(XLINK_NS, "xlink:href", imgSrc);\n            imgEl.setAttributeNS(null, "x", "0");\n            imgEl.setAttributeNS(null, "y", pf(-height));\n            imgEl.setAttributeNS(null, "width", pf(width) + "px");\n            imgEl.setAttributeNS(null, "height", pf(height) + "px");\n            imgEl.setAttributeNS(null, "transform", `scale(${pf(1 / width)} ${pf(-1 / height)})`);\n\n            if (mask) {\n              mask.appendChild(imgEl);\n            } else {\n              this._ensureTransformGroup().appendChild(imgEl);\n            }\n          }\n\n          paintImageMaskXObject(imgData) {\n            const current = this.current;\n            const width = imgData.width;\n            const height = imgData.height;\n            const fillColor = current.fillColor;\n            current.maskId = `mask${maskCount++}`;\n            const mask = this.svgFactory.createElement("svg:mask");\n            mask.setAttributeNS(null, "id", current.maskId);\n            const rect = this.svgFactory.createElement("svg:rect");\n            rect.setAttributeNS(null, "x", "0");\n            rect.setAttributeNS(null, "y", "0");\n            rect.setAttributeNS(null, "width", pf(width));\n            rect.setAttributeNS(null, "height", pf(height));\n            rect.setAttributeNS(null, "fill", fillColor);\n            rect.setAttributeNS(null, "mask", `url(#${current.maskId})`);\n            this.defs.appendChild(mask);\n\n            this._ensureTransformGroup().appendChild(rect);\n\n            this.paintInlineImageXObject(imgData, mask);\n          }\n\n          paintFormXObjectBegin(matrix, bbox) {\n            if (Array.isArray(matrix) && matrix.length === 6) {\n              this.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\n            }\n\n            if (bbox) {\n              const width = bbox[2] - bbox[0];\n              const height = bbox[3] - bbox[1];\n              const cliprect = this.svgFactory.createElement("svg:rect");\n              cliprect.setAttributeNS(null, "x", bbox[0]);\n              cliprect.setAttributeNS(null, "y", bbox[1]);\n              cliprect.setAttributeNS(null, "width", pf(width));\n              cliprect.setAttributeNS(null, "height", pf(height));\n              this.current.element = cliprect;\n              this.clip("nonzero");\n              this.endPath();\n            }\n          }\n\n          paintFormXObjectEnd() {}\n\n          _initialize(viewport) {\n            const svg = this.svgFactory.create(viewport.width, viewport.height);\n            const definitions = this.svgFactory.createElement("svg:defs");\n            svg.appendChild(definitions);\n            this.defs = definitions;\n            const rootGroup = this.svgFactory.createElement("svg:g");\n            rootGroup.setAttributeNS(null, "transform", pm(viewport.transform));\n            svg.appendChild(rootGroup);\n            this.svg = rootGroup;\n            return svg;\n          }\n\n          _ensureClipGroup() {\n            if (!this.current.clipGroup) {\n              const clipGroup = this.svgFactory.createElement("svg:g");\n              clipGroup.setAttributeNS(null, "clip-path", this.current.activeClipUrl);\n              this.svg.appendChild(clipGroup);\n              this.current.clipGroup = clipGroup;\n            }\n\n            return this.current.clipGroup;\n          }\n\n          _ensureTransformGroup() {\n            if (!this.tgrp) {\n              this.tgrp = this.svgFactory.createElement("svg:g");\n              this.tgrp.setAttributeNS(null, "transform", pm(this.transformMatrix));\n\n              if (this.current.activeClipUrl) {\n                this._ensureClipGroup().appendChild(this.tgrp);\n              } else {\n                this.svg.appendChild(this.tgrp);\n              }\n            }\n\n            return this.tgrp;\n          }\n\n        };\n      }\n      /***/\n    },\n    /* 22 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.PDFNodeStream = void 0;\n\n      var _util = __w_pdfjs_require__(2);\n\n      var _network_utils = __w_pdfjs_require__(23);\n\n      ;\n\n      const fs = __webpack_require__(172);\n\n      const http = __webpack_require__(2001);\n\n      const https = __webpack_require__(3779);\n\n      const url = __webpack_require__(6558);\n\n      const fileUriRegex = /^file:\\/\\/\\/[a-zA-Z]:\\//;\n\n      function parseUrl(sourceUrl) {\n        const parsedUrl = url.parse(sourceUrl);\n\n        if (parsedUrl.protocol === "file:" || parsedUrl.host) {\n          return parsedUrl;\n        }\n\n        if (/^[a-z]:[/\\\\]/i.test(sourceUrl)) {\n          return url.parse(`file:///${sourceUrl}`);\n        }\n\n        if (!parsedUrl.host) {\n          parsedUrl.protocol = "file:";\n        }\n\n        return parsedUrl;\n      }\n\n      class PDFNodeStream {\n        constructor(source) {\n          this.source = source;\n          this.url = parseUrl(source.url);\n          this.isHttp = this.url.protocol === "http:" || this.url.protocol === "https:";\n          this.isFsUrl = this.url.protocol === "file:";\n          this.httpHeaders = this.isHttp && source.httpHeaders || {};\n          this._fullRequestReader = null;\n          this._rangeRequestReaders = [];\n        }\n\n        get _progressiveDataLength() {\n          return this._fullRequestReader ? this._fullRequestReader._loaded : 0;\n        }\n\n        getFullReader() {\n          (0, _util.assert)(!this._fullRequestReader, "PDFNodeStream.getFullReader can only be called once.");\n          this._fullRequestReader = this.isFsUrl ? new PDFNodeStreamFsFullReader(this) : new PDFNodeStreamFullReader(this);\n          return this._fullRequestReader;\n        }\n\n        getRangeReader(start, end) {\n          if (end <= this._progressiveDataLength) {\n            return null;\n          }\n\n          const rangeReader = this.isFsUrl ? new PDFNodeStreamFsRangeReader(this, start, end) : new PDFNodeStreamRangeReader(this, start, end);\n\n          this._rangeRequestReaders.push(rangeReader);\n\n          return rangeReader;\n        }\n\n        cancelAllRequests(reason) {\n          if (this._fullRequestReader) {\n            this._fullRequestReader.cancel(reason);\n          }\n\n          const readers = this._rangeRequestReaders.slice(0);\n\n          readers.forEach(function (reader) {\n            reader.cancel(reason);\n          });\n        }\n\n      }\n\n      exports.PDFNodeStream = PDFNodeStream;\n\n      class BaseFullReader {\n        constructor(stream) {\n          this._url = stream.url;\n          this._done = false;\n          this._storedError = null;\n          this.onProgress = null;\n          const source = stream.source;\n          this._contentLength = source.length;\n          this._loaded = 0;\n          this._filename = null;\n          this._disableRange = source.disableRange || false;\n          this._rangeChunkSize = source.rangeChunkSize;\n\n          if (!this._rangeChunkSize && !this._disableRange) {\n            this._disableRange = true;\n          }\n\n          this._isStreamingSupported = !source.disableStream;\n          this._isRangeSupported = !source.disableRange;\n          this._readableStream = null;\n          this._readCapability = (0, _util.createPromiseCapability)();\n          this._headersCapability = (0, _util.createPromiseCapability)();\n        }\n\n        get headersReady() {\n          return this._headersCapability.promise;\n        }\n\n        get filename() {\n          return this._filename;\n        }\n\n        get contentLength() {\n          return this._contentLength;\n        }\n\n        get isRangeSupported() {\n          return this._isRangeSupported;\n        }\n\n        get isStreamingSupported() {\n          return this._isStreamingSupported;\n        }\n\n        async read() {\n          await this._readCapability.promise;\n\n          if (this._done) {\n            return {\n              value: undefined,\n              done: true\n            };\n          }\n\n          if (this._storedError) {\n            throw this._storedError;\n          }\n\n          const chunk = this._readableStream.read();\n\n          if (chunk === null) {\n            this._readCapability = (0, _util.createPromiseCapability)();\n            return this.read();\n          }\n\n          this._loaded += chunk.length;\n\n          if (this.onProgress) {\n            this.onProgress({\n              loaded: this._loaded,\n              total: this._contentLength\n            });\n          }\n\n          const buffer = new Uint8Array(chunk).buffer;\n          return {\n            value: buffer,\n            done: false\n          };\n        }\n\n        cancel(reason) {\n          if (!this._readableStream) {\n            this._error(reason);\n\n            return;\n          }\n\n          this._readableStream.destroy(reason);\n        }\n\n        _error(reason) {\n          this._storedError = reason;\n\n          this._readCapability.resolve();\n        }\n\n        _setReadableStream(readableStream) {\n          this._readableStream = readableStream;\n          readableStream.on("readable", () => {\n            this._readCapability.resolve();\n          });\n          readableStream.on("end", () => {\n            readableStream.destroy();\n            this._done = true;\n\n            this._readCapability.resolve();\n          });\n          readableStream.on("error", reason => {\n            this._error(reason);\n          });\n\n          if (!this._isStreamingSupported && this._isRangeSupported) {\n            this._error(new _util.AbortException("streaming is disabled"));\n          }\n\n          if (this._storedError) {\n            this._readableStream.destroy(this._storedError);\n          }\n        }\n\n      }\n\n      class BaseRangeReader {\n        constructor(stream) {\n          this._url = stream.url;\n          this._done = false;\n          this._storedError = null;\n          this.onProgress = null;\n          this._loaded = 0;\n          this._readableStream = null;\n          this._readCapability = (0, _util.createPromiseCapability)();\n          const source = stream.source;\n          this._isStreamingSupported = !source.disableStream;\n        }\n\n        get isStreamingSupported() {\n          return this._isStreamingSupported;\n        }\n\n        async read() {\n          await this._readCapability.promise;\n\n          if (this._done) {\n            return {\n              value: undefined,\n              done: true\n            };\n          }\n\n          if (this._storedError) {\n            throw this._storedError;\n          }\n\n          const chunk = this._readableStream.read();\n\n          if (chunk === null) {\n            this._readCapability = (0, _util.createPromiseCapability)();\n            return this.read();\n          }\n\n          this._loaded += chunk.length;\n\n          if (this.onProgress) {\n            this.onProgress({\n              loaded: this._loaded\n            });\n          }\n\n          const buffer = new Uint8Array(chunk).buffer;\n          return {\n            value: buffer,\n            done: false\n          };\n        }\n\n        cancel(reason) {\n          if (!this._readableStream) {\n            this._error(reason);\n\n            return;\n          }\n\n          this._readableStream.destroy(reason);\n        }\n\n        _error(reason) {\n          this._storedError = reason;\n\n          this._readCapability.resolve();\n        }\n\n        _setReadableStream(readableStream) {\n          this._readableStream = readableStream;\n          readableStream.on("readable", () => {\n            this._readCapability.resolve();\n          });\n          readableStream.on("end", () => {\n            readableStream.destroy();\n            this._done = true;\n\n            this._readCapability.resolve();\n          });\n          readableStream.on("error", reason => {\n            this._error(reason);\n          });\n\n          if (this._storedError) {\n            this._readableStream.destroy(this._storedError);\n          }\n        }\n\n      }\n\n      function createRequestOptions(parsedUrl, headers) {\n        return {\n          protocol: parsedUrl.protocol,\n          auth: parsedUrl.auth,\n          host: parsedUrl.hostname,\n          port: parsedUrl.port,\n          path: parsedUrl.path,\n          method: "GET",\n          headers\n        };\n      }\n\n      class PDFNodeStreamFullReader extends BaseFullReader {\n        constructor(stream) {\n          super(stream);\n\n          const handleResponse = response => {\n            if (response.statusCode === 404) {\n              const error = new _util.MissingPDFException(`Missing PDF "${this._url}".`);\n              this._storedError = error;\n\n              this._headersCapability.reject(error);\n\n              return;\n            }\n\n            this._headersCapability.resolve();\n\n            this._setReadableStream(response);\n\n            const getResponseHeader = name => {\n              return this._readableStream.headers[name.toLowerCase()];\n            };\n\n            const {\n              allowRangeRequests,\n              suggestedLength\n            } = (0, _network_utils.validateRangeRequestCapabilities)({\n              getResponseHeader,\n              isHttp: stream.isHttp,\n              rangeChunkSize: this._rangeChunkSize,\n              disableRange: this._disableRange\n            });\n            this._isRangeSupported = allowRangeRequests;\n            this._contentLength = suggestedLength || this._contentLength;\n            this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n          };\n\n          this._request = null;\n\n          if (this._url.protocol === "http:") {\n            this._request = http.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);\n          } else {\n            this._request = https.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);\n          }\n\n          this._request.on("error", reason => {\n            this._storedError = reason;\n\n            this._headersCapability.reject(reason);\n          });\n\n          this._request.end();\n        }\n\n      }\n\n      class PDFNodeStreamRangeReader extends BaseRangeReader {\n        constructor(stream, start, end) {\n          super(stream);\n          this._httpHeaders = {};\n\n          for (const property in stream.httpHeaders) {\n            const value = stream.httpHeaders[property];\n\n            if (typeof value === "undefined") {\n              continue;\n            }\n\n            this._httpHeaders[property] = value;\n          }\n\n          this._httpHeaders.Range = `bytes=${start}-${end - 1}`;\n\n          const handleResponse = response => {\n            if (response.statusCode === 404) {\n              const error = new _util.MissingPDFException(`Missing PDF "${this._url}".`);\n              this._storedError = error;\n              return;\n            }\n\n            this._setReadableStream(response);\n          };\n\n          this._request = null;\n\n          if (this._url.protocol === "http:") {\n            this._request = http.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);\n          } else {\n            this._request = https.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);\n          }\n\n          this._request.on("error", reason => {\n            this._storedError = reason;\n          });\n\n          this._request.end();\n        }\n\n      }\n\n      class PDFNodeStreamFsFullReader extends BaseFullReader {\n        constructor(stream) {\n          super(stream);\n          let path = decodeURIComponent(this._url.path);\n\n          if (fileUriRegex.test(this._url.href)) {\n            path = path.replace(/^\\//, "");\n          }\n\n          fs.lstat(path, (error, stat) => {\n            if (error) {\n              if (error.code === "ENOENT") {\n                error = new _util.MissingPDFException(`Missing PDF "${path}".`);\n              }\n\n              this._storedError = error;\n\n              this._headersCapability.reject(error);\n\n              return;\n            }\n\n            this._contentLength = stat.size;\n\n            this._setReadableStream(fs.createReadStream(path));\n\n            this._headersCapability.resolve();\n          });\n        }\n\n      }\n\n      class PDFNodeStreamFsRangeReader extends BaseRangeReader {\n        constructor(stream, start, end) {\n          super(stream);\n          let path = decodeURIComponent(this._url.path);\n\n          if (fileUriRegex.test(this._url.href)) {\n            path = path.replace(/^\\//, "");\n          }\n\n          this._setReadableStream(fs.createReadStream(path, {\n            start,\n            end: end - 1\n          }));\n        }\n\n      }\n      /***/\n\n    },\n    /* 23 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.createResponseStatusError = createResponseStatusError;\n      exports.extractFilenameFromHeader = extractFilenameFromHeader;\n      exports.validateRangeRequestCapabilities = validateRangeRequestCapabilities;\n      exports.validateResponseStatus = validateResponseStatus;\n\n      var _util = __w_pdfjs_require__(2);\n\n      var _content_disposition = __w_pdfjs_require__(24);\n\n      function validateRangeRequestCapabilities({\n        getResponseHeader,\n        isHttp,\n        rangeChunkSize,\n        disableRange\n      }) {\n        (0, _util.assert)(rangeChunkSize > 0, "Range chunk size must be larger than zero");\n        const returnValues = {\n          allowRangeRequests: false,\n          suggestedLength: undefined\n        };\n        const length = parseInt(getResponseHeader("Content-Length"), 10);\n\n        if (!Number.isInteger(length)) {\n          return returnValues;\n        }\n\n        returnValues.suggestedLength = length;\n\n        if (length <= 2 * rangeChunkSize) {\n          return returnValues;\n        }\n\n        if (disableRange || !isHttp) {\n          return returnValues;\n        }\n\n        if (getResponseHeader("Accept-Ranges") !== "bytes") {\n          return returnValues;\n        }\n\n        const contentEncoding = getResponseHeader("Content-Encoding") || "identity";\n\n        if (contentEncoding !== "identity") {\n          return returnValues;\n        }\n\n        returnValues.allowRangeRequests = true;\n        return returnValues;\n      }\n\n      function extractFilenameFromHeader(getResponseHeader) {\n        const contentDisposition = getResponseHeader("Content-Disposition");\n\n        if (contentDisposition) {\n          let filename = (0, _content_disposition.getFilenameFromContentDispositionHeader)(contentDisposition);\n\n          if (filename.includes("%")) {\n            try {\n              filename = decodeURIComponent(filename);\n            } catch (ex) {}\n          }\n\n          if (/\\.pdf$/i.test(filename)) {\n            return filename;\n          }\n        }\n\n        return null;\n      }\n\n      function createResponseStatusError(status, url) {\n        if (status === 404 || status === 0 && url.startsWith("file:")) {\n          return new _util.MissingPDFException(\'Missing PDF "\' + url + \'".\');\n        }\n\n        return new _util.UnexpectedResponseException("Unexpected server response (" + status + \') while retrieving PDF "\' + url + \'".\', status);\n      }\n\n      function validateResponseStatus(status) {\n        return status === 200 || status === 206;\n      }\n      /***/\n\n    },\n    /* 24 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.getFilenameFromContentDispositionHeader = getFilenameFromContentDispositionHeader;\n\n      function getFilenameFromContentDispositionHeader(contentDisposition) {\n        let needsEncodingFixup = true;\n        let tmp = toParamRegExp("filename\\\\*", "i").exec(contentDisposition);\n\n        if (tmp) {\n          tmp = tmp[1];\n          let filename = rfc2616unquote(tmp);\n          filename = unescape(filename);\n          filename = rfc5987decode(filename);\n          filename = rfc2047decode(filename);\n          return fixupEncoding(filename);\n        }\n\n        tmp = rfc2231getparam(contentDisposition);\n\n        if (tmp) {\n          const filename = rfc2047decode(tmp);\n          return fixupEncoding(filename);\n        }\n\n        tmp = toParamRegExp("filename", "i").exec(contentDisposition);\n\n        if (tmp) {\n          tmp = tmp[1];\n          let filename = rfc2616unquote(tmp);\n          filename = rfc2047decode(filename);\n          return fixupEncoding(filename);\n        }\n\n        function toParamRegExp(attributePattern, flags) {\n          return new RegExp("(?:^|;)\\\\s*" + attributePattern + "\\\\s*=\\\\s*" + "(" + \'[^";\\\\s][^;\\\\s]*\' + "|" + \'"(?:[^"\\\\\\\\]|\\\\\\\\"?)+"?\' + ")", flags);\n        }\n\n        function textdecode(encoding, value) {\n          if (encoding) {\n            if (!/^[\\x00-\\xFF]+$/.test(value)) {\n              return value;\n            }\n\n            try {\n              const decoder = new TextDecoder(encoding, {\n                fatal: true\n              });\n              const bytes = Array.from(value, function (ch) {\n                return ch.charCodeAt(0) & 0xff;\n              });\n              value = decoder.decode(new Uint8Array(bytes));\n              needsEncodingFixup = false;\n            } catch (e) {\n              if (/^utf-?8$/i.test(encoding)) {\n                try {\n                  value = decodeURIComponent(escape(value));\n                  needsEncodingFixup = false;\n                } catch (err) {}\n              }\n            }\n          }\n\n          return value;\n        }\n\n        function fixupEncoding(value) {\n          if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\n            value = textdecode("utf-8", value);\n\n            if (needsEncodingFixup) {\n              value = textdecode("iso-8859-1", value);\n            }\n          }\n\n          return value;\n        }\n\n        function rfc2231getparam(contentDispositionStr) {\n          const matches = [];\n          let match;\n          const iter = toParamRegExp("filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)", "ig");\n\n          while ((match = iter.exec(contentDispositionStr)) !== null) {\n            let [, n, quot, part] = match;\n            n = parseInt(n, 10);\n\n            if (n in matches) {\n              if (n === 0) {\n                break;\n              }\n\n              continue;\n            }\n\n            matches[n] = [quot, part];\n          }\n\n          const parts = [];\n\n          for (let n = 0; n < matches.length; ++n) {\n            if (!(n in matches)) {\n              break;\n            }\n\n            let [quot, part] = matches[n];\n            part = rfc2616unquote(part);\n\n            if (quot) {\n              part = unescape(part);\n\n              if (n === 0) {\n                part = rfc5987decode(part);\n              }\n            }\n\n            parts.push(part);\n          }\n\n          return parts.join("");\n        }\n\n        function rfc2616unquote(value) {\n          if (value.startsWith(\'"\')) {\n            const parts = value.slice(1).split(\'\\\\"\');\n\n            for (let i = 0; i < parts.length; ++i) {\n              const quotindex = parts[i].indexOf(\'"\');\n\n              if (quotindex !== -1) {\n                parts[i] = parts[i].slice(0, quotindex);\n                parts.length = i + 1;\n              }\n\n              parts[i] = parts[i].replace(/\\\\(.)/g, "$1");\n            }\n\n            value = parts.join(\'"\');\n          }\n\n          return value;\n        }\n\n        function rfc5987decode(extvalue) {\n          const encodingend = extvalue.indexOf("\'");\n\n          if (encodingend === -1) {\n            return extvalue;\n          }\n\n          const encoding = extvalue.slice(0, encodingend);\n          const langvalue = extvalue.slice(encodingend + 1);\n          const value = langvalue.replace(/^[^\']*\'/, "");\n          return textdecode(encoding, value);\n        }\n\n        function rfc2047decode(value) {\n          if (!value.startsWith("=?") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\n            return value;\n          }\n\n          return value.replace(/=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g, function (matches, charset, encoding, text) {\n            if (encoding === "q" || encoding === "Q") {\n              text = text.replace(/_/g, " ");\n              text = text.replace(/=([0-9a-fA-F]{2})/g, function (match, hex) {\n                return String.fromCharCode(parseInt(hex, 16));\n              });\n              return textdecode(charset, text);\n            }\n\n            try {\n              text = atob(text);\n            } catch (e) {}\n\n            return textdecode(charset, text);\n          });\n        }\n\n        return "";\n      }\n      /***/\n\n    },\n    /* 25 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.PDFNetworkStream = void 0;\n\n      var _util = __w_pdfjs_require__(2);\n\n      var _network_utils = __w_pdfjs_require__(23);\n\n      ;\n      const OK_RESPONSE = 200;\n      const PARTIAL_CONTENT_RESPONSE = 206;\n\n      function getArrayBuffer(xhr) {\n        const data = xhr.response;\n\n        if (typeof data !== "string") {\n          return data;\n        }\n\n        const array = (0, _util.stringToBytes)(data);\n        return array.buffer;\n      }\n\n      class NetworkManager {\n        constructor(url, args) {\n          this.url = url;\n          args = args || {};\n          this.isHttp = /^https?:/i.test(url);\n          this.httpHeaders = this.isHttp && args.httpHeaders || {};\n          this.withCredentials = args.withCredentials || false;\n\n          this.getXhr = args.getXhr || function NetworkManager_getXhr() {\n            return new XMLHttpRequest();\n          };\n\n          this.currXhrId = 0;\n          this.pendingRequests = Object.create(null);\n        }\n\n        requestRange(begin, end, listeners) {\n          const args = {\n            begin,\n            end\n          };\n\n          for (const prop in listeners) {\n            args[prop] = listeners[prop];\n          }\n\n          return this.request(args);\n        }\n\n        requestFull(listeners) {\n          return this.request(listeners);\n        }\n\n        request(args) {\n          const xhr = this.getXhr();\n          const xhrId = this.currXhrId++;\n          const pendingRequest = this.pendingRequests[xhrId] = {\n            xhr\n          };\n          xhr.open("GET", this.url);\n          xhr.withCredentials = this.withCredentials;\n\n          for (const property in this.httpHeaders) {\n            const value = this.httpHeaders[property];\n\n            if (typeof value === "undefined") {\n              continue;\n            }\n\n            xhr.setRequestHeader(property, value);\n          }\n\n          if (this.isHttp && "begin" in args && "end" in args) {\n            xhr.setRequestHeader("Range", `bytes=${args.begin}-${args.end - 1}`);\n            pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\n          } else {\n            pendingRequest.expectedStatus = OK_RESPONSE;\n          }\n\n          xhr.responseType = "arraybuffer";\n\n          if (args.onError) {\n            xhr.onerror = function (evt) {\n              args.onError(xhr.status);\n            };\n          }\n\n          xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\n          xhr.onprogress = this.onProgress.bind(this, xhrId);\n          pendingRequest.onHeadersReceived = args.onHeadersReceived;\n          pendingRequest.onDone = args.onDone;\n          pendingRequest.onError = args.onError;\n          pendingRequest.onProgress = args.onProgress;\n          xhr.send(null);\n          return xhrId;\n        }\n\n        onProgress(xhrId, evt) {\n          const pendingRequest = this.pendingRequests[xhrId];\n\n          if (!pendingRequest) {\n            return;\n          }\n\n          if (pendingRequest.onProgress) {\n            pendingRequest.onProgress(evt);\n          }\n        }\n\n        onStateChange(xhrId, evt) {\n          const pendingRequest = this.pendingRequests[xhrId];\n\n          if (!pendingRequest) {\n            return;\n          }\n\n          const xhr = pendingRequest.xhr;\n\n          if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\n            pendingRequest.onHeadersReceived();\n            delete pendingRequest.onHeadersReceived;\n          }\n\n          if (xhr.readyState !== 4) {\n            return;\n          }\n\n          if (!(xhrId in this.pendingRequests)) {\n            return;\n          }\n\n          delete this.pendingRequests[xhrId];\n\n          if (xhr.status === 0 && this.isHttp) {\n            if (pendingRequest.onError) {\n              pendingRequest.onError(xhr.status);\n            }\n\n            return;\n          }\n\n          const xhrStatus = xhr.status || OK_RESPONSE;\n          const ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\n\n          if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {\n            if (pendingRequest.onError) {\n              pendingRequest.onError(xhr.status);\n            }\n\n            return;\n          }\n\n          const chunk = getArrayBuffer(xhr);\n\n          if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\n            const rangeHeader = xhr.getResponseHeader("Content-Range");\n            const matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\n            pendingRequest.onDone({\n              begin: parseInt(matches[1], 10),\n              chunk\n            });\n          } else if (chunk) {\n            pendingRequest.onDone({\n              begin: 0,\n              chunk\n            });\n          } else if (pendingRequest.onError) {\n            pendingRequest.onError(xhr.status);\n          }\n        }\n\n        getRequestXhr(xhrId) {\n          return this.pendingRequests[xhrId].xhr;\n        }\n\n        isPendingRequest(xhrId) {\n          return xhrId in this.pendingRequests;\n        }\n\n        abortRequest(xhrId) {\n          const xhr = this.pendingRequests[xhrId].xhr;\n          delete this.pendingRequests[xhrId];\n          xhr.abort();\n        }\n\n      }\n\n      class PDFNetworkStream {\n        constructor(source) {\n          this._source = source;\n          this._manager = new NetworkManager(source.url, {\n            httpHeaders: source.httpHeaders,\n            withCredentials: source.withCredentials\n          });\n          this._rangeChunkSize = source.rangeChunkSize;\n          this._fullRequestReader = null;\n          this._rangeRequestReaders = [];\n        }\n\n        _onRangeRequestReaderClosed(reader) {\n          const i = this._rangeRequestReaders.indexOf(reader);\n\n          if (i >= 0) {\n            this._rangeRequestReaders.splice(i, 1);\n          }\n        }\n\n        getFullReader() {\n          (0, _util.assert)(!this._fullRequestReader, "PDFNetworkStream.getFullReader can only be called once.");\n          this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._source);\n          return this._fullRequestReader;\n        }\n\n        getRangeReader(begin, end) {\n          const reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);\n          reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\n\n          this._rangeRequestReaders.push(reader);\n\n          return reader;\n        }\n\n        cancelAllRequests(reason) {\n          if (this._fullRequestReader) {\n            this._fullRequestReader.cancel(reason);\n          }\n\n          const readers = this._rangeRequestReaders.slice(0);\n\n          readers.forEach(function (reader) {\n            reader.cancel(reason);\n          });\n        }\n\n      }\n\n      exports.PDFNetworkStream = PDFNetworkStream;\n\n      class PDFNetworkStreamFullRequestReader {\n        constructor(manager, source) {\n          this._manager = manager;\n          const args = {\n            onHeadersReceived: this._onHeadersReceived.bind(this),\n            onDone: this._onDone.bind(this),\n            onError: this._onError.bind(this),\n            onProgress: this._onProgress.bind(this)\n          };\n          this._url = source.url;\n          this._fullRequestId = manager.requestFull(args);\n          this._headersReceivedCapability = (0, _util.createPromiseCapability)();\n          this._disableRange = source.disableRange || false;\n          this._contentLength = source.length;\n          this._rangeChunkSize = source.rangeChunkSize;\n\n          if (!this._rangeChunkSize && !this._disableRange) {\n            this._disableRange = true;\n          }\n\n          this._isStreamingSupported = false;\n          this._isRangeSupported = false;\n          this._cachedChunks = [];\n          this._requests = [];\n          this._done = false;\n          this._storedError = undefined;\n          this._filename = null;\n          this.onProgress = null;\n        }\n\n        _onHeadersReceived() {\n          const fullRequestXhrId = this._fullRequestId;\n\n          const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\n\n          const getResponseHeader = name => {\n            return fullRequestXhr.getResponseHeader(name);\n          };\n\n          const {\n            allowRangeRequests,\n            suggestedLength\n          } = (0, _network_utils.validateRangeRequestCapabilities)({\n            getResponseHeader,\n            isHttp: this._manager.isHttp,\n            rangeChunkSize: this._rangeChunkSize,\n            disableRange: this._disableRange\n          });\n\n          if (allowRangeRequests) {\n            this._isRangeSupported = true;\n          }\n\n          this._contentLength = suggestedLength || this._contentLength;\n          this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n\n          if (this._isRangeSupported) {\n            this._manager.abortRequest(fullRequestXhrId);\n          }\n\n          this._headersReceivedCapability.resolve();\n        }\n\n        _onDone(args) {\n          if (args) {\n            if (this._requests.length > 0) {\n              const requestCapability = this._requests.shift();\n\n              requestCapability.resolve({\n                value: args.chunk,\n                done: false\n              });\n            } else {\n              this._cachedChunks.push(args.chunk);\n            }\n          }\n\n          this._done = true;\n\n          if (this._cachedChunks.length > 0) {\n            return;\n          }\n\n          this._requests.forEach(function (requestCapability) {\n            requestCapability.resolve({\n              value: undefined,\n              done: true\n            });\n          });\n\n          this._requests = [];\n        }\n\n        _onError(status) {\n          const url = this._url;\n          const exception = (0, _network_utils.createResponseStatusError)(status, url);\n          this._storedError = exception;\n\n          this._headersReceivedCapability.reject(exception);\n\n          this._requests.forEach(function (requestCapability) {\n            requestCapability.reject(exception);\n          });\n\n          this._requests = [];\n          this._cachedChunks = [];\n        }\n\n        _onProgress(data) {\n          if (this.onProgress) {\n            this.onProgress({\n              loaded: data.loaded,\n              total: data.lengthComputable ? data.total : this._contentLength\n            });\n          }\n        }\n\n        get filename() {\n          return this._filename;\n        }\n\n        get isRangeSupported() {\n          return this._isRangeSupported;\n        }\n\n        get isStreamingSupported() {\n          return this._isStreamingSupported;\n        }\n\n        get contentLength() {\n          return this._contentLength;\n        }\n\n        get headersReady() {\n          return this._headersReceivedCapability.promise;\n        }\n\n        async read() {\n          if (this._storedError) {\n            throw this._storedError;\n          }\n\n          if (this._cachedChunks.length > 0) {\n            const chunk = this._cachedChunks.shift();\n\n            return {\n              value: chunk,\n              done: false\n            };\n          }\n\n          if (this._done) {\n            return {\n              value: undefined,\n              done: true\n            };\n          }\n\n          const requestCapability = (0, _util.createPromiseCapability)();\n\n          this._requests.push(requestCapability);\n\n          return requestCapability.promise;\n        }\n\n        cancel(reason) {\n          this._done = true;\n\n          this._headersReceivedCapability.reject(reason);\n\n          this._requests.forEach(function (requestCapability) {\n            requestCapability.resolve({\n              value: undefined,\n              done: true\n            });\n          });\n\n          this._requests = [];\n\n          if (this._manager.isPendingRequest(this._fullRequestId)) {\n            this._manager.abortRequest(this._fullRequestId);\n          }\n\n          this._fullRequestReader = null;\n        }\n\n      }\n\n      class PDFNetworkStreamRangeRequestReader {\n        constructor(manager, begin, end) {\n          this._manager = manager;\n          const args = {\n            onDone: this._onDone.bind(this),\n            onProgress: this._onProgress.bind(this)\n          };\n          this._requestId = manager.requestRange(begin, end, args);\n          this._requests = [];\n          this._queuedChunk = null;\n          this._done = false;\n          this.onProgress = null;\n          this.onClosed = null;\n        }\n\n        _close() {\n          if (this.onClosed) {\n            this.onClosed(this);\n          }\n        }\n\n        _onDone(data) {\n          const chunk = data.chunk;\n\n          if (this._requests.length > 0) {\n            const requestCapability = this._requests.shift();\n\n            requestCapability.resolve({\n              value: chunk,\n              done: false\n            });\n          } else {\n            this._queuedChunk = chunk;\n          }\n\n          this._done = true;\n\n          this._requests.forEach(function (requestCapability) {\n            requestCapability.resolve({\n              value: undefined,\n              done: true\n            });\n          });\n\n          this._requests = [];\n\n          this._close();\n        }\n\n        _onProgress(evt) {\n          if (!this.isStreamingSupported && this.onProgress) {\n            this.onProgress({\n              loaded: evt.loaded\n            });\n          }\n        }\n\n        get isStreamingSupported() {\n          return false;\n        }\n\n        async read() {\n          if (this._queuedChunk !== null) {\n            const chunk = this._queuedChunk;\n            this._queuedChunk = null;\n            return {\n              value: chunk,\n              done: false\n            };\n          }\n\n          if (this._done) {\n            return {\n              value: undefined,\n              done: true\n            };\n          }\n\n          const requestCapability = (0, _util.createPromiseCapability)();\n\n          this._requests.push(requestCapability);\n\n          return requestCapability.promise;\n        }\n\n        cancel(reason) {\n          this._done = true;\n\n          this._requests.forEach(function (requestCapability) {\n            requestCapability.resolve({\n              value: undefined,\n              done: true\n            });\n          });\n\n          this._requests = [];\n\n          if (this._manager.isPendingRequest(this._requestId)) {\n            this._manager.abortRequest(this._requestId);\n          }\n\n          this._close();\n        }\n\n      }\n      /***/\n\n    },\n    /* 26 */\n\n    /***/\n    function (module, exports, __w_pdfjs_require__) {\n      "use strict";\n\n      Object.defineProperty(exports, "__esModule", {\n        value: true\n      });\n      exports.PDFFetchStream = void 0;\n\n      var _util = __w_pdfjs_require__(2);\n\n      var _network_utils = __w_pdfjs_require__(23);\n\n      ;\n\n      function createFetchOptions(headers, withCredentials, abortController) {\n        return {\n          method: "GET",\n          headers,\n          signal: abortController && abortController.signal,\n          mode: "cors",\n          credentials: withCredentials ? "include" : "same-origin",\n          redirect: "follow"\n        };\n      }\n\n      function createHeaders(httpHeaders) {\n        const headers = new Headers();\n\n        for (const property in httpHeaders) {\n          const value = httpHeaders[property];\n\n          if (typeof value === "undefined") {\n            continue;\n          }\n\n          headers.append(property, value);\n        }\n\n        return headers;\n      }\n\n      class PDFFetchStream {\n        constructor(source) {\n          this.source = source;\n          this.isHttp = /^https?:/i.test(source.url);\n          this.httpHeaders = this.isHttp && source.httpHeaders || {};\n          this._fullRequestReader = null;\n          this._rangeRequestReaders = [];\n        }\n\n        get _progressiveDataLength() {\n          return this._fullRequestReader ? this._fullRequestReader._loaded : 0;\n        }\n\n        getFullReader() {\n          (0, _util.assert)(!this._fullRequestReader, "PDFFetchStream.getFullReader can only be called once.");\n          this._fullRequestReader = new PDFFetchStreamReader(this);\n          return this._fullRequestReader;\n        }\n\n        getRangeReader(begin, end) {\n          if (end <= this._progressiveDataLength) {\n            return null;\n          }\n\n          const reader = new PDFFetchStreamRangeReader(this, begin, end);\n\n          this._rangeRequestReaders.push(reader);\n\n          return reader;\n        }\n\n        cancelAllRequests(reason) {\n          if (this._fullRequestReader) {\n            this._fullRequestReader.cancel(reason);\n          }\n\n          const readers = this._rangeRequestReaders.slice(0);\n\n          readers.forEach(function (reader) {\n            reader.cancel(reason);\n          });\n        }\n\n      }\n\n      exports.PDFFetchStream = PDFFetchStream;\n\n      class PDFFetchStreamReader {\n        constructor(stream) {\n          this._stream = stream;\n          this._reader = null;\n          this._loaded = 0;\n          this._filename = null;\n          const source = stream.source;\n          this._withCredentials = source.withCredentials || false;\n          this._contentLength = source.length;\n          this._headersCapability = (0, _util.createPromiseCapability)();\n          this._disableRange = source.disableRange || false;\n          this._rangeChunkSize = source.rangeChunkSize;\n\n          if (!this._rangeChunkSize && !this._disableRange) {\n            this._disableRange = true;\n          }\n\n          if (typeof AbortController !== "undefined") {\n            this._abortController = new AbortController();\n          }\n\n          this._isStreamingSupported = !source.disableStream;\n          this._isRangeSupported = !source.disableRange;\n          this._headers = createHeaders(this._stream.httpHeaders);\n          const url = source.url;\n          fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {\n            if (!(0, _network_utils.validateResponseStatus)(response.status)) {\n              throw (0, _network_utils.createResponseStatusError)(response.status, url);\n            }\n\n            this._reader = response.body.getReader();\n\n            this._headersCapability.resolve();\n\n            const getResponseHeader = name => {\n              return response.headers.get(name);\n            };\n\n            const {\n              allowRangeRequests,\n              suggestedLength\n            } = (0, _network_utils.validateRangeRequestCapabilities)({\n              getResponseHeader,\n              isHttp: this._stream.isHttp,\n              rangeChunkSize: this._rangeChunkSize,\n              disableRange: this._disableRange\n            });\n            this._isRangeSupported = allowRangeRequests;\n            this._contentLength = suggestedLength || this._contentLength;\n            this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n\n            if (!this._isStreamingSupported && this._isRangeSupported) {\n              this.cancel(new _util.AbortException("Streaming is disabled."));\n            }\n          }).catch(this._headersCapability.reject);\n          this.onProgress = null;\n        }\n\n        get headersReady() {\n          return this._headersCapability.promise;\n        }\n\n        get filename() {\n          return this._filename;\n        }\n\n        get contentLength() {\n          return this._contentLength;\n        }\n\n        get isRangeSupported() {\n          return this._isRangeSupported;\n        }\n\n        get isStreamingSupported() {\n          return this._isStreamingSupported;\n        }\n\n        async read() {\n          await this._headersCapability.promise;\n          const {\n            value,\n            done\n          } = await this._reader.read();\n\n          if (done) {\n            return {\n              value,\n              done\n            };\n          }\n\n          this._loaded += value.byteLength;\n\n          if (this.onProgress) {\n            this.onProgress({\n              loaded: this._loaded,\n              total: this._contentLength\n            });\n          }\n\n          const buffer = new Uint8Array(value).buffer;\n          return {\n            value: buffer,\n            done: false\n          };\n        }\n\n        cancel(reason) {\n          if (this._reader) {\n            this._reader.cancel(reason);\n          }\n\n          if (this._abortController) {\n            this._abortController.abort();\n          }\n        }\n\n      }\n\n      class PDFFetchStreamRangeReader {\n        constructor(stream, begin, end) {\n          this._stream = stream;\n          this._reader = null;\n          this._loaded = 0;\n          const source = stream.source;\n          this._withCredentials = source.withCredentials || false;\n          this._readCapability = (0, _util.createPromiseCapability)();\n          this._isStreamingSupported = !source.disableStream;\n\n          if (typeof AbortController !== "undefined") {\n            this._abortController = new AbortController();\n          }\n\n          this._headers = createHeaders(this._stream.httpHeaders);\n\n          this._headers.append("Range", `bytes=${begin}-${end - 1}`);\n\n          const url = source.url;\n          fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {\n            if (!(0, _network_utils.validateResponseStatus)(response.status)) {\n              throw (0, _network_utils.createResponseStatusError)(response.status, url);\n            }\n\n            this._readCapability.resolve();\n\n            this._reader = response.body.getReader();\n          }).catch(reason => {\n            if (reason && reason.name === "AbortError") {\n              return;\n            }\n\n            throw reason;\n          });\n          this.onProgress = null;\n        }\n\n        get isStreamingSupported() {\n          return this._isStreamingSupported;\n        }\n\n        async read() {\n          await this._readCapability.promise;\n          const {\n            value,\n            done\n          } = await this._reader.read();\n\n          if (done) {\n            return {\n              value,\n              done\n            };\n          }\n\n          this._loaded += value.byteLength;\n\n          if (this.onProgress) {\n            this.onProgress({\n              loaded: this._loaded\n            });\n          }\n\n          const buffer = new Uint8Array(value).buffer;\n          return {\n            value: buffer,\n            done: false\n          };\n        }\n\n        cancel(reason) {\n          if (this._reader) {\n            this._reader.cancel(reason);\n          }\n\n          if (this._abortController) {\n            this._abortController.abort();\n          }\n        }\n\n      }\n      /***/\n\n    }\n    /******/\n    ])\n  );\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8395\n')},3748:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('/** @license React v17.0.2\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n\n\nvar aa = __webpack_require__(5466),\n    m = __webpack_require__(7347),\n    r = __webpack_require__(7767);\n\nfunction y(a) {\n  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b += "&args[]=" + encodeURIComponent(arguments[c]);\n\n  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";\n}\n\nif (!aa) throw Error(y(227));\nvar ba = new Set(),\n    ca = {};\n\nfunction da(a, b) {\n  ea(a, b);\n  ea(a + "Capture", b);\n}\n\nfunction ea(a, b) {\n  ca[a] = b;\n\n  for (a = 0; a < b.length; a++) ba.add(b[a]);\n}\n\nvar fa = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement),\n    ha = /^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,\n    ia = Object.prototype.hasOwnProperty,\n    ja = {},\n    ka = {};\n\nfunction la(a) {\n  if (ia.call(ka, a)) return !0;\n  if (ia.call(ja, a)) return !1;\n  if (ha.test(a)) return ka[a] = !0;\n  ja[a] = !0;\n  return !1;\n}\n\nfunction ma(a, b, c, d) {\n  if (null !== c && 0 === c.type) return !1;\n\n  switch (typeof b) {\n    case "function":\n    case "symbol":\n      return !0;\n\n    case "boolean":\n      if (d) return !1;\n      if (null !== c) return !c.acceptsBooleans;\n      a = a.toLowerCase().slice(0, 5);\n      return "data-" !== a && "aria-" !== a;\n\n    default:\n      return !1;\n  }\n}\n\nfunction na(a, b, c, d) {\n  if (null === b || "undefined" === typeof b || ma(a, b, c, d)) return !0;\n  if (d) return !1;\n  if (null !== c) switch (c.type) {\n    case 3:\n      return !b;\n\n    case 4:\n      return !1 === b;\n\n    case 5:\n      return isNaN(b);\n\n    case 6:\n      return isNaN(b) || 1 > b;\n  }\n  return !1;\n}\n\nfunction B(a, b, c, d, e, f, g) {\n  this.acceptsBooleans = 2 === b || 3 === b || 4 === b;\n  this.attributeName = d;\n  this.attributeNamespace = e;\n  this.mustUseProperty = c;\n  this.propertyName = a;\n  this.type = b;\n  this.sanitizeURL = f;\n  this.removeEmptyString = g;\n}\n\nvar D = {};\n"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function (a) {\n  D[a] = new B(a, 0, !1, a, null, !1, !1);\n});\n[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (a) {\n  var b = a[0];\n  D[b] = new B(b, 1, !1, a[1], null, !1, !1);\n});\n["contentEditable", "draggable", "spellCheck", "value"].forEach(function (a) {\n  D[a] = new B(a, 2, !1, a.toLowerCase(), null, !1, !1);\n});\n["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function (a) {\n  D[a] = new B(a, 2, !1, a, null, !1, !1);\n});\n"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function (a) {\n  D[a] = new B(a, 3, !1, a.toLowerCase(), null, !1, !1);\n});\n["checked", "multiple", "muted", "selected"].forEach(function (a) {\n  D[a] = new B(a, 3, !0, a, null, !1, !1);\n});\n["capture", "download"].forEach(function (a) {\n  D[a] = new B(a, 4, !1, a, null, !1, !1);\n});\n["cols", "rows", "size", "span"].forEach(function (a) {\n  D[a] = new B(a, 6, !1, a, null, !1, !1);\n});\n["rowSpan", "start"].forEach(function (a) {\n  D[a] = new B(a, 5, !1, a.toLowerCase(), null, !1, !1);\n});\nvar oa = /[\\-:]([a-z])/g;\n\nfunction pa(a) {\n  return a[1].toUpperCase();\n}\n\n"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function (a) {\n  var b = a.replace(oa, pa);\n  D[b] = new B(b, 1, !1, a, null, !1, !1);\n});\n"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function (a) {\n  var b = a.replace(oa, pa);\n  D[b] = new B(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1, !1);\n});\n["xml:base", "xml:lang", "xml:space"].forEach(function (a) {\n  var b = a.replace(oa, pa);\n  D[b] = new B(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1, !1);\n});\n["tabIndex", "crossOrigin"].forEach(function (a) {\n  D[a] = new B(a, 1, !1, a.toLowerCase(), null, !1, !1);\n});\nD.xlinkHref = new B("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);\n["src", "href", "action", "formAction"].forEach(function (a) {\n  D[a] = new B(a, 1, !1, a.toLowerCase(), null, !0, !0);\n});\n\nfunction qa(a, b, c, d) {\n  var e = D.hasOwnProperty(b) ? D[b] : null;\n  var f = null !== e ? 0 === e.type : d ? !1 : !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1] ? !1 : !0;\n  f || (na(b, c, e, d) && (c = null), d || null === e ? la(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c))));\n}\n\nvar ra = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,\n    sa = 60103,\n    ta = 60106,\n    ua = 60107,\n    wa = 60108,\n    xa = 60114,\n    ya = 60109,\n    za = 60110,\n    Aa = 60112,\n    Ba = 60113,\n    Ca = 60120,\n    Da = 60115,\n    Ea = 60116,\n    Fa = 60121,\n    Ga = 60128,\n    Ha = 60129,\n    Ia = 60130,\n    Ja = 60131;\n\nif ("function" === typeof Symbol && Symbol.for) {\n  var E = Symbol.for;\n  sa = E("react.element");\n  ta = E("react.portal");\n  ua = E("react.fragment");\n  wa = E("react.strict_mode");\n  xa = E("react.profiler");\n  ya = E("react.provider");\n  za = E("react.context");\n  Aa = E("react.forward_ref");\n  Ba = E("react.suspense");\n  Ca = E("react.suspense_list");\n  Da = E("react.memo");\n  Ea = E("react.lazy");\n  Fa = E("react.block");\n  E("react.scope");\n  Ga = E("react.opaque.id");\n  Ha = E("react.debug_trace_mode");\n  Ia = E("react.offscreen");\n  Ja = E("react.legacy_hidden");\n}\n\nvar Ka = "function" === typeof Symbol && Symbol.iterator;\n\nfunction La(a) {\n  if (null === a || "object" !== typeof a) return null;\n  a = Ka && a[Ka] || a["@@iterator"];\n  return "function" === typeof a ? a : null;\n}\n\nvar Ma;\n\nfunction Na(a) {\n  if (void 0 === Ma) try {\n    throw Error();\n  } catch (c) {\n    var b = c.stack.trim().match(/\\n( *(at )?)/);\n    Ma = b && b[1] || "";\n  }\n  return "\\n" + Ma + a;\n}\n\nvar Oa = !1;\n\nfunction Pa(a, b) {\n  if (!a || Oa) return "";\n  Oa = !0;\n  var c = Error.prepareStackTrace;\n  Error.prepareStackTrace = void 0;\n\n  try {\n    if (b) {\n      if (b = function () {\n        throw Error();\n      }, Object.defineProperty(b.prototype, "props", {\n        set: function () {\n          throw Error();\n        }\n      }), "object" === typeof Reflect && Reflect.construct) {\n        try {\n          Reflect.construct(b, []);\n        } catch (k) {\n          var d = k;\n        }\n\n        Reflect.construct(a, [], b);\n      } else {\n        try {\n          b.call();\n        } catch (k) {\n          d = k;\n        }\n\n        a.call(b.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (k) {\n        d = k;\n      }\n\n      a();\n    }\n  } catch (k) {\n    if (k && d && "string" === typeof k.stack) {\n      for (var e = k.stack.split("\\n"), f = d.stack.split("\\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h];) h--;\n\n      for (; 1 <= g && 0 <= h; g--, h--) if (e[g] !== f[h]) {\n        if (1 !== g || 1 !== h) {\n          do if (g--, h--, 0 > h || e[g] !== f[h]) return "\\n" + e[g].replace(" at new ", " at "); while (1 <= g && 0 <= h);\n        }\n\n        break;\n      }\n    }\n  } finally {\n    Oa = !1, Error.prepareStackTrace = c;\n  }\n\n  return (a = a ? a.displayName || a.name : "") ? Na(a) : "";\n}\n\nfunction Qa(a) {\n  switch (a.tag) {\n    case 5:\n      return Na(a.type);\n\n    case 16:\n      return Na("Lazy");\n\n    case 13:\n      return Na("Suspense");\n\n    case 19:\n      return Na("SuspenseList");\n\n    case 0:\n    case 2:\n    case 15:\n      return a = Pa(a.type, !1), a;\n\n    case 11:\n      return a = Pa(a.type.render, !1), a;\n\n    case 22:\n      return a = Pa(a.type._render, !1), a;\n\n    case 1:\n      return a = Pa(a.type, !0), a;\n\n    default:\n      return "";\n  }\n}\n\nfunction Ra(a) {\n  if (null == a) return null;\n  if ("function" === typeof a) return a.displayName || a.name || null;\n  if ("string" === typeof a) return a;\n\n  switch (a) {\n    case ua:\n      return "Fragment";\n\n    case ta:\n      return "Portal";\n\n    case xa:\n      return "Profiler";\n\n    case wa:\n      return "StrictMode";\n\n    case Ba:\n      return "Suspense";\n\n    case Ca:\n      return "SuspenseList";\n  }\n\n  if ("object" === typeof a) switch (a.$$typeof) {\n    case za:\n      return (a.displayName || "Context") + ".Consumer";\n\n    case ya:\n      return (a._context.displayName || "Context") + ".Provider";\n\n    case Aa:\n      var b = a.render;\n      b = b.displayName || b.name || "";\n      return a.displayName || ("" !== b ? "ForwardRef(" + b + ")" : "ForwardRef");\n\n    case Da:\n      return Ra(a.type);\n\n    case Fa:\n      return Ra(a._render);\n\n    case Ea:\n      b = a._payload;\n      a = a._init;\n\n      try {\n        return Ra(a(b));\n      } catch (c) {}\n\n  }\n  return null;\n}\n\nfunction Sa(a) {\n  switch (typeof a) {\n    case "boolean":\n    case "number":\n    case "object":\n    case "string":\n    case "undefined":\n      return a;\n\n    default:\n      return "";\n  }\n}\n\nfunction Ta(a) {\n  var b = a.type;\n  return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);\n}\n\nfunction Ua(a) {\n  var b = Ta(a) ? "checked" : "value",\n      c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),\n      d = "" + a[b];\n\n  if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {\n    var e = c.get,\n        f = c.set;\n    Object.defineProperty(a, b, {\n      configurable: !0,\n      get: function () {\n        return e.call(this);\n      },\n      set: function (a) {\n        d = "" + a;\n        f.call(this, a);\n      }\n    });\n    Object.defineProperty(a, b, {\n      enumerable: c.enumerable\n    });\n    return {\n      getValue: function () {\n        return d;\n      },\n      setValue: function (a) {\n        d = "" + a;\n      },\n      stopTracking: function () {\n        a._valueTracker = null;\n        delete a[b];\n      }\n    };\n  }\n}\n\nfunction Va(a) {\n  a._valueTracker || (a._valueTracker = Ua(a));\n}\n\nfunction Wa(a) {\n  if (!a) return !1;\n  var b = a._valueTracker;\n  if (!b) return !0;\n  var c = b.getValue();\n  var d = "";\n  a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);\n  a = d;\n  return a !== c ? (b.setValue(a), !0) : !1;\n}\n\nfunction Xa(a) {\n  a = a || ("undefined" !== typeof document ? document : void 0);\n  if ("undefined" === typeof a) return null;\n\n  try {\n    return a.activeElement || a.body;\n  } catch (b) {\n    return a.body;\n  }\n}\n\nfunction Ya(a, b) {\n  var c = b.checked;\n  return m({}, b, {\n    defaultChecked: void 0,\n    defaultValue: void 0,\n    value: void 0,\n    checked: null != c ? c : a._wrapperState.initialChecked\n  });\n}\n\nfunction Za(a, b) {\n  var c = null == b.defaultValue ? "" : b.defaultValue,\n      d = null != b.checked ? b.checked : b.defaultChecked;\n  c = Sa(null != b.value ? b.value : c);\n  a._wrapperState = {\n    initialChecked: d,\n    initialValue: c,\n    controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value\n  };\n}\n\nfunction $a(a, b) {\n  b = b.checked;\n  null != b && qa(a, "checked", b, !1);\n}\n\nfunction ab(a, b) {\n  $a(a, b);\n  var c = Sa(b.value),\n      d = b.type;\n  if (null != c) {\n    if ("number" === d) {\n      if (0 === c && "" === a.value || a.value != c) a.value = "" + c;\n    } else a.value !== "" + c && (a.value = "" + c);\n  } else if ("submit" === d || "reset" === d) {\n    a.removeAttribute("value");\n    return;\n  }\n  b.hasOwnProperty("value") ? bb(a, b.type, c) : b.hasOwnProperty("defaultValue") && bb(a, b.type, Sa(b.defaultValue));\n  null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);\n}\n\nfunction cb(a, b, c) {\n  if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {\n    var d = b.type;\n    if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;\n    b = "" + a._wrapperState.initialValue;\n    c || b === a.value || (a.value = b);\n    a.defaultValue = b;\n  }\n\n  c = a.name;\n  "" !== c && (a.name = "");\n  a.defaultChecked = !!a._wrapperState.initialChecked;\n  "" !== c && (a.name = c);\n}\n\nfunction bb(a, b, c) {\n  if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);\n}\n\nfunction db(a) {\n  var b = "";\n  aa.Children.forEach(a, function (a) {\n    null != a && (b += a);\n  });\n  return b;\n}\n\nfunction eb(a, b) {\n  a = m({\n    children: void 0\n  }, b);\n  if (b = db(b.children)) a.children = b;\n  return a;\n}\n\nfunction fb(a, b, c, d) {\n  a = a.options;\n\n  if (b) {\n    b = {};\n\n    for (var e = 0; e < c.length; e++) b["$" + c[e]] = !0;\n\n    for (c = 0; c < a.length; c++) e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);\n  } else {\n    c = "" + Sa(c);\n    b = null;\n\n    for (e = 0; e < a.length; e++) {\n      if (a[e].value === c) {\n        a[e].selected = !0;\n        d && (a[e].defaultSelected = !0);\n        return;\n      }\n\n      null !== b || a[e].disabled || (b = a[e]);\n    }\n\n    null !== b && (b.selected = !0);\n  }\n}\n\nfunction gb(a, b) {\n  if (null != b.dangerouslySetInnerHTML) throw Error(y(91));\n  return m({}, b, {\n    value: void 0,\n    defaultValue: void 0,\n    children: "" + a._wrapperState.initialValue\n  });\n}\n\nfunction hb(a, b) {\n  var c = b.value;\n\n  if (null == c) {\n    c = b.children;\n    b = b.defaultValue;\n\n    if (null != c) {\n      if (null != b) throw Error(y(92));\n\n      if (Array.isArray(c)) {\n        if (!(1 >= c.length)) throw Error(y(93));\n        c = c[0];\n      }\n\n      b = c;\n    }\n\n    null == b && (b = "");\n    c = b;\n  }\n\n  a._wrapperState = {\n    initialValue: Sa(c)\n  };\n}\n\nfunction ib(a, b) {\n  var c = Sa(b.value),\n      d = Sa(b.defaultValue);\n  null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));\n  null != d && (a.defaultValue = "" + d);\n}\n\nfunction jb(a) {\n  var b = a.textContent;\n  b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);\n}\n\nvar kb = {\n  html: "http://www.w3.org/1999/xhtml",\n  mathml: "http://www.w3.org/1998/Math/MathML",\n  svg: "http://www.w3.org/2000/svg"\n};\n\nfunction lb(a) {\n  switch (a) {\n    case "svg":\n      return "http://www.w3.org/2000/svg";\n\n    case "math":\n      return "http://www.w3.org/1998/Math/MathML";\n\n    default:\n      return "http://www.w3.org/1999/xhtml";\n  }\n}\n\nfunction mb(a, b) {\n  return null == a || "http://www.w3.org/1999/xhtml" === a ? lb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;\n}\n\nvar nb,\n    ob = function (a) {\n  return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {\n    MSApp.execUnsafeLocalFunction(function () {\n      return a(b, c, d, e);\n    });\n  } : a;\n}(function (a, b) {\n  if (a.namespaceURI !== kb.svg || "innerHTML" in a) a.innerHTML = b;else {\n    nb = nb || document.createElement("div");\n    nb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";\n\n    for (b = nb.firstChild; a.firstChild;) a.removeChild(a.firstChild);\n\n    for (; b.firstChild;) a.appendChild(b.firstChild);\n  }\n});\n\nfunction pb(a, b) {\n  if (b) {\n    var c = a.firstChild;\n\n    if (c && c === a.lastChild && 3 === c.nodeType) {\n      c.nodeValue = b;\n      return;\n    }\n  }\n\n  a.textContent = b;\n}\n\nvar qb = {\n  animationIterationCount: !0,\n  borderImageOutset: !0,\n  borderImageSlice: !0,\n  borderImageWidth: !0,\n  boxFlex: !0,\n  boxFlexGroup: !0,\n  boxOrdinalGroup: !0,\n  columnCount: !0,\n  columns: !0,\n  flex: !0,\n  flexGrow: !0,\n  flexPositive: !0,\n  flexShrink: !0,\n  flexNegative: !0,\n  flexOrder: !0,\n  gridArea: !0,\n  gridRow: !0,\n  gridRowEnd: !0,\n  gridRowSpan: !0,\n  gridRowStart: !0,\n  gridColumn: !0,\n  gridColumnEnd: !0,\n  gridColumnSpan: !0,\n  gridColumnStart: !0,\n  fontWeight: !0,\n  lineClamp: !0,\n  lineHeight: !0,\n  opacity: !0,\n  order: !0,\n  orphans: !0,\n  tabSize: !0,\n  widows: !0,\n  zIndex: !0,\n  zoom: !0,\n  fillOpacity: !0,\n  floodOpacity: !0,\n  stopOpacity: !0,\n  strokeDasharray: !0,\n  strokeDashoffset: !0,\n  strokeMiterlimit: !0,\n  strokeOpacity: !0,\n  strokeWidth: !0\n},\n    rb = ["Webkit", "ms", "Moz", "O"];\nObject.keys(qb).forEach(function (a) {\n  rb.forEach(function (b) {\n    b = b + a.charAt(0).toUpperCase() + a.substring(1);\n    qb[b] = qb[a];\n  });\n});\n\nfunction sb(a, b, c) {\n  return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || qb.hasOwnProperty(a) && qb[a] ? ("" + b).trim() : b + "px";\n}\n\nfunction tb(a, b) {\n  a = a.style;\n\n  for (var c in b) if (b.hasOwnProperty(c)) {\n    var d = 0 === c.indexOf("--"),\n        e = sb(c, b[c], d);\n    "float" === c && (c = "cssFloat");\n    d ? a.setProperty(c, e) : a[c] = e;\n  }\n}\n\nvar ub = m({\n  menuitem: !0\n}, {\n  area: !0,\n  base: !0,\n  br: !0,\n  col: !0,\n  embed: !0,\n  hr: !0,\n  img: !0,\n  input: !0,\n  keygen: !0,\n  link: !0,\n  meta: !0,\n  param: !0,\n  source: !0,\n  track: !0,\n  wbr: !0\n});\n\nfunction vb(a, b) {\n  if (b) {\n    if (ub[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(y(137, a));\n\n    if (null != b.dangerouslySetInnerHTML) {\n      if (null != b.children) throw Error(y(60));\n      if (!("object" === typeof b.dangerouslySetInnerHTML && "__html" in b.dangerouslySetInnerHTML)) throw Error(y(61));\n    }\n\n    if (null != b.style && "object" !== typeof b.style) throw Error(y(62));\n  }\n}\n\nfunction wb(a, b) {\n  if (-1 === a.indexOf("-")) return "string" === typeof b.is;\n\n  switch (a) {\n    case "annotation-xml":\n    case "color-profile":\n    case "font-face":\n    case "font-face-src":\n    case "font-face-uri":\n    case "font-face-format":\n    case "font-face-name":\n    case "missing-glyph":\n      return !1;\n\n    default:\n      return !0;\n  }\n}\n\nfunction xb(a) {\n  a = a.target || a.srcElement || window;\n  a.correspondingUseElement && (a = a.correspondingUseElement);\n  return 3 === a.nodeType ? a.parentNode : a;\n}\n\nvar yb = null,\n    zb = null,\n    Ab = null;\n\nfunction Bb(a) {\n  if (a = Cb(a)) {\n    if ("function" !== typeof yb) throw Error(y(280));\n    var b = a.stateNode;\n    b && (b = Db(b), yb(a.stateNode, a.type, b));\n  }\n}\n\nfunction Eb(a) {\n  zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;\n}\n\nfunction Fb() {\n  if (zb) {\n    var a = zb,\n        b = Ab;\n    Ab = zb = null;\n    Bb(a);\n    if (b) for (a = 0; a < b.length; a++) Bb(b[a]);\n  }\n}\n\nfunction Gb(a, b) {\n  return a(b);\n}\n\nfunction Hb(a, b, c, d, e) {\n  return a(b, c, d, e);\n}\n\nfunction Ib() {}\n\nvar Jb = Gb,\n    Kb = !1,\n    Lb = !1;\n\nfunction Mb() {\n  if (null !== zb || null !== Ab) Ib(), Fb();\n}\n\nfunction Nb(a, b, c) {\n  if (Lb) return a(b, c);\n  Lb = !0;\n\n  try {\n    return Jb(a, b, c);\n  } finally {\n    Lb = !1, Mb();\n  }\n}\n\nfunction Ob(a, b) {\n  var c = a.stateNode;\n  if (null === c) return null;\n  var d = Db(c);\n  if (null === d) return null;\n  c = d[b];\n\n  a: switch (b) {\n    case "onClick":\n    case "onClickCapture":\n    case "onDoubleClick":\n    case "onDoubleClickCapture":\n    case "onMouseDown":\n    case "onMouseDownCapture":\n    case "onMouseMove":\n    case "onMouseMoveCapture":\n    case "onMouseUp":\n    case "onMouseUpCapture":\n    case "onMouseEnter":\n      (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));\n      a = !d;\n      break a;\n\n    default:\n      a = !1;\n  }\n\n  if (a) return null;\n  if (c && "function" !== typeof c) throw Error(y(231, b, typeof c));\n  return c;\n}\n\nvar Pb = !1;\nif (fa) try {\n  var Qb = {};\n  Object.defineProperty(Qb, "passive", {\n    get: function () {\n      Pb = !0;\n    }\n  });\n  window.addEventListener("test", Qb, Qb);\n  window.removeEventListener("test", Qb, Qb);\n} catch (a) {\n  Pb = !1;\n}\n\nfunction Rb(a, b, c, d, e, f, g, h, k) {\n  var l = Array.prototype.slice.call(arguments, 3);\n\n  try {\n    b.apply(c, l);\n  } catch (n) {\n    this.onError(n);\n  }\n}\n\nvar Sb = !1,\n    Tb = null,\n    Ub = !1,\n    Vb = null,\n    Wb = {\n  onError: function (a) {\n    Sb = !0;\n    Tb = a;\n  }\n};\n\nfunction Xb(a, b, c, d, e, f, g, h, k) {\n  Sb = !1;\n  Tb = null;\n  Rb.apply(Wb, arguments);\n}\n\nfunction Yb(a, b, c, d, e, f, g, h, k) {\n  Xb.apply(this, arguments);\n\n  if (Sb) {\n    if (Sb) {\n      var l = Tb;\n      Sb = !1;\n      Tb = null;\n    } else throw Error(y(198));\n\n    Ub || (Ub = !0, Vb = l);\n  }\n}\n\nfunction Zb(a) {\n  var b = a,\n      c = a;\n  if (a.alternate) for (; b.return;) b = b.return;else {\n    a = b;\n\n    do b = a, 0 !== (b.flags & 1026) && (c = b.return), a = b.return; while (a);\n  }\n  return 3 === b.tag ? c : null;\n}\n\nfunction $b(a) {\n  if (13 === a.tag) {\n    var b = a.memoizedState;\n    null === b && (a = a.alternate, null !== a && (b = a.memoizedState));\n    if (null !== b) return b.dehydrated;\n  }\n\n  return null;\n}\n\nfunction ac(a) {\n  if (Zb(a) !== a) throw Error(y(188));\n}\n\nfunction bc(a) {\n  var b = a.alternate;\n\n  if (!b) {\n    b = Zb(a);\n    if (null === b) throw Error(y(188));\n    return b !== a ? null : a;\n  }\n\n  for (var c = a, d = b;;) {\n    var e = c.return;\n    if (null === e) break;\n    var f = e.alternate;\n\n    if (null === f) {\n      d = e.return;\n\n      if (null !== d) {\n        c = d;\n        continue;\n      }\n\n      break;\n    }\n\n    if (e.child === f.child) {\n      for (f = e.child; f;) {\n        if (f === c) return ac(e), a;\n        if (f === d) return ac(e), b;\n        f = f.sibling;\n      }\n\n      throw Error(y(188));\n    }\n\n    if (c.return !== d.return) c = e, d = f;else {\n      for (var g = !1, h = e.child; h;) {\n        if (h === c) {\n          g = !0;\n          c = e;\n          d = f;\n          break;\n        }\n\n        if (h === d) {\n          g = !0;\n          d = e;\n          c = f;\n          break;\n        }\n\n        h = h.sibling;\n      }\n\n      if (!g) {\n        for (h = f.child; h;) {\n          if (h === c) {\n            g = !0;\n            c = f;\n            d = e;\n            break;\n          }\n\n          if (h === d) {\n            g = !0;\n            d = f;\n            c = e;\n            break;\n          }\n\n          h = h.sibling;\n        }\n\n        if (!g) throw Error(y(189));\n      }\n    }\n    if (c.alternate !== d) throw Error(y(190));\n  }\n\n  if (3 !== c.tag) throw Error(y(188));\n  return c.stateNode.current === c ? a : b;\n}\n\nfunction cc(a) {\n  a = bc(a);\n  if (!a) return null;\n\n  for (var b = a;;) {\n    if (5 === b.tag || 6 === b.tag) return b;\n    if (b.child) b.child.return = b, b = b.child;else {\n      if (b === a) break;\n\n      for (; !b.sibling;) {\n        if (!b.return || b.return === a) return null;\n        b = b.return;\n      }\n\n      b.sibling.return = b.return;\n      b = b.sibling;\n    }\n  }\n\n  return null;\n}\n\nfunction dc(a, b) {\n  for (var c = a.alternate; null !== b;) {\n    if (b === a || b === c) return !0;\n    b = b.return;\n  }\n\n  return !1;\n}\n\nvar ec,\n    fc,\n    gc,\n    hc,\n    ic = !1,\n    jc = [],\n    kc = null,\n    lc = null,\n    mc = null,\n    nc = new Map(),\n    oc = new Map(),\n    pc = [],\n    qc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");\n\nfunction rc(a, b, c, d, e) {\n  return {\n    blockedOn: a,\n    domEventName: b,\n    eventSystemFlags: c | 16,\n    nativeEvent: e,\n    targetContainers: [d]\n  };\n}\n\nfunction sc(a, b) {\n  switch (a) {\n    case "focusin":\n    case "focusout":\n      kc = null;\n      break;\n\n    case "dragenter":\n    case "dragleave":\n      lc = null;\n      break;\n\n    case "mouseover":\n    case "mouseout":\n      mc = null;\n      break;\n\n    case "pointerover":\n    case "pointerout":\n      nc.delete(b.pointerId);\n      break;\n\n    case "gotpointercapture":\n    case "lostpointercapture":\n      oc.delete(b.pointerId);\n  }\n}\n\nfunction tc(a, b, c, d, e, f) {\n  if (null === a || a.nativeEvent !== f) return a = rc(b, c, d, e, f), null !== b && (b = Cb(b), null !== b && fc(b)), a;\n  a.eventSystemFlags |= d;\n  b = a.targetContainers;\n  null !== e && -1 === b.indexOf(e) && b.push(e);\n  return a;\n}\n\nfunction uc(a, b, c, d, e) {\n  switch (b) {\n    case "focusin":\n      return kc = tc(kc, a, b, c, d, e), !0;\n\n    case "dragenter":\n      return lc = tc(lc, a, b, c, d, e), !0;\n\n    case "mouseover":\n      return mc = tc(mc, a, b, c, d, e), !0;\n\n    case "pointerover":\n      var f = e.pointerId;\n      nc.set(f, tc(nc.get(f) || null, a, b, c, d, e));\n      return !0;\n\n    case "gotpointercapture":\n      return f = e.pointerId, oc.set(f, tc(oc.get(f) || null, a, b, c, d, e)), !0;\n  }\n\n  return !1;\n}\n\nfunction vc(a) {\n  var b = wc(a.target);\n\n  if (null !== b) {\n    var c = Zb(b);\n    if (null !== c) if (b = c.tag, 13 === b) {\n      if (b = $b(c), null !== b) {\n        a.blockedOn = b;\n        hc(a.lanePriority, function () {\n          r.unstable_runWithPriority(a.priority, function () {\n            gc(c);\n          });\n        });\n        return;\n      }\n    } else if (3 === b && c.stateNode.hydrate) {\n      a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;\n      return;\n    }\n  }\n\n  a.blockedOn = null;\n}\n\nfunction xc(a) {\n  if (null !== a.blockedOn) return !1;\n\n  for (var b = a.targetContainers; 0 < b.length;) {\n    var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);\n    if (null !== c) return b = Cb(c), null !== b && fc(b), a.blockedOn = c, !1;\n    b.shift();\n  }\n\n  return !0;\n}\n\nfunction zc(a, b, c) {\n  xc(a) && c.delete(b);\n}\n\nfunction Ac() {\n  for (ic = !1; 0 < jc.length;) {\n    var a = jc[0];\n\n    if (null !== a.blockedOn) {\n      a = Cb(a.blockedOn);\n      null !== a && ec(a);\n      break;\n    }\n\n    for (var b = a.targetContainers; 0 < b.length;) {\n      var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);\n\n      if (null !== c) {\n        a.blockedOn = c;\n        break;\n      }\n\n      b.shift();\n    }\n\n    null === a.blockedOn && jc.shift();\n  }\n\n  null !== kc && xc(kc) && (kc = null);\n  null !== lc && xc(lc) && (lc = null);\n  null !== mc && xc(mc) && (mc = null);\n  nc.forEach(zc);\n  oc.forEach(zc);\n}\n\nfunction Bc(a, b) {\n  a.blockedOn === b && (a.blockedOn = null, ic || (ic = !0, r.unstable_scheduleCallback(r.unstable_NormalPriority, Ac)));\n}\n\nfunction Cc(a) {\n  function b(b) {\n    return Bc(b, a);\n  }\n\n  if (0 < jc.length) {\n    Bc(jc[0], a);\n\n    for (var c = 1; c < jc.length; c++) {\n      var d = jc[c];\n      d.blockedOn === a && (d.blockedOn = null);\n    }\n  }\n\n  null !== kc && Bc(kc, a);\n  null !== lc && Bc(lc, a);\n  null !== mc && Bc(mc, a);\n  nc.forEach(b);\n  oc.forEach(b);\n\n  for (c = 0; c < pc.length; c++) d = pc[c], d.blockedOn === a && (d.blockedOn = null);\n\n  for (; 0 < pc.length && (c = pc[0], null === c.blockedOn);) vc(c), null === c.blockedOn && pc.shift();\n}\n\nfunction Dc(a, b) {\n  var c = {};\n  c[a.toLowerCase()] = b.toLowerCase();\n  c["Webkit" + a] = "webkit" + b;\n  c["Moz" + a] = "moz" + b;\n  return c;\n}\n\nvar Ec = {\n  animationend: Dc("Animation", "AnimationEnd"),\n  animationiteration: Dc("Animation", "AnimationIteration"),\n  animationstart: Dc("Animation", "AnimationStart"),\n  transitionend: Dc("Transition", "TransitionEnd")\n},\n    Fc = {},\n    Gc = {};\nfa && (Gc = document.createElement("div").style, "AnimationEvent" in window || (delete Ec.animationend.animation, delete Ec.animationiteration.animation, delete Ec.animationstart.animation), "TransitionEvent" in window || delete Ec.transitionend.transition);\n\nfunction Hc(a) {\n  if (Fc[a]) return Fc[a];\n  if (!Ec[a]) return a;\n  var b = Ec[a],\n      c;\n\n  for (c in b) if (b.hasOwnProperty(c) && c in Gc) return Fc[a] = b[c];\n\n  return a;\n}\n\nvar Ic = Hc("animationend"),\n    Jc = Hc("animationiteration"),\n    Kc = Hc("animationstart"),\n    Lc = Hc("transitionend"),\n    Mc = new Map(),\n    Nc = new Map(),\n    Oc = ["abort", "abort", Ic, "animationEnd", Jc, "animationIteration", Kc, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", Lc, "transitionEnd", "waiting", "waiting"];\n\nfunction Pc(a, b) {\n  for (var c = 0; c < a.length; c += 2) {\n    var d = a[c],\n        e = a[c + 1];\n    e = "on" + (e[0].toUpperCase() + e.slice(1));\n    Nc.set(d, b);\n    Mc.set(d, e);\n    da(e, [d]);\n  }\n}\n\nvar Qc = r.unstable_now;\nQc();\nvar F = 8;\n\nfunction Rc(a) {\n  if (0 !== (1 & a)) return F = 15, 1;\n  if (0 !== (2 & a)) return F = 14, 2;\n  if (0 !== (4 & a)) return F = 13, 4;\n  var b = 24 & a;\n  if (0 !== b) return F = 12, b;\n  if (0 !== (a & 32)) return F = 11, 32;\n  b = 192 & a;\n  if (0 !== b) return F = 10, b;\n  if (0 !== (a & 256)) return F = 9, 256;\n  b = 3584 & a;\n  if (0 !== b) return F = 8, b;\n  if (0 !== (a & 4096)) return F = 7, 4096;\n  b = 4186112 & a;\n  if (0 !== b) return F = 6, b;\n  b = 62914560 & a;\n  if (0 !== b) return F = 5, b;\n  if (a & 67108864) return F = 4, 67108864;\n  if (0 !== (a & 134217728)) return F = 3, 134217728;\n  b = 805306368 & a;\n  if (0 !== b) return F = 2, b;\n  if (0 !== (1073741824 & a)) return F = 1, 1073741824;\n  F = 8;\n  return a;\n}\n\nfunction Sc(a) {\n  switch (a) {\n    case 99:\n      return 15;\n\n    case 98:\n      return 10;\n\n    case 97:\n    case 96:\n      return 8;\n\n    case 95:\n      return 2;\n\n    default:\n      return 0;\n  }\n}\n\nfunction Tc(a) {\n  switch (a) {\n    case 15:\n    case 14:\n      return 99;\n\n    case 13:\n    case 12:\n    case 11:\n    case 10:\n      return 98;\n\n    case 9:\n    case 8:\n    case 7:\n    case 6:\n    case 4:\n    case 5:\n      return 97;\n\n    case 3:\n    case 2:\n    case 1:\n      return 95;\n\n    case 0:\n      return 90;\n\n    default:\n      throw Error(y(358, a));\n  }\n}\n\nfunction Uc(a, b) {\n  var c = a.pendingLanes;\n  if (0 === c) return F = 0;\n  var d = 0,\n      e = 0,\n      f = a.expiredLanes,\n      g = a.suspendedLanes,\n      h = a.pingedLanes;\n  if (0 !== f) d = f, e = F = 15;else if (f = c & 134217727, 0 !== f) {\n    var k = f & ~g;\n    0 !== k ? (d = Rc(k), e = F) : (h &= f, 0 !== h && (d = Rc(h), e = F));\n  } else f = c & ~g, 0 !== f ? (d = Rc(f), e = F) : 0 !== h && (d = Rc(h), e = F);\n  if (0 === d) return 0;\n  d = 31 - Vc(d);\n  d = c & ((0 > d ? 0 : 1 << d) << 1) - 1;\n\n  if (0 !== b && b !== d && 0 === (b & g)) {\n    Rc(b);\n    if (e <= F) return b;\n    F = e;\n  }\n\n  b = a.entangledLanes;\n  if (0 !== b) for (a = a.entanglements, b &= d; 0 < b;) c = 31 - Vc(b), e = 1 << c, d |= a[c], b &= ~e;\n  return d;\n}\n\nfunction Wc(a) {\n  a = a.pendingLanes & -1073741825;\n  return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;\n}\n\nfunction Xc(a, b) {\n  switch (a) {\n    case 15:\n      return 1;\n\n    case 14:\n      return 2;\n\n    case 12:\n      return a = Yc(24 & ~b), 0 === a ? Xc(10, b) : a;\n\n    case 10:\n      return a = Yc(192 & ~b), 0 === a ? Xc(8, b) : a;\n\n    case 8:\n      return a = Yc(3584 & ~b), 0 === a && (a = Yc(4186112 & ~b), 0 === a && (a = 512)), a;\n\n    case 2:\n      return b = Yc(805306368 & ~b), 0 === b && (b = 268435456), b;\n  }\n\n  throw Error(y(358, a));\n}\n\nfunction Yc(a) {\n  return a & -a;\n}\n\nfunction Zc(a) {\n  for (var b = [], c = 0; 31 > c; c++) b.push(a);\n\n  return b;\n}\n\nfunction $c(a, b, c) {\n  a.pendingLanes |= b;\n  var d = b - 1;\n  a.suspendedLanes &= d;\n  a.pingedLanes &= d;\n  a = a.eventTimes;\n  b = 31 - Vc(b);\n  a[b] = c;\n}\n\nvar Vc = Math.clz32 ? Math.clz32 : ad,\n    bd = Math.log,\n    cd = Math.LN2;\n\nfunction ad(a) {\n  return 0 === a ? 32 : 31 - (bd(a) / cd | 0) | 0;\n}\n\nvar dd = r.unstable_UserBlockingPriority,\n    ed = r.unstable_runWithPriority,\n    fd = !0;\n\nfunction gd(a, b, c, d) {\n  Kb || Ib();\n  var e = hd,\n      f = Kb;\n  Kb = !0;\n\n  try {\n    Hb(e, a, b, c, d);\n  } finally {\n    (Kb = f) || Mb();\n  }\n}\n\nfunction id(a, b, c, d) {\n  ed(dd, hd.bind(null, a, b, c, d));\n}\n\nfunction hd(a, b, c, d) {\n  if (fd) {\n    var e;\n    if ((e = 0 === (b & 4)) && 0 < jc.length && -1 < qc.indexOf(a)) a = rc(null, a, b, c, d), jc.push(a);else {\n      var f = yc(a, b, c, d);\n      if (null === f) e && sc(a, d);else {\n        if (e) {\n          if (-1 < qc.indexOf(a)) {\n            a = rc(f, a, b, c, d);\n            jc.push(a);\n            return;\n          }\n\n          if (uc(f, a, b, c, d)) return;\n          sc(a, d);\n        }\n\n        jd(a, b, d, null, c);\n      }\n    }\n  }\n}\n\nfunction yc(a, b, c, d) {\n  var e = xb(d);\n  e = wc(e);\n\n  if (null !== e) {\n    var f = Zb(e);\n    if (null === f) e = null;else {\n      var g = f.tag;\n\n      if (13 === g) {\n        e = $b(f);\n        if (null !== e) return e;\n        e = null;\n      } else if (3 === g) {\n        if (f.stateNode.hydrate) return 3 === f.tag ? f.stateNode.containerInfo : null;\n        e = null;\n      } else f !== e && (e = null);\n    }\n  }\n\n  jd(a, b, d, e, c);\n  return null;\n}\n\nvar kd = null,\n    ld = null,\n    md = null;\n\nfunction nd() {\n  if (md) return md;\n  var a,\n      b = ld,\n      c = b.length,\n      d,\n      e = "value" in kd ? kd.value : kd.textContent,\n      f = e.length;\n\n  for (a = 0; a < c && b[a] === e[a]; a++);\n\n  var g = c - a;\n\n  for (d = 1; d <= g && b[c - d] === e[f - d]; d++);\n\n  return md = e.slice(a, 1 < d ? 1 - d : void 0);\n}\n\nfunction od(a) {\n  var b = a.keyCode;\n  "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;\n  10 === a && (a = 13);\n  return 32 <= a || 13 === a ? a : 0;\n}\n\nfunction pd() {\n  return !0;\n}\n\nfunction qd() {\n  return !1;\n}\n\nfunction rd(a) {\n  function b(b, d, e, f, g) {\n    this._reactName = b;\n    this._targetInst = e;\n    this.type = d;\n    this.nativeEvent = f;\n    this.target = g;\n    this.currentTarget = null;\n\n    for (var c in a) a.hasOwnProperty(c) && (b = a[c], this[c] = b ? b(f) : f[c]);\n\n    this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : !1 === f.returnValue) ? pd : qd;\n    this.isPropagationStopped = qd;\n    return this;\n  }\n\n  m(b.prototype, {\n    preventDefault: function () {\n      this.defaultPrevented = !0;\n      var a = this.nativeEvent;\n      a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = pd);\n    },\n    stopPropagation: function () {\n      var a = this.nativeEvent;\n      a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = pd);\n    },\n    persist: function () {},\n    isPersistent: pd\n  });\n  return b;\n}\n\nvar sd = {\n  eventPhase: 0,\n  bubbles: 0,\n  cancelable: 0,\n  timeStamp: function (a) {\n    return a.timeStamp || Date.now();\n  },\n  defaultPrevented: 0,\n  isTrusted: 0\n},\n    td = rd(sd),\n    ud = m({}, sd, {\n  view: 0,\n  detail: 0\n}),\n    vd = rd(ud),\n    wd,\n    xd,\n    yd,\n    Ad = m({}, ud, {\n  screenX: 0,\n  screenY: 0,\n  clientX: 0,\n  clientY: 0,\n  pageX: 0,\n  pageY: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  altKey: 0,\n  metaKey: 0,\n  getModifierState: zd,\n  button: 0,\n  buttons: 0,\n  relatedTarget: function (a) {\n    return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;\n  },\n  movementX: function (a) {\n    if ("movementX" in a) return a.movementX;\n    a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);\n    return wd;\n  },\n  movementY: function (a) {\n    return "movementY" in a ? a.movementY : xd;\n  }\n}),\n    Bd = rd(Ad),\n    Cd = m({}, Ad, {\n  dataTransfer: 0\n}),\n    Dd = rd(Cd),\n    Ed = m({}, ud, {\n  relatedTarget: 0\n}),\n    Fd = rd(Ed),\n    Gd = m({}, sd, {\n  animationName: 0,\n  elapsedTime: 0,\n  pseudoElement: 0\n}),\n    Hd = rd(Gd),\n    Id = m({}, sd, {\n  clipboardData: function (a) {\n    return "clipboardData" in a ? a.clipboardData : window.clipboardData;\n  }\n}),\n    Jd = rd(Id),\n    Kd = m({}, sd, {\n  data: 0\n}),\n    Ld = rd(Kd),\n    Md = {\n  Esc: "Escape",\n  Spacebar: " ",\n  Left: "ArrowLeft",\n  Up: "ArrowUp",\n  Right: "ArrowRight",\n  Down: "ArrowDown",\n  Del: "Delete",\n  Win: "OS",\n  Menu: "ContextMenu",\n  Apps: "ContextMenu",\n  Scroll: "ScrollLock",\n  MozPrintableKey: "Unidentified"\n},\n    Nd = {\n  8: "Backspace",\n  9: "Tab",\n  12: "Clear",\n  13: "Enter",\n  16: "Shift",\n  17: "Control",\n  18: "Alt",\n  19: "Pause",\n  20: "CapsLock",\n  27: "Escape",\n  32: " ",\n  33: "PageUp",\n  34: "PageDown",\n  35: "End",\n  36: "Home",\n  37: "ArrowLeft",\n  38: "ArrowUp",\n  39: "ArrowRight",\n  40: "ArrowDown",\n  45: "Insert",\n  46: "Delete",\n  112: "F1",\n  113: "F2",\n  114: "F3",\n  115: "F4",\n  116: "F5",\n  117: "F6",\n  118: "F7",\n  119: "F8",\n  120: "F9",\n  121: "F10",\n  122: "F11",\n  123: "F12",\n  144: "NumLock",\n  145: "ScrollLock",\n  224: "Meta"\n},\n    Od = {\n  Alt: "altKey",\n  Control: "ctrlKey",\n  Meta: "metaKey",\n  Shift: "shiftKey"\n};\n\nfunction Pd(a) {\n  var b = this.nativeEvent;\n  return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : !1;\n}\n\nfunction zd() {\n  return Pd;\n}\n\nvar Qd = m({}, ud, {\n  key: function (a) {\n    if (a.key) {\n      var b = Md[a.key] || a.key;\n      if ("Unidentified" !== b) return b;\n    }\n\n    return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";\n  },\n  code: 0,\n  location: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  altKey: 0,\n  metaKey: 0,\n  repeat: 0,\n  locale: 0,\n  getModifierState: zd,\n  charCode: function (a) {\n    return "keypress" === a.type ? od(a) : 0;\n  },\n  keyCode: function (a) {\n    return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;\n  },\n  which: function (a) {\n    return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;\n  }\n}),\n    Rd = rd(Qd),\n    Sd = m({}, Ad, {\n  pointerId: 0,\n  width: 0,\n  height: 0,\n  pressure: 0,\n  tangentialPressure: 0,\n  tiltX: 0,\n  tiltY: 0,\n  twist: 0,\n  pointerType: 0,\n  isPrimary: 0\n}),\n    Td = rd(Sd),\n    Ud = m({}, ud, {\n  touches: 0,\n  targetTouches: 0,\n  changedTouches: 0,\n  altKey: 0,\n  metaKey: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  getModifierState: zd\n}),\n    Vd = rd(Ud),\n    Wd = m({}, sd, {\n  propertyName: 0,\n  elapsedTime: 0,\n  pseudoElement: 0\n}),\n    Xd = rd(Wd),\n    Yd = m({}, Ad, {\n  deltaX: function (a) {\n    return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;\n  },\n  deltaY: function (a) {\n    return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;\n  },\n  deltaZ: 0,\n  deltaMode: 0\n}),\n    Zd = rd(Yd),\n    $d = [9, 13, 27, 32],\n    ae = fa && "CompositionEvent" in window,\n    be = null;\nfa && "documentMode" in document && (be = document.documentMode);\nvar ce = fa && "TextEvent" in window && !be,\n    de = fa && (!ae || be && 8 < be && 11 >= be),\n    ee = String.fromCharCode(32),\n    fe = !1;\n\nfunction ge(a, b) {\n  switch (a) {\n    case "keyup":\n      return -1 !== $d.indexOf(b.keyCode);\n\n    case "keydown":\n      return 229 !== b.keyCode;\n\n    case "keypress":\n    case "mousedown":\n    case "focusout":\n      return !0;\n\n    default:\n      return !1;\n  }\n}\n\nfunction he(a) {\n  a = a.detail;\n  return "object" === typeof a && "data" in a ? a.data : null;\n}\n\nvar ie = !1;\n\nfunction je(a, b) {\n  switch (a) {\n    case "compositionend":\n      return he(b);\n\n    case "keypress":\n      if (32 !== b.which) return null;\n      fe = !0;\n      return ee;\n\n    case "textInput":\n      return a = b.data, a === ee && fe ? null : a;\n\n    default:\n      return null;\n  }\n}\n\nfunction ke(a, b) {\n  if (ie) return "compositionend" === a || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = !1, a) : null;\n\n  switch (a) {\n    case "paste":\n      return null;\n\n    case "keypress":\n      if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {\n        if (b.char && 1 < b.char.length) return b.char;\n        if (b.which) return String.fromCharCode(b.which);\n      }\n\n      return null;\n\n    case "compositionend":\n      return de && "ko" !== b.locale ? null : b.data;\n\n    default:\n      return null;\n  }\n}\n\nvar le = {\n  color: !0,\n  date: !0,\n  datetime: !0,\n  "datetime-local": !0,\n  email: !0,\n  month: !0,\n  number: !0,\n  password: !0,\n  range: !0,\n  search: !0,\n  tel: !0,\n  text: !0,\n  time: !0,\n  url: !0,\n  week: !0\n};\n\nfunction me(a) {\n  var b = a && a.nodeName && a.nodeName.toLowerCase();\n  return "input" === b ? !!le[a.type] : "textarea" === b ? !0 : !1;\n}\n\nfunction ne(a, b, c, d) {\n  Eb(d);\n  b = oe(b, "onChange");\n  0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({\n    event: c,\n    listeners: b\n  }));\n}\n\nvar pe = null,\n    qe = null;\n\nfunction re(a) {\n  se(a, 0);\n}\n\nfunction te(a) {\n  var b = ue(a);\n  if (Wa(b)) return a;\n}\n\nfunction ve(a, b) {\n  if ("change" === a) return b;\n}\n\nvar we = !1;\n\nif (fa) {\n  var xe;\n\n  if (fa) {\n    var ye = ("oninput" in document);\n\n    if (!ye) {\n      var ze = document.createElement("div");\n      ze.setAttribute("oninput", "return;");\n      ye = "function" === typeof ze.oninput;\n    }\n\n    xe = ye;\n  } else xe = !1;\n\n  we = xe && (!document.documentMode || 9 < document.documentMode);\n}\n\nfunction Ae() {\n  pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);\n}\n\nfunction Be(a) {\n  if ("value" === a.propertyName && te(qe)) {\n    var b = [];\n    ne(b, qe, a, xb(a));\n    a = re;\n    if (Kb) a(b);else {\n      Kb = !0;\n\n      try {\n        Gb(a, b);\n      } finally {\n        Kb = !1, Mb();\n      }\n    }\n  }\n}\n\nfunction Ce(a, b, c) {\n  "focusin" === a ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();\n}\n\nfunction De(a) {\n  if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);\n}\n\nfunction Ee(a, b) {\n  if ("click" === a) return te(b);\n}\n\nfunction Fe(a, b) {\n  if ("input" === a || "change" === a) return te(b);\n}\n\nfunction Ge(a, b) {\n  return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;\n}\n\nvar He = "function" === typeof Object.is ? Object.is : Ge,\n    Ie = Object.prototype.hasOwnProperty;\n\nfunction Je(a, b) {\n  if (He(a, b)) return !0;\n  if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return !1;\n  var c = Object.keys(a),\n      d = Object.keys(b);\n  if (c.length !== d.length) return !1;\n\n  for (d = 0; d < c.length; d++) if (!Ie.call(b, c[d]) || !He(a[c[d]], b[c[d]])) return !1;\n\n  return !0;\n}\n\nfunction Ke(a) {\n  for (; a && a.firstChild;) a = a.firstChild;\n\n  return a;\n}\n\nfunction Le(a, b) {\n  var c = Ke(a);\n  a = 0;\n\n  for (var d; c;) {\n    if (3 === c.nodeType) {\n      d = a + c.textContent.length;\n      if (a <= b && d >= b) return {\n        node: c,\n        offset: b - a\n      };\n      a = d;\n    }\n\n    a: {\n      for (; c;) {\n        if (c.nextSibling) {\n          c = c.nextSibling;\n          break a;\n        }\n\n        c = c.parentNode;\n      }\n\n      c = void 0;\n    }\n\n    c = Ke(c);\n  }\n}\n\nfunction Me(a, b) {\n  return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? Me(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;\n}\n\nfunction Ne() {\n  for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement;) {\n    try {\n      var c = "string" === typeof b.contentWindow.location.href;\n    } catch (d) {\n      c = !1;\n    }\n\n    if (c) a = b.contentWindow;else break;\n    b = Xa(a.document);\n  }\n\n  return b;\n}\n\nfunction Oe(a) {\n  var b = a && a.nodeName && a.nodeName.toLowerCase();\n  return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);\n}\n\nvar Pe = fa && "documentMode" in document && 11 >= document.documentMode,\n    Qe = null,\n    Re = null,\n    Se = null,\n    Te = !1;\n\nfunction Ue(a, b, c) {\n  var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;\n  Te || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Oe(d) ? d = {\n    start: d.selectionStart,\n    end: d.selectionEnd\n  } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = {\n    anchorNode: d.anchorNode,\n    anchorOffset: d.anchorOffset,\n    focusNode: d.focusNode,\n    focusOffset: d.focusOffset\n  }), Se && Je(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({\n    event: b,\n    listeners: d\n  }), b.target = Qe)));\n}\n\nPc("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "), 0);\nPc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "), 1);\nPc(Oc, 2);\n\nfor (var Ve = "change selectionchange textInput compositionstart compositionend compositionupdate".split(" "), We = 0; We < Ve.length; We++) Nc.set(Ve[We], 0);\n\nea("onMouseEnter", ["mouseout", "mouseover"]);\nea("onMouseLeave", ["mouseout", "mouseover"]);\nea("onPointerEnter", ["pointerout", "pointerover"]);\nea("onPointerLeave", ["pointerout", "pointerover"]);\nda("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));\nda("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));\nda("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);\nda("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));\nda("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));\nda("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));\nvar Xe = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),\n    Ye = new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe));\n\nfunction Ze(a, b, c) {\n  var d = a.type || "unknown-event";\n  a.currentTarget = c;\n  Yb(d, b, void 0, a);\n  a.currentTarget = null;\n}\n\nfunction se(a, b) {\n  b = 0 !== (b & 4);\n\n  for (var c = 0; c < a.length; c++) {\n    var d = a[c],\n        e = d.event;\n    d = d.listeners;\n\n    a: {\n      var f = void 0;\n      if (b) for (var g = d.length - 1; 0 <= g; g--) {\n        var h = d[g],\n            k = h.instance,\n            l = h.currentTarget;\n        h = h.listener;\n        if (k !== f && e.isPropagationStopped()) break a;\n        Ze(e, h, l);\n        f = k;\n      } else for (g = 0; g < d.length; g++) {\n        h = d[g];\n        k = h.instance;\n        l = h.currentTarget;\n        h = h.listener;\n        if (k !== f && e.isPropagationStopped()) break a;\n        Ze(e, h, l);\n        f = k;\n      }\n    }\n  }\n\n  if (Ub) throw a = Vb, Ub = !1, Vb = null, a;\n}\n\nfunction G(a, b) {\n  var c = $e(b),\n      d = a + "__bubble";\n  c.has(d) || (af(b, a, 2, !1), c.add(d));\n}\n\nvar bf = "_reactListening" + Math.random().toString(36).slice(2);\n\nfunction cf(a) {\n  a[bf] || (a[bf] = !0, ba.forEach(function (b) {\n    Ye.has(b) || df(b, !1, a, null);\n    df(b, !0, a, null);\n  }));\n}\n\nfunction df(a, b, c, d) {\n  var e = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 0,\n      f = c;\n  "selectionchange" === a && 9 !== c.nodeType && (f = c.ownerDocument);\n\n  if (null !== d && !b && Ye.has(a)) {\n    if ("scroll" !== a) return;\n    e |= 2;\n    f = d;\n  }\n\n  var g = $e(f),\n      h = a + "__" + (b ? "capture" : "bubble");\n  g.has(h) || (b && (e |= 4), af(f, a, e, b), g.add(h));\n}\n\nfunction af(a, b, c, d) {\n  var e = Nc.get(b);\n\n  switch (void 0 === e ? 2 : e) {\n    case 0:\n      e = gd;\n      break;\n\n    case 1:\n      e = id;\n      break;\n\n    default:\n      e = hd;\n  }\n\n  c = e.bind(null, b, c, a);\n  e = void 0;\n  !Pb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = !0);\n  d ? void 0 !== e ? a.addEventListener(b, c, {\n    capture: !0,\n    passive: e\n  }) : a.addEventListener(b, c, !0) : void 0 !== e ? a.addEventListener(b, c, {\n    passive: e\n  }) : a.addEventListener(b, c, !1);\n}\n\nfunction jd(a, b, c, d, e) {\n  var f = d;\n  if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for (;;) {\n    if (null === d) return;\n    var g = d.tag;\n\n    if (3 === g || 4 === g) {\n      var h = d.stateNode.containerInfo;\n      if (h === e || 8 === h.nodeType && h.parentNode === e) break;\n      if (4 === g) for (g = d.return; null !== g;) {\n        var k = g.tag;\n        if (3 === k || 4 === k) if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e) return;\n        g = g.return;\n      }\n\n      for (; null !== h;) {\n        g = wc(h);\n        if (null === g) return;\n        k = g.tag;\n\n        if (5 === k || 6 === k) {\n          d = f = g;\n          continue a;\n        }\n\n        h = h.parentNode;\n      }\n    }\n\n    d = d.return;\n  }\n  Nb(function () {\n    var d = f,\n        e = xb(c),\n        g = [];\n\n    a: {\n      var h = Mc.get(a);\n\n      if (void 0 !== h) {\n        var k = td,\n            x = a;\n\n        switch (a) {\n          case "keypress":\n            if (0 === od(c)) break a;\n\n          case "keydown":\n          case "keyup":\n            k = Rd;\n            break;\n\n          case "focusin":\n            x = "focus";\n            k = Fd;\n            break;\n\n          case "focusout":\n            x = "blur";\n            k = Fd;\n            break;\n\n          case "beforeblur":\n          case "afterblur":\n            k = Fd;\n            break;\n\n          case "click":\n            if (2 === c.button) break a;\n\n          case "auxclick":\n          case "dblclick":\n          case "mousedown":\n          case "mousemove":\n          case "mouseup":\n          case "mouseout":\n          case "mouseover":\n          case "contextmenu":\n            k = Bd;\n            break;\n\n          case "drag":\n          case "dragend":\n          case "dragenter":\n          case "dragexit":\n          case "dragleave":\n          case "dragover":\n          case "dragstart":\n          case "drop":\n            k = Dd;\n            break;\n\n          case "touchcancel":\n          case "touchend":\n          case "touchmove":\n          case "touchstart":\n            k = Vd;\n            break;\n\n          case Ic:\n          case Jc:\n          case Kc:\n            k = Hd;\n            break;\n\n          case Lc:\n            k = Xd;\n            break;\n\n          case "scroll":\n            k = vd;\n            break;\n\n          case "wheel":\n            k = Zd;\n            break;\n\n          case "copy":\n          case "cut":\n          case "paste":\n            k = Jd;\n            break;\n\n          case "gotpointercapture":\n          case "lostpointercapture":\n          case "pointercancel":\n          case "pointerdown":\n          case "pointermove":\n          case "pointerout":\n          case "pointerover":\n          case "pointerup":\n            k = Td;\n        }\n\n        var w = 0 !== (b & 4),\n            z = !w && "scroll" === a,\n            u = w ? null !== h ? h + "Capture" : null : h;\n        w = [];\n\n        for (var t = d, q; null !== t;) {\n          q = t;\n          var v = q.stateNode;\n          5 === q.tag && null !== v && (q = v, null !== u && (v = Ob(t, u), null != v && w.push(ef(t, v, q))));\n          if (z) break;\n          t = t.return;\n        }\n\n        0 < w.length && (h = new k(h, x, null, c, e), g.push({\n          event: h,\n          listeners: w\n        }));\n      }\n    }\n\n    if (0 === (b & 7)) {\n      a: {\n        h = "mouseover" === a || "pointerover" === a;\n        k = "mouseout" === a || "pointerout" === a;\n        if (h && 0 === (b & 16) && (x = c.relatedTarget || c.fromElement) && (wc(x) || x[ff])) break a;\n\n        if (k || h) {\n          h = e.window === e ? e : (h = e.ownerDocument) ? h.defaultView || h.parentWindow : window;\n\n          if (k) {\n            if (x = c.relatedTarget || c.toElement, k = d, x = x ? wc(x) : null, null !== x && (z = Zb(x), x !== z || 5 !== x.tag && 6 !== x.tag)) x = null;\n          } else k = null, x = d;\n\n          if (k !== x) {\n            w = Bd;\n            v = "onMouseLeave";\n            u = "onMouseEnter";\n            t = "mouse";\n            if ("pointerout" === a || "pointerover" === a) w = Td, v = "onPointerLeave", u = "onPointerEnter", t = "pointer";\n            z = null == k ? h : ue(k);\n            q = null == x ? h : ue(x);\n            h = new w(v, t + "leave", k, c, e);\n            h.target = z;\n            h.relatedTarget = q;\n            v = null;\n            wc(e) === d && (w = new w(u, t + "enter", x, c, e), w.target = q, w.relatedTarget = z, v = w);\n            z = v;\n            if (k && x) b: {\n              w = k;\n              u = x;\n              t = 0;\n\n              for (q = w; q; q = gf(q)) t++;\n\n              q = 0;\n\n              for (v = u; v; v = gf(v)) q++;\n\n              for (; 0 < t - q;) w = gf(w), t--;\n\n              for (; 0 < q - t;) u = gf(u), q--;\n\n              for (; t--;) {\n                if (w === u || null !== u && w === u.alternate) break b;\n                w = gf(w);\n                u = gf(u);\n              }\n\n              w = null;\n            } else w = null;\n            null !== k && hf(g, h, k, w, !1);\n            null !== x && null !== z && hf(g, z, x, w, !0);\n          }\n        }\n      }\n\n      a: {\n        h = d ? ue(d) : window;\n        k = h.nodeName && h.nodeName.toLowerCase();\n        if ("select" === k || "input" === k && "file" === h.type) var J = ve;else if (me(h)) {\n          if (we) J = Fe;else {\n            J = De;\n            var K = Ce;\n          }\n        } else (k = h.nodeName) && "input" === k.toLowerCase() && ("checkbox" === h.type || "radio" === h.type) && (J = Ee);\n\n        if (J && (J = J(a, d))) {\n          ne(g, J, c, e);\n          break a;\n        }\n\n        K && K(a, h, d);\n        "focusout" === a && (K = h._wrapperState) && K.controlled && "number" === h.type && bb(h, "number", h.value);\n      }\n\n      K = d ? ue(d) : window;\n\n      switch (a) {\n        case "focusin":\n          if (me(K) || "true" === K.contentEditable) Qe = K, Re = d, Se = null;\n          break;\n\n        case "focusout":\n          Se = Re = Qe = null;\n          break;\n\n        case "mousedown":\n          Te = !0;\n          break;\n\n        case "contextmenu":\n        case "mouseup":\n        case "dragend":\n          Te = !1;\n          Ue(g, c, e);\n          break;\n\n        case "selectionchange":\n          if (Pe) break;\n\n        case "keydown":\n        case "keyup":\n          Ue(g, c, e);\n      }\n\n      var Q;\n      if (ae) b: {\n        switch (a) {\n          case "compositionstart":\n            var L = "onCompositionStart";\n            break b;\n\n          case "compositionend":\n            L = "onCompositionEnd";\n            break b;\n\n          case "compositionupdate":\n            L = "onCompositionUpdate";\n            break b;\n        }\n\n        L = void 0;\n      } else ie ? ge(a, c) && (L = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (L = "onCompositionStart");\n      L && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== L ? "onCompositionEnd" === L && ie && (Q = nd()) : (kd = e, ld = "value" in kd ? kd.value : kd.textContent, ie = !0)), K = oe(d, L), 0 < K.length && (L = new Ld(L, a, null, c, e), g.push({\n        event: L,\n        listeners: K\n      }), Q ? L.data = Q : (Q = he(c), null !== Q && (L.data = Q))));\n      if (Q = ce ? je(a, c) : ke(a, c)) d = oe(d, "onBeforeInput"), 0 < d.length && (e = new Ld("onBeforeInput", "beforeinput", null, c, e), g.push({\n        event: e,\n        listeners: d\n      }), e.data = Q);\n    }\n\n    se(g, b);\n  });\n}\n\nfunction ef(a, b, c) {\n  return {\n    instance: a,\n    listener: b,\n    currentTarget: c\n  };\n}\n\nfunction oe(a, b) {\n  for (var c = b + "Capture", d = []; null !== a;) {\n    var e = a,\n        f = e.stateNode;\n    5 === e.tag && null !== f && (e = f, f = Ob(a, c), null != f && d.unshift(ef(a, f, e)), f = Ob(a, b), null != f && d.push(ef(a, f, e)));\n    a = a.return;\n  }\n\n  return d;\n}\n\nfunction gf(a) {\n  if (null === a) return null;\n\n  do a = a.return; while (a && 5 !== a.tag);\n\n  return a ? a : null;\n}\n\nfunction hf(a, b, c, d, e) {\n  for (var f = b._reactName, g = []; null !== c && c !== d;) {\n    var h = c,\n        k = h.alternate,\n        l = h.stateNode;\n    if (null !== k && k === d) break;\n    5 === h.tag && null !== l && (h = l, e ? (k = Ob(c, f), null != k && g.unshift(ef(c, k, h))) : e || (k = Ob(c, f), null != k && g.push(ef(c, k, h))));\n    c = c.return;\n  }\n\n  0 !== g.length && a.push({\n    event: b,\n    listeners: g\n  });\n}\n\nfunction jf() {}\n\nvar kf = null,\n    lf = null;\n\nfunction mf(a, b) {\n  switch (a) {\n    case "button":\n    case "input":\n    case "select":\n    case "textarea":\n      return !!b.autoFocus;\n  }\n\n  return !1;\n}\n\nfunction nf(a, b) {\n  return "textarea" === a || "option" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;\n}\n\nvar of = "function" === typeof setTimeout ? setTimeout : void 0,\n    pf = "function" === typeof clearTimeout ? clearTimeout : void 0;\n\nfunction qf(a) {\n  1 === a.nodeType ? a.textContent = "" : 9 === a.nodeType && (a = a.body, null != a && (a.textContent = ""));\n}\n\nfunction rf(a) {\n  for (; null != a; a = a.nextSibling) {\n    var b = a.nodeType;\n    if (1 === b || 3 === b) break;\n  }\n\n  return a;\n}\n\nfunction sf(a) {\n  a = a.previousSibling;\n\n  for (var b = 0; a;) {\n    if (8 === a.nodeType) {\n      var c = a.data;\n\n      if ("$" === c || "$!" === c || "$?" === c) {\n        if (0 === b) return a;\n        b--;\n      } else "/$" === c && b++;\n    }\n\n    a = a.previousSibling;\n  }\n\n  return null;\n}\n\nvar tf = 0;\n\nfunction uf(a) {\n  return {\n    $$typeof: Ga,\n    toString: a,\n    valueOf: a\n  };\n}\n\nvar vf = Math.random().toString(36).slice(2),\n    wf = "__reactFiber$" + vf,\n    xf = "__reactProps$" + vf,\n    ff = "__reactContainer$" + vf,\n    yf = "__reactEvents$" + vf;\n\nfunction wc(a) {\n  var b = a[wf];\n  if (b) return b;\n\n  for (var c = a.parentNode; c;) {\n    if (b = c[ff] || c[wf]) {\n      c = b.alternate;\n      if (null !== b.child || null !== c && null !== c.child) for (a = sf(a); null !== a;) {\n        if (c = a[wf]) return c;\n        a = sf(a);\n      }\n      return b;\n    }\n\n    a = c;\n    c = a.parentNode;\n  }\n\n  return null;\n}\n\nfunction Cb(a) {\n  a = a[wf] || a[ff];\n  return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;\n}\n\nfunction ue(a) {\n  if (5 === a.tag || 6 === a.tag) return a.stateNode;\n  throw Error(y(33));\n}\n\nfunction Db(a) {\n  return a[xf] || null;\n}\n\nfunction $e(a) {\n  var b = a[yf];\n  void 0 === b && (b = a[yf] = new Set());\n  return b;\n}\n\nvar zf = [],\n    Af = -1;\n\nfunction Bf(a) {\n  return {\n    current: a\n  };\n}\n\nfunction H(a) {\n  0 > Af || (a.current = zf[Af], zf[Af] = null, Af--);\n}\n\nfunction I(a, b) {\n  Af++;\n  zf[Af] = a.current;\n  a.current = b;\n}\n\nvar Cf = {},\n    M = Bf(Cf),\n    N = Bf(!1),\n    Df = Cf;\n\nfunction Ef(a, b) {\n  var c = a.type.contextTypes;\n  if (!c) return Cf;\n  var d = a.stateNode;\n  if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;\n  var e = {},\n      f;\n\n  for (f in c) e[f] = b[f];\n\n  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);\n  return e;\n}\n\nfunction Ff(a) {\n  a = a.childContextTypes;\n  return null !== a && void 0 !== a;\n}\n\nfunction Gf() {\n  H(N);\n  H(M);\n}\n\nfunction Hf(a, b, c) {\n  if (M.current !== Cf) throw Error(y(168));\n  I(M, b);\n  I(N, c);\n}\n\nfunction If(a, b, c) {\n  var d = a.stateNode;\n  a = b.childContextTypes;\n  if ("function" !== typeof d.getChildContext) return c;\n  d = d.getChildContext();\n\n  for (var e in d) if (!(e in a)) throw Error(y(108, Ra(b) || "Unknown", e));\n\n  return m({}, c, d);\n}\n\nfunction Jf(a) {\n  a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Cf;\n  Df = M.current;\n  I(M, a);\n  I(N, N.current);\n  return !0;\n}\n\nfunction Kf(a, b, c) {\n  var d = a.stateNode;\n  if (!d) throw Error(y(169));\n  c ? (a = If(a, b, Df), d.__reactInternalMemoizedMergedChildContext = a, H(N), H(M), I(M, a)) : H(N);\n  I(N, c);\n}\n\nvar Lf = null,\n    Mf = null,\n    Nf = r.unstable_runWithPriority,\n    Of = r.unstable_scheduleCallback,\n    Pf = r.unstable_cancelCallback,\n    Qf = r.unstable_shouldYield,\n    Rf = r.unstable_requestPaint,\n    Sf = r.unstable_now,\n    Tf = r.unstable_getCurrentPriorityLevel,\n    Uf = r.unstable_ImmediatePriority,\n    Vf = r.unstable_UserBlockingPriority,\n    Wf = r.unstable_NormalPriority,\n    Xf = r.unstable_LowPriority,\n    Yf = r.unstable_IdlePriority,\n    Zf = {},\n    $f = void 0 !== Rf ? Rf : function () {},\n    ag = null,\n    bg = null,\n    cg = !1,\n    dg = Sf(),\n    O = 1E4 > dg ? Sf : function () {\n  return Sf() - dg;\n};\n\nfunction eg() {\n  switch (Tf()) {\n    case Uf:\n      return 99;\n\n    case Vf:\n      return 98;\n\n    case Wf:\n      return 97;\n\n    case Xf:\n      return 96;\n\n    case Yf:\n      return 95;\n\n    default:\n      throw Error(y(332));\n  }\n}\n\nfunction fg(a) {\n  switch (a) {\n    case 99:\n      return Uf;\n\n    case 98:\n      return Vf;\n\n    case 97:\n      return Wf;\n\n    case 96:\n      return Xf;\n\n    case 95:\n      return Yf;\n\n    default:\n      throw Error(y(332));\n  }\n}\n\nfunction gg(a, b) {\n  a = fg(a);\n  return Nf(a, b);\n}\n\nfunction hg(a, b, c) {\n  a = fg(a);\n  return Of(a, b, c);\n}\n\nfunction ig() {\n  if (null !== bg) {\n    var a = bg;\n    bg = null;\n    Pf(a);\n  }\n\n  jg();\n}\n\nfunction jg() {\n  if (!cg && null !== ag) {\n    cg = !0;\n    var a = 0;\n\n    try {\n      var b = ag;\n      gg(99, function () {\n        for (; a < b.length; a++) {\n          var c = b[a];\n\n          do c = c(!0); while (null !== c);\n        }\n      });\n      ag = null;\n    } catch (c) {\n      throw null !== ag && (ag = ag.slice(a + 1)), Of(Uf, ig), c;\n    } finally {\n      cg = !1;\n    }\n  }\n}\n\nvar kg = ra.ReactCurrentBatchConfig;\n\nfunction lg(a, b) {\n  if (a && a.defaultProps) {\n    b = m({}, b);\n    a = a.defaultProps;\n\n    for (var c in a) void 0 === b[c] && (b[c] = a[c]);\n\n    return b;\n  }\n\n  return b;\n}\n\nvar mg = Bf(null),\n    ng = null,\n    og = null,\n    pg = null;\n\nfunction qg() {\n  pg = og = ng = null;\n}\n\nfunction rg(a) {\n  var b = mg.current;\n  H(mg);\n  a.type._context._currentValue = b;\n}\n\nfunction sg(a, b) {\n  for (; null !== a;) {\n    var c = a.alternate;\n    if ((a.childLanes & b) === b) {\n      if (null === c || (c.childLanes & b) === b) break;else c.childLanes |= b;\n    } else a.childLanes |= b, null !== c && (c.childLanes |= b);\n    a = a.return;\n  }\n}\n\nfunction tg(a, b) {\n  ng = a;\n  pg = og = null;\n  a = a.dependencies;\n  null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (ug = !0), a.firstContext = null);\n}\n\nfunction vg(a, b) {\n  if (pg !== a && !1 !== b && 0 !== b) {\n    if ("number" !== typeof b || 1073741823 === b) pg = a, b = 1073741823;\n    b = {\n      context: a,\n      observedBits: b,\n      next: null\n    };\n\n    if (null === og) {\n      if (null === ng) throw Error(y(308));\n      og = b;\n      ng.dependencies = {\n        lanes: 0,\n        firstContext: b,\n        responders: null\n      };\n    } else og = og.next = b;\n  }\n\n  return a._currentValue;\n}\n\nvar wg = !1;\n\nfunction xg(a) {\n  a.updateQueue = {\n    baseState: a.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null\n    },\n    effects: null\n  };\n}\n\nfunction yg(a, b) {\n  a = a.updateQueue;\n  b.updateQueue === a && (b.updateQueue = {\n    baseState: a.baseState,\n    firstBaseUpdate: a.firstBaseUpdate,\n    lastBaseUpdate: a.lastBaseUpdate,\n    shared: a.shared,\n    effects: a.effects\n  });\n}\n\nfunction zg(a, b) {\n  return {\n    eventTime: a,\n    lane: b,\n    tag: 0,\n    payload: null,\n    callback: null,\n    next: null\n  };\n}\n\nfunction Ag(a, b) {\n  a = a.updateQueue;\n\n  if (null !== a) {\n    a = a.shared;\n    var c = a.pending;\n    null === c ? b.next = b : (b.next = c.next, c.next = b);\n    a.pending = b;\n  }\n}\n\nfunction Bg(a, b) {\n  var c = a.updateQueue,\n      d = a.alternate;\n\n  if (null !== d && (d = d.updateQueue, c === d)) {\n    var e = null,\n        f = null;\n    c = c.firstBaseUpdate;\n\n    if (null !== c) {\n      do {\n        var g = {\n          eventTime: c.eventTime,\n          lane: c.lane,\n          tag: c.tag,\n          payload: c.payload,\n          callback: c.callback,\n          next: null\n        };\n        null === f ? e = f = g : f = f.next = g;\n        c = c.next;\n      } while (null !== c);\n\n      null === f ? e = f = b : f = f.next = b;\n    } else e = f = b;\n\n    c = {\n      baseState: d.baseState,\n      firstBaseUpdate: e,\n      lastBaseUpdate: f,\n      shared: d.shared,\n      effects: d.effects\n    };\n    a.updateQueue = c;\n    return;\n  }\n\n  a = c.lastBaseUpdate;\n  null === a ? c.firstBaseUpdate = b : a.next = b;\n  c.lastBaseUpdate = b;\n}\n\nfunction Cg(a, b, c, d) {\n  var e = a.updateQueue;\n  wg = !1;\n  var f = e.firstBaseUpdate,\n      g = e.lastBaseUpdate,\n      h = e.shared.pending;\n\n  if (null !== h) {\n    e.shared.pending = null;\n    var k = h,\n        l = k.next;\n    k.next = null;\n    null === g ? f = l : g.next = l;\n    g = k;\n    var n = a.alternate;\n\n    if (null !== n) {\n      n = n.updateQueue;\n      var A = n.lastBaseUpdate;\n      A !== g && (null === A ? n.firstBaseUpdate = l : A.next = l, n.lastBaseUpdate = k);\n    }\n  }\n\n  if (null !== f) {\n    A = e.baseState;\n    g = 0;\n    n = l = k = null;\n\n    do {\n      h = f.lane;\n      var p = f.eventTime;\n\n      if ((d & h) === h) {\n        null !== n && (n = n.next = {\n          eventTime: p,\n          lane: 0,\n          tag: f.tag,\n          payload: f.payload,\n          callback: f.callback,\n          next: null\n        });\n\n        a: {\n          var C = a,\n              x = f;\n          h = b;\n          p = c;\n\n          switch (x.tag) {\n            case 1:\n              C = x.payload;\n\n              if ("function" === typeof C) {\n                A = C.call(p, A, h);\n                break a;\n              }\n\n              A = C;\n              break a;\n\n            case 3:\n              C.flags = C.flags & -4097 | 64;\n\n            case 0:\n              C = x.payload;\n              h = "function" === typeof C ? C.call(p, A, h) : C;\n              if (null === h || void 0 === h) break a;\n              A = m({}, A, h);\n              break a;\n\n            case 2:\n              wg = !0;\n          }\n        }\n\n        null !== f.callback && (a.flags |= 32, h = e.effects, null === h ? e.effects = [f] : h.push(f));\n      } else p = {\n        eventTime: p,\n        lane: h,\n        tag: f.tag,\n        payload: f.payload,\n        callback: f.callback,\n        next: null\n      }, null === n ? (l = n = p, k = A) : n = n.next = p, g |= h;\n\n      f = f.next;\n      if (null === f) if (h = e.shared.pending, null === h) break;else f = h.next, h.next = null, e.lastBaseUpdate = h, e.shared.pending = null;\n    } while (1);\n\n    null === n && (k = A);\n    e.baseState = k;\n    e.firstBaseUpdate = l;\n    e.lastBaseUpdate = n;\n    Dg |= g;\n    a.lanes = g;\n    a.memoizedState = A;\n  }\n}\n\nfunction Eg(a, b, c) {\n  a = b.effects;\n  b.effects = null;\n  if (null !== a) for (b = 0; b < a.length; b++) {\n    var d = a[b],\n        e = d.callback;\n\n    if (null !== e) {\n      d.callback = null;\n      d = c;\n      if ("function" !== typeof e) throw Error(y(191, e));\n      e.call(d);\n    }\n  }\n}\n\nvar Fg = new aa.Component().refs;\n\nfunction Gg(a, b, c, d) {\n  b = a.memoizedState;\n  c = c(d, b);\n  c = null === c || void 0 === c ? b : m({}, b, c);\n  a.memoizedState = c;\n  0 === a.lanes && (a.updateQueue.baseState = c);\n}\n\nvar Kg = {\n  isMounted: function (a) {\n    return (a = a._reactInternals) ? Zb(a) === a : !1;\n  },\n  enqueueSetState: function (a, b, c) {\n    a = a._reactInternals;\n    var d = Hg(),\n        e = Ig(a),\n        f = zg(d, e);\n    f.payload = b;\n    void 0 !== c && null !== c && (f.callback = c);\n    Ag(a, f);\n    Jg(a, e, d);\n  },\n  enqueueReplaceState: function (a, b, c) {\n    a = a._reactInternals;\n    var d = Hg(),\n        e = Ig(a),\n        f = zg(d, e);\n    f.tag = 1;\n    f.payload = b;\n    void 0 !== c && null !== c && (f.callback = c);\n    Ag(a, f);\n    Jg(a, e, d);\n  },\n  enqueueForceUpdate: function (a, b) {\n    a = a._reactInternals;\n    var c = Hg(),\n        d = Ig(a),\n        e = zg(c, d);\n    e.tag = 2;\n    void 0 !== b && null !== b && (e.callback = b);\n    Ag(a, e);\n    Jg(a, d, c);\n  }\n};\n\nfunction Lg(a, b, c, d, e, f, g) {\n  a = a.stateNode;\n  return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Je(c, d) || !Je(e, f) : !0;\n}\n\nfunction Mg(a, b, c) {\n  var d = !1,\n      e = Cf;\n  var f = b.contextType;\n  "object" === typeof f && null !== f ? f = vg(f) : (e = Ff(b) ? Df : M.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Ef(a, e) : Cf);\n  b = new b(c, f);\n  a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;\n  b.updater = Kg;\n  a.stateNode = b;\n  b._reactInternals = a;\n  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);\n  return b;\n}\n\nfunction Ng(a, b, c, d) {\n  a = b.state;\n  "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);\n  "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);\n  b.state !== a && Kg.enqueueReplaceState(b, b.state, null);\n}\n\nfunction Og(a, b, c, d) {\n  var e = a.stateNode;\n  e.props = c;\n  e.state = a.memoizedState;\n  e.refs = Fg;\n  xg(a);\n  var f = b.contextType;\n  "object" === typeof f && null !== f ? e.context = vg(f) : (f = Ff(b) ? Df : M.current, e.context = Ef(a, f));\n  Cg(a, c, e, d);\n  e.state = a.memoizedState;\n  f = b.getDerivedStateFromProps;\n  "function" === typeof f && (Gg(a, b, f, c), e.state = a.memoizedState);\n  "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Kg.enqueueReplaceState(e, e.state, null), Cg(a, c, e, d), e.state = a.memoizedState);\n  "function" === typeof e.componentDidMount && (a.flags |= 4);\n}\n\nvar Pg = Array.isArray;\n\nfunction Qg(a, b, c) {\n  a = c.ref;\n\n  if (null !== a && "function" !== typeof a && "object" !== typeof a) {\n    if (c._owner) {\n      c = c._owner;\n\n      if (c) {\n        if (1 !== c.tag) throw Error(y(309));\n        var d = c.stateNode;\n      }\n\n      if (!d) throw Error(y(147, a));\n      var e = "" + a;\n      if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === e) return b.ref;\n\n      b = function (a) {\n        var b = d.refs;\n        b === Fg && (b = d.refs = {});\n        null === a ? delete b[e] : b[e] = a;\n      };\n\n      b._stringRef = e;\n      return b;\n    }\n\n    if ("string" !== typeof a) throw Error(y(284));\n    if (!c._owner) throw Error(y(290, a));\n  }\n\n  return a;\n}\n\nfunction Rg(a, b) {\n  if ("textarea" !== a.type) throw Error(y(31, "[object Object]" === Object.prototype.toString.call(b) ? "object with keys {" + Object.keys(b).join(", ") + "}" : b));\n}\n\nfunction Sg(a) {\n  function b(b, c) {\n    if (a) {\n      var d = b.lastEffect;\n      null !== d ? (d.nextEffect = c, b.lastEffect = c) : b.firstEffect = b.lastEffect = c;\n      c.nextEffect = null;\n      c.flags = 8;\n    }\n  }\n\n  function c(c, d) {\n    if (!a) return null;\n\n    for (; null !== d;) b(c, d), d = d.sibling;\n\n    return null;\n  }\n\n  function d(a, b) {\n    for (a = new Map(); null !== b;) null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;\n\n    return a;\n  }\n\n  function e(a, b) {\n    a = Tg(a, b);\n    a.index = 0;\n    a.sibling = null;\n    return a;\n  }\n\n  function f(b, c, d) {\n    b.index = d;\n    if (!a) return c;\n    d = b.alternate;\n    if (null !== d) return d = d.index, d < c ? (b.flags = 2, c) : d;\n    b.flags = 2;\n    return c;\n  }\n\n  function g(b) {\n    a && null === b.alternate && (b.flags = 2);\n    return b;\n  }\n\n  function h(a, b, c, d) {\n    if (null === b || 6 !== b.tag) return b = Ug(c, a.mode, d), b.return = a, b;\n    b = e(b, c);\n    b.return = a;\n    return b;\n  }\n\n  function k(a, b, c, d) {\n    if (null !== b && b.elementType === c.type) return d = e(b, c.props), d.ref = Qg(a, b, c), d.return = a, d;\n    d = Vg(c.type, c.key, c.props, null, a.mode, d);\n    d.ref = Qg(a, b, c);\n    d.return = a;\n    return d;\n  }\n\n  function l(a, b, c, d) {\n    if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = Wg(c, a.mode, d), b.return = a, b;\n    b = e(b, c.children || []);\n    b.return = a;\n    return b;\n  }\n\n  function n(a, b, c, d, f) {\n    if (null === b || 7 !== b.tag) return b = Xg(c, a.mode, d, f), b.return = a, b;\n    b = e(b, c);\n    b.return = a;\n    return b;\n  }\n\n  function A(a, b, c) {\n    if ("string" === typeof b || "number" === typeof b) return b = Ug("" + b, a.mode, c), b.return = a, b;\n\n    if ("object" === typeof b && null !== b) {\n      switch (b.$$typeof) {\n        case sa:\n          return c = Vg(b.type, b.key, b.props, null, a.mode, c), c.ref = Qg(a, null, b), c.return = a, c;\n\n        case ta:\n          return b = Wg(b, a.mode, c), b.return = a, b;\n      }\n\n      if (Pg(b) || La(b)) return b = Xg(b, a.mode, c, null), b.return = a, b;\n      Rg(a, b);\n    }\n\n    return null;\n  }\n\n  function p(a, b, c, d) {\n    var e = null !== b ? b.key : null;\n    if ("string" === typeof c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);\n\n    if ("object" === typeof c && null !== c) {\n      switch (c.$$typeof) {\n        case sa:\n          return c.key === e ? c.type === ua ? n(a, b, c.props.children, d, e) : k(a, b, c, d) : null;\n\n        case ta:\n          return c.key === e ? l(a, b, c, d) : null;\n      }\n\n      if (Pg(c) || La(c)) return null !== e ? null : n(a, b, c, d, null);\n      Rg(a, c);\n    }\n\n    return null;\n  }\n\n  function C(a, b, c, d, e) {\n    if ("string" === typeof d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);\n\n    if ("object" === typeof d && null !== d) {\n      switch (d.$$typeof) {\n        case sa:\n          return a = a.get(null === d.key ? c : d.key) || null, d.type === ua ? n(b, a, d.props.children, e, d.key) : k(b, a, d, e);\n\n        case ta:\n          return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);\n      }\n\n      if (Pg(d) || La(d)) return a = a.get(c) || null, n(b, a, d, e, null);\n      Rg(b, d);\n    }\n\n    return null;\n  }\n\n  function x(e, g, h, k) {\n    for (var l = null, t = null, u = g, z = g = 0, q = null; null !== u && z < h.length; z++) {\n      u.index > z ? (q = u, u = null) : q = u.sibling;\n      var n = p(e, u, h[z], k);\n\n      if (null === n) {\n        null === u && (u = q);\n        break;\n      }\n\n      a && u && null === n.alternate && b(e, u);\n      g = f(n, g, z);\n      null === t ? l = n : t.sibling = n;\n      t = n;\n      u = q;\n    }\n\n    if (z === h.length) return c(e, u), l;\n\n    if (null === u) {\n      for (; z < h.length; z++) u = A(e, h[z], k), null !== u && (g = f(u, g, z), null === t ? l = u : t.sibling = u, t = u);\n\n      return l;\n    }\n\n    for (u = d(e, u); z < h.length; z++) q = C(u, e, z, h[z], k), null !== q && (a && null !== q.alternate && u.delete(null === q.key ? z : q.key), g = f(q, g, z), null === t ? l = q : t.sibling = q, t = q);\n\n    a && u.forEach(function (a) {\n      return b(e, a);\n    });\n    return l;\n  }\n\n  function w(e, g, h, k) {\n    var l = La(h);\n    if ("function" !== typeof l) throw Error(y(150));\n    h = l.call(h);\n    if (null == h) throw Error(y(151));\n\n    for (var t = l = null, u = g, z = g = 0, q = null, n = h.next(); null !== u && !n.done; z++, n = h.next()) {\n      u.index > z ? (q = u, u = null) : q = u.sibling;\n      var w = p(e, u, n.value, k);\n\n      if (null === w) {\n        null === u && (u = q);\n        break;\n      }\n\n      a && u && null === w.alternate && b(e, u);\n      g = f(w, g, z);\n      null === t ? l = w : t.sibling = w;\n      t = w;\n      u = q;\n    }\n\n    if (n.done) return c(e, u), l;\n\n    if (null === u) {\n      for (; !n.done; z++, n = h.next()) n = A(e, n.value, k), null !== n && (g = f(n, g, z), null === t ? l = n : t.sibling = n, t = n);\n\n      return l;\n    }\n\n    for (u = d(e, u); !n.done; z++, n = h.next()) n = C(u, e, z, n.value, k), null !== n && (a && null !== n.alternate && u.delete(null === n.key ? z : n.key), g = f(n, g, z), null === t ? l = n : t.sibling = n, t = n);\n\n    a && u.forEach(function (a) {\n      return b(e, a);\n    });\n    return l;\n  }\n\n  return function (a, d, f, h) {\n    var k = "object" === typeof f && null !== f && f.type === ua && null === f.key;\n    k && (f = f.props.children);\n    var l = "object" === typeof f && null !== f;\n    if (l) switch (f.$$typeof) {\n      case sa:\n        a: {\n          l = f.key;\n\n          for (k = d; null !== k;) {\n            if (k.key === l) {\n              switch (k.tag) {\n                case 7:\n                  if (f.type === ua) {\n                    c(a, k.sibling);\n                    d = e(k, f.props.children);\n                    d.return = a;\n                    a = d;\n                    break a;\n                  }\n\n                  break;\n\n                default:\n                  if (k.elementType === f.type) {\n                    c(a, k.sibling);\n                    d = e(k, f.props);\n                    d.ref = Qg(a, k, f);\n                    d.return = a;\n                    a = d;\n                    break a;\n                  }\n\n              }\n\n              c(a, k);\n              break;\n            } else b(a, k);\n\n            k = k.sibling;\n          }\n\n          f.type === ua ? (d = Xg(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = Vg(f.type, f.key, f.props, null, a.mode, h), h.ref = Qg(a, d, f), h.return = a, a = h);\n        }\n\n        return g(a);\n\n      case ta:\n        a: {\n          for (k = f.key; null !== d;) {\n            if (d.key === k) {\n              if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {\n                c(a, d.sibling);\n                d = e(d, f.children || []);\n                d.return = a;\n                a = d;\n                break a;\n              } else {\n                c(a, d);\n                break;\n              }\n            } else b(a, d);\n            d = d.sibling;\n          }\n\n          d = Wg(f, a.mode, h);\n          d.return = a;\n          a = d;\n        }\n\n        return g(a);\n    }\n    if ("string" === typeof f || "number" === typeof f) return f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f), d.return = a, a = d) : (c(a, d), d = Ug(f, a.mode, h), d.return = a, a = d), g(a);\n    if (Pg(f)) return x(a, d, f, h);\n    if (La(f)) return w(a, d, f, h);\n    l && Rg(a, f);\n    if ("undefined" === typeof f && !k) switch (a.tag) {\n      case 1:\n      case 22:\n      case 0:\n      case 11:\n      case 15:\n        throw Error(y(152, Ra(a.type) || "Component"));\n    }\n    return c(a, d);\n  };\n}\n\nvar Yg = Sg(!0),\n    Zg = Sg(!1),\n    $g = {},\n    ah = Bf($g),\n    bh = Bf($g),\n    ch = Bf($g);\n\nfunction dh(a) {\n  if (a === $g) throw Error(y(174));\n  return a;\n}\n\nfunction eh(a, b) {\n  I(ch, b);\n  I(bh, a);\n  I(ah, $g);\n  a = b.nodeType;\n\n  switch (a) {\n    case 9:\n    case 11:\n      b = (b = b.documentElement) ? b.namespaceURI : mb(null, "");\n      break;\n\n    default:\n      a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = mb(b, a);\n  }\n\n  H(ah);\n  I(ah, b);\n}\n\nfunction fh() {\n  H(ah);\n  H(bh);\n  H(ch);\n}\n\nfunction gh(a) {\n  dh(ch.current);\n  var b = dh(ah.current);\n  var c = mb(b, a.type);\n  b !== c && (I(bh, a), I(ah, c));\n}\n\nfunction hh(a) {\n  bh.current === a && (H(ah), H(bh));\n}\n\nvar P = Bf(0);\n\nfunction ih(a) {\n  for (var b = a; null !== b;) {\n    if (13 === b.tag) {\n      var c = b.memoizedState;\n      if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;\n    } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {\n      if (0 !== (b.flags & 64)) return b;\n    } else if (null !== b.child) {\n      b.child.return = b;\n      b = b.child;\n      continue;\n    }\n\n    if (b === a) break;\n\n    for (; null === b.sibling;) {\n      if (null === b.return || b.return === a) return null;\n      b = b.return;\n    }\n\n    b.sibling.return = b.return;\n    b = b.sibling;\n  }\n\n  return null;\n}\n\nvar jh = null,\n    kh = null,\n    lh = !1;\n\nfunction mh(a, b) {\n  var c = nh(5, null, null, 0);\n  c.elementType = "DELETED";\n  c.type = "DELETED";\n  c.stateNode = b;\n  c.return = a;\n  c.flags = 8;\n  null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;\n}\n\nfunction oh(a, b) {\n  switch (a.tag) {\n    case 5:\n      var c = a.type;\n      b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;\n      return null !== b ? (a.stateNode = b, !0) : !1;\n\n    case 6:\n      return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, !0) : !1;\n\n    case 13:\n      return !1;\n\n    default:\n      return !1;\n  }\n}\n\nfunction ph(a) {\n  if (lh) {\n    var b = kh;\n\n    if (b) {\n      var c = b;\n\n      if (!oh(a, b)) {\n        b = rf(c.nextSibling);\n\n        if (!b || !oh(a, b)) {\n          a.flags = a.flags & -1025 | 2;\n          lh = !1;\n          jh = a;\n          return;\n        }\n\n        mh(jh, c);\n      }\n\n      jh = a;\n      kh = rf(b.firstChild);\n    } else a.flags = a.flags & -1025 | 2, lh = !1, jh = a;\n  }\n}\n\nfunction qh(a) {\n  for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;) a = a.return;\n\n  jh = a;\n}\n\nfunction rh(a) {\n  if (a !== jh) return !1;\n  if (!lh) return qh(a), lh = !0, !1;\n  var b = a.type;\n  if (5 !== a.tag || "head" !== b && "body" !== b && !nf(b, a.memoizedProps)) for (b = kh; b;) mh(a, b), b = rf(b.nextSibling);\n  qh(a);\n\n  if (13 === a.tag) {\n    a = a.memoizedState;\n    a = null !== a ? a.dehydrated : null;\n    if (!a) throw Error(y(317));\n\n    a: {\n      a = a.nextSibling;\n\n      for (b = 0; a;) {\n        if (8 === a.nodeType) {\n          var c = a.data;\n\n          if ("/$" === c) {\n            if (0 === b) {\n              kh = rf(a.nextSibling);\n              break a;\n            }\n\n            b--;\n          } else "$" !== c && "$!" !== c && "$?" !== c || b++;\n        }\n\n        a = a.nextSibling;\n      }\n\n      kh = null;\n    }\n  } else kh = jh ? rf(a.stateNode.nextSibling) : null;\n\n  return !0;\n}\n\nfunction sh() {\n  kh = jh = null;\n  lh = !1;\n}\n\nvar th = [];\n\nfunction uh() {\n  for (var a = 0; a < th.length; a++) th[a]._workInProgressVersionPrimary = null;\n\n  th.length = 0;\n}\n\nvar vh = ra.ReactCurrentDispatcher,\n    wh = ra.ReactCurrentBatchConfig,\n    xh = 0,\n    R = null,\n    S = null,\n    T = null,\n    yh = !1,\n    zh = !1;\n\nfunction Ah() {\n  throw Error(y(321));\n}\n\nfunction Bh(a, b) {\n  if (null === b) return !1;\n\n  for (var c = 0; c < b.length && c < a.length; c++) if (!He(a[c], b[c])) return !1;\n\n  return !0;\n}\n\nfunction Ch(a, b, c, d, e, f) {\n  xh = f;\n  R = b;\n  b.memoizedState = null;\n  b.updateQueue = null;\n  b.lanes = 0;\n  vh.current = null === a || null === a.memoizedState ? Dh : Eh;\n  a = c(d, e);\n\n  if (zh) {\n    f = 0;\n\n    do {\n      zh = !1;\n      if (!(25 > f)) throw Error(y(301));\n      f += 1;\n      T = S = null;\n      b.updateQueue = null;\n      vh.current = Fh;\n      a = c(d, e);\n    } while (zh);\n  }\n\n  vh.current = Gh;\n  b = null !== S && null !== S.next;\n  xh = 0;\n  T = S = R = null;\n  yh = !1;\n  if (b) throw Error(y(300));\n  return a;\n}\n\nfunction Hh() {\n  var a = {\n    memoizedState: null,\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n    next: null\n  };\n  null === T ? R.memoizedState = T = a : T = T.next = a;\n  return T;\n}\n\nfunction Ih() {\n  if (null === S) {\n    var a = R.alternate;\n    a = null !== a ? a.memoizedState : null;\n  } else a = S.next;\n\n  var b = null === T ? R.memoizedState : T.next;\n  if (null !== b) T = b, S = a;else {\n    if (null === a) throw Error(y(310));\n    S = a;\n    a = {\n      memoizedState: S.memoizedState,\n      baseState: S.baseState,\n      baseQueue: S.baseQueue,\n      queue: S.queue,\n      next: null\n    };\n    null === T ? R.memoizedState = T = a : T = T.next = a;\n  }\n  return T;\n}\n\nfunction Jh(a, b) {\n  return "function" === typeof b ? b(a) : b;\n}\n\nfunction Kh(a) {\n  var b = Ih(),\n      c = b.queue;\n  if (null === c) throw Error(y(311));\n  c.lastRenderedReducer = a;\n  var d = S,\n      e = d.baseQueue,\n      f = c.pending;\n\n  if (null !== f) {\n    if (null !== e) {\n      var g = e.next;\n      e.next = f.next;\n      f.next = g;\n    }\n\n    d.baseQueue = e = f;\n    c.pending = null;\n  }\n\n  if (null !== e) {\n    e = e.next;\n    d = d.baseState;\n    var h = g = f = null,\n        k = e;\n\n    do {\n      var l = k.lane;\n      if ((xh & l) === l) null !== h && (h = h.next = {\n        lane: 0,\n        action: k.action,\n        eagerReducer: k.eagerReducer,\n        eagerState: k.eagerState,\n        next: null\n      }), d = k.eagerReducer === a ? k.eagerState : a(d, k.action);else {\n        var n = {\n          lane: l,\n          action: k.action,\n          eagerReducer: k.eagerReducer,\n          eagerState: k.eagerState,\n          next: null\n        };\n        null === h ? (g = h = n, f = d) : h = h.next = n;\n        R.lanes |= l;\n        Dg |= l;\n      }\n      k = k.next;\n    } while (null !== k && k !== e);\n\n    null === h ? f = d : h.next = g;\n    He(d, b.memoizedState) || (ug = !0);\n    b.memoizedState = d;\n    b.baseState = f;\n    b.baseQueue = h;\n    c.lastRenderedState = d;\n  }\n\n  return [b.memoizedState, c.dispatch];\n}\n\nfunction Lh(a) {\n  var b = Ih(),\n      c = b.queue;\n  if (null === c) throw Error(y(311));\n  c.lastRenderedReducer = a;\n  var d = c.dispatch,\n      e = c.pending,\n      f = b.memoizedState;\n\n  if (null !== e) {\n    c.pending = null;\n    var g = e = e.next;\n\n    do f = a(f, g.action), g = g.next; while (g !== e);\n\n    He(f, b.memoizedState) || (ug = !0);\n    b.memoizedState = f;\n    null === b.baseQueue && (b.baseState = f);\n    c.lastRenderedState = f;\n  }\n\n  return [f, d];\n}\n\nfunction Mh(a, b, c) {\n  var d = b._getVersion;\n  d = d(b._source);\n  var e = b._workInProgressVersionPrimary;\n  if (null !== e) a = e === d;else if (a = a.mutableReadLanes, a = (xh & a) === a) b._workInProgressVersionPrimary = d, th.push(b);\n  if (a) return c(b._source);\n  th.push(b);\n  throw Error(y(350));\n}\n\nfunction Nh(a, b, c, d) {\n  var e = U;\n  if (null === e) throw Error(y(349));\n  var f = b._getVersion,\n      g = f(b._source),\n      h = vh.current,\n      k = h.useState(function () {\n    return Mh(e, b, c);\n  }),\n      l = k[1],\n      n = k[0];\n  k = T;\n  var A = a.memoizedState,\n      p = A.refs,\n      C = p.getSnapshot,\n      x = A.source;\n  A = A.subscribe;\n  var w = R;\n  a.memoizedState = {\n    refs: p,\n    source: b,\n    subscribe: d\n  };\n  h.useEffect(function () {\n    p.getSnapshot = c;\n    p.setSnapshot = l;\n    var a = f(b._source);\n\n    if (!He(g, a)) {\n      a = c(b._source);\n      He(n, a) || (l(a), a = Ig(w), e.mutableReadLanes |= a & e.pendingLanes);\n      a = e.mutableReadLanes;\n      e.entangledLanes |= a;\n\n      for (var d = e.entanglements, h = a; 0 < h;) {\n        var k = 31 - Vc(h),\n            v = 1 << k;\n        d[k] |= a;\n        h &= ~v;\n      }\n    }\n  }, [c, b, d]);\n  h.useEffect(function () {\n    return d(b._source, function () {\n      var a = p.getSnapshot,\n          c = p.setSnapshot;\n\n      try {\n        c(a(b._source));\n        var d = Ig(w);\n        e.mutableReadLanes |= d & e.pendingLanes;\n      } catch (q) {\n        c(function () {\n          throw q;\n        });\n      }\n    });\n  }, [b, d]);\n  He(C, c) && He(x, b) && He(A, d) || (a = {\n    pending: null,\n    dispatch: null,\n    lastRenderedReducer: Jh,\n    lastRenderedState: n\n  }, a.dispatch = l = Oh.bind(null, R, a), k.queue = a, k.baseQueue = null, n = Mh(e, b, c), k.memoizedState = k.baseState = n);\n  return n;\n}\n\nfunction Ph(a, b, c) {\n  var d = Ih();\n  return Nh(d, a, b, c);\n}\n\nfunction Qh(a) {\n  var b = Hh();\n  "function" === typeof a && (a = a());\n  b.memoizedState = b.baseState = a;\n  a = b.queue = {\n    pending: null,\n    dispatch: null,\n    lastRenderedReducer: Jh,\n    lastRenderedState: a\n  };\n  a = a.dispatch = Oh.bind(null, R, a);\n  return [b.memoizedState, a];\n}\n\nfunction Rh(a, b, c, d) {\n  a = {\n    tag: a,\n    create: b,\n    destroy: c,\n    deps: d,\n    next: null\n  };\n  b = R.updateQueue;\n  null === b ? (b = {\n    lastEffect: null\n  }, R.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));\n  return a;\n}\n\nfunction Sh(a) {\n  var b = Hh();\n  a = {\n    current: a\n  };\n  return b.memoizedState = a;\n}\n\nfunction Th() {\n  return Ih().memoizedState;\n}\n\nfunction Uh(a, b, c, d) {\n  var e = Hh();\n  R.flags |= a;\n  e.memoizedState = Rh(1 | b, c, void 0, void 0 === d ? null : d);\n}\n\nfunction Vh(a, b, c, d) {\n  var e = Ih();\n  d = void 0 === d ? null : d;\n  var f = void 0;\n\n  if (null !== S) {\n    var g = S.memoizedState;\n    f = g.destroy;\n\n    if (null !== d && Bh(d, g.deps)) {\n      Rh(b, c, f, d);\n      return;\n    }\n  }\n\n  R.flags |= a;\n  e.memoizedState = Rh(1 | b, c, f, d);\n}\n\nfunction Wh(a, b) {\n  return Uh(516, 4, a, b);\n}\n\nfunction Xh(a, b) {\n  return Vh(516, 4, a, b);\n}\n\nfunction Yh(a, b) {\n  return Vh(4, 2, a, b);\n}\n\nfunction Zh(a, b) {\n  if ("function" === typeof b) return a = a(), b(a), function () {\n    b(null);\n  };\n  if (null !== b && void 0 !== b) return a = a(), b.current = a, function () {\n    b.current = null;\n  };\n}\n\nfunction $h(a, b, c) {\n  c = null !== c && void 0 !== c ? c.concat([a]) : null;\n  return Vh(4, 2, Zh.bind(null, b, a), c);\n}\n\nfunction ai() {}\n\nfunction bi(a, b) {\n  var c = Ih();\n  b = void 0 === b ? null : b;\n  var d = c.memoizedState;\n  if (null !== d && null !== b && Bh(b, d[1])) return d[0];\n  c.memoizedState = [a, b];\n  return a;\n}\n\nfunction ci(a, b) {\n  var c = Ih();\n  b = void 0 === b ? null : b;\n  var d = c.memoizedState;\n  if (null !== d && null !== b && Bh(b, d[1])) return d[0];\n  a = a();\n  c.memoizedState = [a, b];\n  return a;\n}\n\nfunction di(a, b) {\n  var c = eg();\n  gg(98 > c ? 98 : c, function () {\n    a(!0);\n  });\n  gg(97 < c ? 97 : c, function () {\n    var c = wh.transition;\n    wh.transition = 1;\n\n    try {\n      a(!1), b();\n    } finally {\n      wh.transition = c;\n    }\n  });\n}\n\nfunction Oh(a, b, c) {\n  var d = Hg(),\n      e = Ig(a),\n      f = {\n    lane: e,\n    action: c,\n    eagerReducer: null,\n    eagerState: null,\n    next: null\n  },\n      g = b.pending;\n  null === g ? f.next = f : (f.next = g.next, g.next = f);\n  b.pending = f;\n  g = a.alternate;\n  if (a === R || null !== g && g === R) zh = yh = !0;else {\n    if (0 === a.lanes && (null === g || 0 === g.lanes) && (g = b.lastRenderedReducer, null !== g)) try {\n      var h = b.lastRenderedState,\n          k = g(h, c);\n      f.eagerReducer = g;\n      f.eagerState = k;\n      if (He(k, h)) return;\n    } catch (l) {} finally {}\n    Jg(a, e, d);\n  }\n}\n\nvar Gh = {\n  readContext: vg,\n  useCallback: Ah,\n  useContext: Ah,\n  useEffect: Ah,\n  useImperativeHandle: Ah,\n  useLayoutEffect: Ah,\n  useMemo: Ah,\n  useReducer: Ah,\n  useRef: Ah,\n  useState: Ah,\n  useDebugValue: Ah,\n  useDeferredValue: Ah,\n  useTransition: Ah,\n  useMutableSource: Ah,\n  useOpaqueIdentifier: Ah,\n  unstable_isNewReconciler: !1\n},\n    Dh = {\n  readContext: vg,\n  useCallback: function (a, b) {\n    Hh().memoizedState = [a, void 0 === b ? null : b];\n    return a;\n  },\n  useContext: vg,\n  useEffect: Wh,\n  useImperativeHandle: function (a, b, c) {\n    c = null !== c && void 0 !== c ? c.concat([a]) : null;\n    return Uh(4, 2, Zh.bind(null, b, a), c);\n  },\n  useLayoutEffect: function (a, b) {\n    return Uh(4, 2, a, b);\n  },\n  useMemo: function (a, b) {\n    var c = Hh();\n    b = void 0 === b ? null : b;\n    a = a();\n    c.memoizedState = [a, b];\n    return a;\n  },\n  useReducer: function (a, b, c) {\n    var d = Hh();\n    b = void 0 !== c ? c(b) : b;\n    d.memoizedState = d.baseState = b;\n    a = d.queue = {\n      pending: null,\n      dispatch: null,\n      lastRenderedReducer: a,\n      lastRenderedState: b\n    };\n    a = a.dispatch = Oh.bind(null, R, a);\n    return [d.memoizedState, a];\n  },\n  useRef: Sh,\n  useState: Qh,\n  useDebugValue: ai,\n  useDeferredValue: function (a) {\n    var b = Qh(a),\n        c = b[0],\n        d = b[1];\n    Wh(function () {\n      var b = wh.transition;\n      wh.transition = 1;\n\n      try {\n        d(a);\n      } finally {\n        wh.transition = b;\n      }\n    }, [a]);\n    return c;\n  },\n  useTransition: function () {\n    var a = Qh(!1),\n        b = a[0];\n    a = di.bind(null, a[1]);\n    Sh(a);\n    return [a, b];\n  },\n  useMutableSource: function (a, b, c) {\n    var d = Hh();\n    d.memoizedState = {\n      refs: {\n        getSnapshot: b,\n        setSnapshot: null\n      },\n      source: a,\n      subscribe: c\n    };\n    return Nh(d, a, b, c);\n  },\n  useOpaqueIdentifier: function () {\n    if (lh) {\n      var a = !1,\n          b = uf(function () {\n        a || (a = !0, c("r:" + (tf++).toString(36)));\n        throw Error(y(355));\n      }),\n          c = Qh(b)[1];\n      0 === (R.mode & 2) && (R.flags |= 516, Rh(5, function () {\n        c("r:" + (tf++).toString(36));\n      }, void 0, null));\n      return b;\n    }\n\n    b = "r:" + (tf++).toString(36);\n    Qh(b);\n    return b;\n  },\n  unstable_isNewReconciler: !1\n},\n    Eh = {\n  readContext: vg,\n  useCallback: bi,\n  useContext: vg,\n  useEffect: Xh,\n  useImperativeHandle: $h,\n  useLayoutEffect: Yh,\n  useMemo: ci,\n  useReducer: Kh,\n  useRef: Th,\n  useState: function () {\n    return Kh(Jh);\n  },\n  useDebugValue: ai,\n  useDeferredValue: function (a) {\n    var b = Kh(Jh),\n        c = b[0],\n        d = b[1];\n    Xh(function () {\n      var b = wh.transition;\n      wh.transition = 1;\n\n      try {\n        d(a);\n      } finally {\n        wh.transition = b;\n      }\n    }, [a]);\n    return c;\n  },\n  useTransition: function () {\n    var a = Kh(Jh)[0];\n    return [Th().current, a];\n  },\n  useMutableSource: Ph,\n  useOpaqueIdentifier: function () {\n    return Kh(Jh)[0];\n  },\n  unstable_isNewReconciler: !1\n},\n    Fh = {\n  readContext: vg,\n  useCallback: bi,\n  useContext: vg,\n  useEffect: Xh,\n  useImperativeHandle: $h,\n  useLayoutEffect: Yh,\n  useMemo: ci,\n  useReducer: Lh,\n  useRef: Th,\n  useState: function () {\n    return Lh(Jh);\n  },\n  useDebugValue: ai,\n  useDeferredValue: function (a) {\n    var b = Lh(Jh),\n        c = b[0],\n        d = b[1];\n    Xh(function () {\n      var b = wh.transition;\n      wh.transition = 1;\n\n      try {\n        d(a);\n      } finally {\n        wh.transition = b;\n      }\n    }, [a]);\n    return c;\n  },\n  useTransition: function () {\n    var a = Lh(Jh)[0];\n    return [Th().current, a];\n  },\n  useMutableSource: Ph,\n  useOpaqueIdentifier: function () {\n    return Lh(Jh)[0];\n  },\n  unstable_isNewReconciler: !1\n},\n    ei = ra.ReactCurrentOwner,\n    ug = !1;\n\nfunction fi(a, b, c, d) {\n  b.child = null === a ? Zg(b, null, c, d) : Yg(b, a.child, c, d);\n}\n\nfunction gi(a, b, c, d, e) {\n  c = c.render;\n  var f = b.ref;\n  tg(b, e);\n  d = Ch(a, b, c, d, f, e);\n  if (null !== a && !ug) return b.updateQueue = a.updateQueue, b.flags &= -517, a.lanes &= ~e, hi(a, b, e);\n  b.flags |= 1;\n  fi(a, b, d, e);\n  return b.child;\n}\n\nfunction ii(a, b, c, d, e, f) {\n  if (null === a) {\n    var g = c.type;\n    if ("function" === typeof g && !ji(g) && void 0 === g.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = g, ki(a, b, g, d, e, f);\n    a = Vg(c.type, null, d, b, b.mode, f);\n    a.ref = b.ref;\n    a.return = b;\n    return b.child = a;\n  }\n\n  g = a.child;\n  if (0 === (e & f) && (e = g.memoizedProps, c = c.compare, c = null !== c ? c : Je, c(e, d) && a.ref === b.ref)) return hi(a, b, f);\n  b.flags |= 1;\n  a = Tg(g, d);\n  a.ref = b.ref;\n  a.return = b;\n  return b.child = a;\n}\n\nfunction ki(a, b, c, d, e, f) {\n  if (null !== a && Je(a.memoizedProps, d) && a.ref === b.ref) if (ug = !1, 0 !== (f & e)) 0 !== (a.flags & 16384) && (ug = !0);else return b.lanes = a.lanes, hi(a, b, f);\n  return li(a, b, c, d, f);\n}\n\nfunction mi(a, b, c) {\n  var d = b.pendingProps,\n      e = d.children,\n      f = null !== a ? a.memoizedState : null;\n  if ("hidden" === d.mode || "unstable-defer-without-hiding" === d.mode) {\n    if (0 === (b.mode & 4)) b.memoizedState = {\n      baseLanes: 0\n    }, ni(b, c);else if (0 !== (c & 1073741824)) b.memoizedState = {\n      baseLanes: 0\n    }, ni(b, null !== f ? f.baseLanes : c);else return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = {\n      baseLanes: a\n    }, ni(b, a), null;\n  } else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, ni(b, d);\n  fi(a, b, e, c);\n  return b.child;\n}\n\nfunction oi(a, b) {\n  var c = b.ref;\n  if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 128;\n}\n\nfunction li(a, b, c, d, e) {\n  var f = Ff(c) ? Df : M.current;\n  f = Ef(b, f);\n  tg(b, e);\n  c = Ch(a, b, c, d, f, e);\n  if (null !== a && !ug) return b.updateQueue = a.updateQueue, b.flags &= -517, a.lanes &= ~e, hi(a, b, e);\n  b.flags |= 1;\n  fi(a, b, c, e);\n  return b.child;\n}\n\nfunction pi(a, b, c, d, e) {\n  if (Ff(c)) {\n    var f = !0;\n    Jf(b);\n  } else f = !1;\n\n  tg(b, e);\n  if (null === b.stateNode) null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2), Mg(b, c, d), Og(b, c, d, e), d = !0;else if (null === a) {\n    var g = b.stateNode,\n        h = b.memoizedProps;\n    g.props = h;\n    var k = g.context,\n        l = c.contextType;\n    "object" === typeof l && null !== l ? l = vg(l) : (l = Ff(c) ? Df : M.current, l = Ef(b, l));\n    var n = c.getDerivedStateFromProps,\n        A = "function" === typeof n || "function" === typeof g.getSnapshotBeforeUpdate;\n    A || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Ng(b, g, d, l);\n    wg = !1;\n    var p = b.memoizedState;\n    g.state = p;\n    Cg(b, d, g, e);\n    k = b.memoizedState;\n    h !== d || p !== k || N.current || wg ? ("function" === typeof n && (Gg(b, c, n, d), k = b.memoizedState), (h = wg || Lg(b, c, h, d, p, k, l)) ? (A || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4)) : ("function" === typeof g.componentDidMount && (b.flags |= 4), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4), d = !1);\n  } else {\n    g = b.stateNode;\n    yg(a, b);\n    h = b.memoizedProps;\n    l = b.type === b.elementType ? h : lg(b.type, h);\n    g.props = l;\n    A = b.pendingProps;\n    p = g.context;\n    k = c.contextType;\n    "object" === typeof k && null !== k ? k = vg(k) : (k = Ff(c) ? Df : M.current, k = Ef(b, k));\n    var C = c.getDerivedStateFromProps;\n    (n = "function" === typeof C || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== A || p !== k) && Ng(b, g, d, k);\n    wg = !1;\n    p = b.memoizedState;\n    g.state = p;\n    Cg(b, d, g, e);\n    var x = b.memoizedState;\n    h !== A || p !== x || N.current || wg ? ("function" === typeof C && (Gg(b, c, C, d), x = b.memoizedState), (l = wg || Lg(b, c, l, d, p, x, k)) ? (n || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, x, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, x, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 256)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 256), b.memoizedProps = d, b.memoizedState = x), g.props = d, g.state = x, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 256), d = !1);\n  }\n  return qi(a, b, c, d, f, e);\n}\n\nfunction qi(a, b, c, d, e, f) {\n  oi(a, b);\n  var g = 0 !== (b.flags & 64);\n  if (!d && !g) return e && Kf(b, c, !1), hi(a, b, f);\n  d = b.stateNode;\n  ei.current = b;\n  var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();\n  b.flags |= 1;\n  null !== a && g ? (b.child = Yg(b, a.child, null, f), b.child = Yg(b, null, h, f)) : fi(a, b, h, f);\n  b.memoizedState = d.state;\n  e && Kf(b, c, !0);\n  return b.child;\n}\n\nfunction ri(a) {\n  var b = a.stateNode;\n  b.pendingContext ? Hf(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Hf(a, b.context, !1);\n  eh(a, b.containerInfo);\n}\n\nvar si = {\n  dehydrated: null,\n  retryLane: 0\n};\n\nfunction ti(a, b, c) {\n  var d = b.pendingProps,\n      e = P.current,\n      f = !1,\n      g;\n  (g = 0 !== (b.flags & 64)) || (g = null !== a && null === a.memoizedState ? !1 : 0 !== (e & 2));\n  g ? (f = !0, b.flags &= -65) : null !== a && null === a.memoizedState || void 0 === d.fallback || !0 === d.unstable_avoidThisFallback || (e |= 1);\n  I(P, e & 1);\n\n  if (null === a) {\n    void 0 !== d.fallback && ph(b);\n    a = d.children;\n    e = d.fallback;\n    if (f) return a = ui(b, a, e, c), b.child.memoizedState = {\n      baseLanes: c\n    }, b.memoizedState = si, a;\n    if ("number" === typeof d.unstable_expectedLoadTime) return a = ui(b, a, e, c), b.child.memoizedState = {\n      baseLanes: c\n    }, b.memoizedState = si, b.lanes = 33554432, a;\n    c = vi({\n      mode: "visible",\n      children: a\n    }, b.mode, c, null);\n    c.return = b;\n    return b.child = c;\n  }\n\n  if (null !== a.memoizedState) {\n    if (f) return d = wi(a, b, d.children, d.fallback, c), f = b.child, e = a.child.memoizedState, f.memoizedState = null === e ? {\n      baseLanes: c\n    } : {\n      baseLanes: e.baseLanes | c\n    }, f.childLanes = a.childLanes & ~c, b.memoizedState = si, d;\n    c = xi(a, b, d.children, c);\n    b.memoizedState = null;\n    return c;\n  }\n\n  if (f) return d = wi(a, b, d.children, d.fallback, c), f = b.child, e = a.child.memoizedState, f.memoizedState = null === e ? {\n    baseLanes: c\n  } : {\n    baseLanes: e.baseLanes | c\n  }, f.childLanes = a.childLanes & ~c, b.memoizedState = si, d;\n  c = xi(a, b, d.children, c);\n  b.memoizedState = null;\n  return c;\n}\n\nfunction ui(a, b, c, d) {\n  var e = a.mode,\n      f = a.child;\n  b = {\n    mode: "hidden",\n    children: b\n  };\n  0 === (e & 2) && null !== f ? (f.childLanes = 0, f.pendingProps = b) : f = vi(b, e, 0, null);\n  c = Xg(c, e, d, null);\n  f.return = a;\n  c.return = a;\n  f.sibling = c;\n  a.child = f;\n  return c;\n}\n\nfunction xi(a, b, c, d) {\n  var e = a.child;\n  a = e.sibling;\n  c = Tg(e, {\n    mode: "visible",\n    children: c\n  });\n  0 === (b.mode & 2) && (c.lanes = d);\n  c.return = b;\n  c.sibling = null;\n  null !== a && (a.nextEffect = null, a.flags = 8, b.firstEffect = b.lastEffect = a);\n  return b.child = c;\n}\n\nfunction wi(a, b, c, d, e) {\n  var f = b.mode,\n      g = a.child;\n  a = g.sibling;\n  var h = {\n    mode: "hidden",\n    children: c\n  };\n  0 === (f & 2) && b.child !== g ? (c = b.child, c.childLanes = 0, c.pendingProps = h, g = c.lastEffect, null !== g ? (b.firstEffect = c.firstEffect, b.lastEffect = g, g.nextEffect = null) : b.firstEffect = b.lastEffect = null) : c = Tg(g, h);\n  null !== a ? d = Tg(a, d) : (d = Xg(d, f, e, null), d.flags |= 2);\n  d.return = b;\n  c.return = b;\n  c.sibling = d;\n  b.child = c;\n  return d;\n}\n\nfunction yi(a, b) {\n  a.lanes |= b;\n  var c = a.alternate;\n  null !== c && (c.lanes |= b);\n  sg(a.return, b);\n}\n\nfunction zi(a, b, c, d, e, f) {\n  var g = a.memoizedState;\n  null === g ? a.memoizedState = {\n    isBackwards: b,\n    rendering: null,\n    renderingStartTime: 0,\n    last: d,\n    tail: c,\n    tailMode: e,\n    lastEffect: f\n  } : (g.isBackwards = b, g.rendering = null, g.renderingStartTime = 0, g.last = d, g.tail = c, g.tailMode = e, g.lastEffect = f);\n}\n\nfunction Ai(a, b, c) {\n  var d = b.pendingProps,\n      e = d.revealOrder,\n      f = d.tail;\n  fi(a, b, d.children, c);\n  d = P.current;\n  if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 64;else {\n    if (null !== a && 0 !== (a.flags & 64)) a: for (a = b.child; null !== a;) {\n      if (13 === a.tag) null !== a.memoizedState && yi(a, c);else if (19 === a.tag) yi(a, c);else if (null !== a.child) {\n        a.child.return = a;\n        a = a.child;\n        continue;\n      }\n      if (a === b) break a;\n\n      for (; null === a.sibling;) {\n        if (null === a.return || a.return === b) break a;\n        a = a.return;\n      }\n\n      a.sibling.return = a.return;\n      a = a.sibling;\n    }\n    d &= 1;\n  }\n  I(P, d);\n  if (0 === (b.mode & 2)) b.memoizedState = null;else switch (e) {\n    case "forwards":\n      c = b.child;\n\n      for (e = null; null !== c;) a = c.alternate, null !== a && null === ih(a) && (e = c), c = c.sibling;\n\n      c = e;\n      null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);\n      zi(b, !1, e, c, f, b.lastEffect);\n      break;\n\n    case "backwards":\n      c = null;\n      e = b.child;\n\n      for (b.child = null; null !== e;) {\n        a = e.alternate;\n\n        if (null !== a && null === ih(a)) {\n          b.child = e;\n          break;\n        }\n\n        a = e.sibling;\n        e.sibling = c;\n        c = e;\n        e = a;\n      }\n\n      zi(b, !0, c, null, f, b.lastEffect);\n      break;\n\n    case "together":\n      zi(b, !1, null, null, void 0, b.lastEffect);\n      break;\n\n    default:\n      b.memoizedState = null;\n  }\n  return b.child;\n}\n\nfunction hi(a, b, c) {\n  null !== a && (b.dependencies = a.dependencies);\n  Dg |= b.lanes;\n\n  if (0 !== (c & b.childLanes)) {\n    if (null !== a && b.child !== a.child) throw Error(y(153));\n\n    if (null !== b.child) {\n      a = b.child;\n      c = Tg(a, a.pendingProps);\n      b.child = c;\n\n      for (c.return = b; null !== a.sibling;) a = a.sibling, c = c.sibling = Tg(a, a.pendingProps), c.return = b;\n\n      c.sibling = null;\n    }\n\n    return b.child;\n  }\n\n  return null;\n}\n\nvar Bi, Ci, Di, Ei;\n\nBi = function (a, b) {\n  for (var c = b.child; null !== c;) {\n    if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);else if (4 !== c.tag && null !== c.child) {\n      c.child.return = c;\n      c = c.child;\n      continue;\n    }\n    if (c === b) break;\n\n    for (; null === c.sibling;) {\n      if (null === c.return || c.return === b) return;\n      c = c.return;\n    }\n\n    c.sibling.return = c.return;\n    c = c.sibling;\n  }\n};\n\nCi = function () {};\n\nDi = function (a, b, c, d) {\n  var e = a.memoizedProps;\n\n  if (e !== d) {\n    a = b.stateNode;\n    dh(ah.current);\n    var f = null;\n\n    switch (c) {\n      case "input":\n        e = Ya(a, e);\n        d = Ya(a, d);\n        f = [];\n        break;\n\n      case "option":\n        e = eb(a, e);\n        d = eb(a, d);\n        f = [];\n        break;\n\n      case "select":\n        e = m({}, e, {\n          value: void 0\n        });\n        d = m({}, d, {\n          value: void 0\n        });\n        f = [];\n        break;\n\n      case "textarea":\n        e = gb(a, e);\n        d = gb(a, d);\n        f = [];\n        break;\n\n      default:\n        "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = jf);\n    }\n\n    vb(c, d);\n    var g;\n    c = null;\n\n    for (l in e) if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) if ("style" === l) {\n      var h = e[l];\n\n      for (g in h) h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");\n    } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ca.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));\n\n    for (l in d) {\n      var k = d[l];\n      h = null != e ? e[l] : void 0;\n      if (d.hasOwnProperty(l) && k !== h && (null != k || null != h)) if ("style" === l) {\n        if (h) {\n          for (g in h) !h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");\n\n          for (g in k) k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);\n        } else c || (f || (f = []), f.push(l, c)), c = k;\n      } else "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" !== typeof k && "number" !== typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && (ca.hasOwnProperty(l) ? (null != k && "onScroll" === l && G("scroll", a), f || h === k || (f = [])) : "object" === typeof k && null !== k && k.$$typeof === Ga ? k.toString() : (f = f || []).push(l, k));\n    }\n\n    c && (f = f || []).push("style", c);\n    var l = f;\n    if (b.updateQueue = l) b.flags |= 4;\n  }\n};\n\nEi = function (a, b, c, d) {\n  c !== d && (b.flags |= 4);\n};\n\nfunction Fi(a, b) {\n  if (!lh) switch (a.tailMode) {\n    case "hidden":\n      b = a.tail;\n\n      for (var c = null; null !== b;) null !== b.alternate && (c = b), b = b.sibling;\n\n      null === c ? a.tail = null : c.sibling = null;\n      break;\n\n    case "collapsed":\n      c = a.tail;\n\n      for (var d = null; null !== c;) null !== c.alternate && (d = c), c = c.sibling;\n\n      null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;\n  }\n}\n\nfunction Gi(a, b, c) {\n  var d = b.pendingProps;\n\n  switch (b.tag) {\n    case 2:\n    case 16:\n    case 15:\n    case 0:\n    case 11:\n    case 7:\n    case 8:\n    case 12:\n    case 9:\n    case 14:\n      return null;\n\n    case 1:\n      return Ff(b.type) && Gf(), null;\n\n    case 3:\n      fh();\n      H(N);\n      H(M);\n      uh();\n      d = b.stateNode;\n      d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);\n      if (null === a || null === a.child) rh(b) ? b.flags |= 4 : d.hydrate || (b.flags |= 256);\n      Ci(b);\n      return null;\n\n    case 5:\n      hh(b);\n      var e = dh(ch.current);\n      c = b.type;\n      if (null !== a && null != b.stateNode) Di(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 128);else {\n        if (!d) {\n          if (null === b.stateNode) throw Error(y(166));\n          return null;\n        }\n\n        a = dh(ah.current);\n\n        if (rh(b)) {\n          d = b.stateNode;\n          c = b.type;\n          var f = b.memoizedProps;\n          d[wf] = b;\n          d[xf] = f;\n\n          switch (c) {\n            case "dialog":\n              G("cancel", d);\n              G("close", d);\n              break;\n\n            case "iframe":\n            case "object":\n            case "embed":\n              G("load", d);\n              break;\n\n            case "video":\n            case "audio":\n              for (a = 0; a < Xe.length; a++) G(Xe[a], d);\n\n              break;\n\n            case "source":\n              G("error", d);\n              break;\n\n            case "img":\n            case "image":\n            case "link":\n              G("error", d);\n              G("load", d);\n              break;\n\n            case "details":\n              G("toggle", d);\n              break;\n\n            case "input":\n              Za(d, f);\n              G("invalid", d);\n              break;\n\n            case "select":\n              d._wrapperState = {\n                wasMultiple: !!f.multiple\n              };\n              G("invalid", d);\n              break;\n\n            case "textarea":\n              hb(d, f), G("invalid", d);\n          }\n\n          vb(c, f);\n          a = null;\n\n          for (var g in f) f.hasOwnProperty(g) && (e = f[g], "children" === g ? "string" === typeof e ? d.textContent !== e && (a = ["children", e]) : "number" === typeof e && d.textContent !== "" + e && (a = ["children", "" + e]) : ca.hasOwnProperty(g) && null != e && "onScroll" === g && G("scroll", d));\n\n          switch (c) {\n            case "input":\n              Va(d);\n              cb(d, f, !0);\n              break;\n\n            case "textarea":\n              Va(d);\n              jb(d);\n              break;\n\n            case "select":\n            case "option":\n              break;\n\n            default:\n              "function" === typeof f.onClick && (d.onclick = jf);\n          }\n\n          d = a;\n          b.updateQueue = d;\n          null !== d && (b.flags |= 4);\n        } else {\n          g = 9 === e.nodeType ? e : e.ownerDocument;\n          a === kb.html && (a = lb(c));\n          a === kb.html ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script>\\x3c/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, {\n            is: d.is\n          }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = !0 : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);\n          a[wf] = b;\n          a[xf] = d;\n          Bi(a, b, !1, !1);\n          b.stateNode = a;\n          g = wb(c, d);\n\n          switch (c) {\n            case "dialog":\n              G("cancel", a);\n              G("close", a);\n              e = d;\n              break;\n\n            case "iframe":\n            case "object":\n            case "embed":\n              G("load", a);\n              e = d;\n              break;\n\n            case "video":\n            case "audio":\n              for (e = 0; e < Xe.length; e++) G(Xe[e], a);\n\n              e = d;\n              break;\n\n            case "source":\n              G("error", a);\n              e = d;\n              break;\n\n            case "img":\n            case "image":\n            case "link":\n              G("error", a);\n              G("load", a);\n              e = d;\n              break;\n\n            case "details":\n              G("toggle", a);\n              e = d;\n              break;\n\n            case "input":\n              Za(a, d);\n              e = Ya(a, d);\n              G("invalid", a);\n              break;\n\n            case "option":\n              e = eb(a, d);\n              break;\n\n            case "select":\n              a._wrapperState = {\n                wasMultiple: !!d.multiple\n              };\n              e = m({}, d, {\n                value: void 0\n              });\n              G("invalid", a);\n              break;\n\n            case "textarea":\n              hb(a, d);\n              e = gb(a, d);\n              G("invalid", a);\n              break;\n\n            default:\n              e = d;\n          }\n\n          vb(c, e);\n          var h = e;\n\n          for (f in h) if (h.hasOwnProperty(f)) {\n            var k = h[f];\n            "style" === f ? tb(a, k) : "dangerouslySetInnerHTML" === f ? (k = k ? k.__html : void 0, null != k && ob(a, k)) : "children" === f ? "string" === typeof k ? ("textarea" !== c || "" !== k) && pb(a, k) : "number" === typeof k && pb(a, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ca.hasOwnProperty(f) ? null != k && "onScroll" === f && G("scroll", a) : null != k && qa(a, f, k, g));\n          }\n\n          switch (c) {\n            case "input":\n              Va(a);\n              cb(a, d, !1);\n              break;\n\n            case "textarea":\n              Va(a);\n              jb(a);\n              break;\n\n            case "option":\n              null != d.value && a.setAttribute("value", "" + Sa(d.value));\n              break;\n\n            case "select":\n              a.multiple = !!d.multiple;\n              f = d.value;\n              null != f ? fb(a, !!d.multiple, f, !1) : null != d.defaultValue && fb(a, !!d.multiple, d.defaultValue, !0);\n              break;\n\n            default:\n              "function" === typeof e.onClick && (a.onclick = jf);\n          }\n\n          mf(c, d) && (b.flags |= 4);\n        }\n\n        null !== b.ref && (b.flags |= 128);\n      }\n      return null;\n\n    case 6:\n      if (a && null != b.stateNode) Ei(a, b, a.memoizedProps, d);else {\n        if ("string" !== typeof d && null === b.stateNode) throw Error(y(166));\n        c = dh(ch.current);\n        dh(ah.current);\n        rh(b) ? (d = b.stateNode, c = b.memoizedProps, d[wf] = b, d.nodeValue !== c && (b.flags |= 4)) : (d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[wf] = b, b.stateNode = d);\n      }\n      return null;\n\n    case 13:\n      H(P);\n      d = b.memoizedState;\n      if (0 !== (b.flags & 64)) return b.lanes = c, b;\n      d = null !== d;\n      c = !1;\n      null === a ? void 0 !== b.memoizedProps.fallback && rh(b) : c = null !== a.memoizedState;\n      if (d && !c && 0 !== (b.mode & 2)) if (null === a && !0 !== b.memoizedProps.unstable_avoidThisFallback || 0 !== (P.current & 1)) 0 === V && (V = 3);else {\n        if (0 === V || 3 === V) V = 4;\n        null === U || 0 === (Dg & 134217727) && 0 === (Hi & 134217727) || Ii(U, W);\n      }\n      if (d || c) b.flags |= 4;\n      return null;\n\n    case 4:\n      return fh(), Ci(b), null === a && cf(b.stateNode.containerInfo), null;\n\n    case 10:\n      return rg(b), null;\n\n    case 17:\n      return Ff(b.type) && Gf(), null;\n\n    case 19:\n      H(P);\n      d = b.memoizedState;\n      if (null === d) return null;\n      f = 0 !== (b.flags & 64);\n      g = d.rendering;\n      if (null === g) {\n        if (f) Fi(d, !1);else {\n          if (0 !== V || null !== a && 0 !== (a.flags & 64)) for (a = b.child; null !== a;) {\n            g = ih(a);\n\n            if (null !== g) {\n              b.flags |= 64;\n              Fi(d, !1);\n              f = g.updateQueue;\n              null !== f && (b.updateQueue = f, b.flags |= 4);\n              null === d.lastEffect && (b.firstEffect = null);\n              b.lastEffect = d.lastEffect;\n              d = c;\n\n              for (c = b.child; null !== c;) f = c, a = d, f.flags &= 2, f.nextEffect = null, f.firstEffect = null, f.lastEffect = null, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a, f.child = null, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = null === a ? null : {\n                lanes: a.lanes,\n                firstContext: a.firstContext\n              }), c = c.sibling;\n\n              I(P, P.current & 1 | 2);\n              return b.child;\n            }\n\n            a = a.sibling;\n          }\n          null !== d.tail && O() > Ji && (b.flags |= 64, f = !0, Fi(d, !1), b.lanes = 33554432);\n        }\n      } else {\n        if (!f) if (a = ih(g), null !== a) {\n          if (b.flags |= 64, f = !0, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Fi(d, !0), null === d.tail && "hidden" === d.tailMode && !g.alternate && !lh) return b = b.lastEffect = d.lastEffect, null !== b && (b.nextEffect = null), null;\n        } else 2 * O() - d.renderingStartTime > Ji && 1073741824 !== c && (b.flags |= 64, f = !0, Fi(d, !1), b.lanes = 33554432);\n        d.isBackwards ? (g.sibling = b.child, b.child = g) : (c = d.last, null !== c ? c.sibling = g : b.child = g, d.last = g);\n      }\n      return null !== d.tail ? (c = d.tail, d.rendering = c, d.tail = c.sibling, d.lastEffect = b.lastEffect, d.renderingStartTime = O(), c.sibling = null, b = P.current, I(P, f ? b & 1 | 2 : b & 1), c) : null;\n\n    case 23:\n    case 24:\n      return Ki(), null !== a && null !== a.memoizedState !== (null !== b.memoizedState) && "unstable-defer-without-hiding" !== d.mode && (b.flags |= 4), null;\n  }\n\n  throw Error(y(156, b.tag));\n}\n\nfunction Li(a) {\n  switch (a.tag) {\n    case 1:\n      Ff(a.type) && Gf();\n      var b = a.flags;\n      return b & 4096 ? (a.flags = b & -4097 | 64, a) : null;\n\n    case 3:\n      fh();\n      H(N);\n      H(M);\n      uh();\n      b = a.flags;\n      if (0 !== (b & 64)) throw Error(y(285));\n      a.flags = b & -4097 | 64;\n      return a;\n\n    case 5:\n      return hh(a), null;\n\n    case 13:\n      return H(P), b = a.flags, b & 4096 ? (a.flags = b & -4097 | 64, a) : null;\n\n    case 19:\n      return H(P), null;\n\n    case 4:\n      return fh(), null;\n\n    case 10:\n      return rg(a), null;\n\n    case 23:\n    case 24:\n      return Ki(), null;\n\n    default:\n      return null;\n  }\n}\n\nfunction Mi(a, b) {\n  try {\n    var c = "",\n        d = b;\n\n    do c += Qa(d), d = d.return; while (d);\n\n    var e = c;\n  } catch (f) {\n    e = "\\nError generating stack: " + f.message + "\\n" + f.stack;\n  }\n\n  return {\n    value: a,\n    source: b,\n    stack: e\n  };\n}\n\nfunction Ni(a, b) {\n  try {\n    console.error(b.value);\n  } catch (c) {\n    setTimeout(function () {\n      throw c;\n    });\n  }\n}\n\nvar Oi = "function" === typeof WeakMap ? WeakMap : Map;\n\nfunction Pi(a, b, c) {\n  c = zg(-1, c);\n  c.tag = 3;\n  c.payload = {\n    element: null\n  };\n  var d = b.value;\n\n  c.callback = function () {\n    Qi || (Qi = !0, Ri = d);\n    Ni(a, b);\n  };\n\n  return c;\n}\n\nfunction Si(a, b, c) {\n  c = zg(-1, c);\n  c.tag = 3;\n  var d = a.type.getDerivedStateFromError;\n\n  if ("function" === typeof d) {\n    var e = b.value;\n\n    c.payload = function () {\n      Ni(a, b);\n      return d(e);\n    };\n  }\n\n  var f = a.stateNode;\n  null !== f && "function" === typeof f.componentDidCatch && (c.callback = function () {\n    "function" !== typeof d && (null === Ti ? Ti = new Set([this]) : Ti.add(this), Ni(a, b));\n    var c = b.stack;\n    this.componentDidCatch(b.value, {\n      componentStack: null !== c ? c : ""\n    });\n  });\n  return c;\n}\n\nvar Ui = "function" === typeof WeakSet ? WeakSet : Set;\n\nfunction Vi(a) {\n  var b = a.ref;\n  if (null !== b) if ("function" === typeof b) try {\n    b(null);\n  } catch (c) {\n    Wi(a, c);\n  } else b.current = null;\n}\n\nfunction Xi(a, b) {\n  switch (b.tag) {\n    case 0:\n    case 11:\n    case 15:\n    case 22:\n      return;\n\n    case 1:\n      if (b.flags & 256 && null !== a) {\n        var c = a.memoizedProps,\n            d = a.memoizedState;\n        a = b.stateNode;\n        b = a.getSnapshotBeforeUpdate(b.elementType === b.type ? c : lg(b.type, c), d);\n        a.__reactInternalSnapshotBeforeUpdate = b;\n      }\n\n      return;\n\n    case 3:\n      b.flags & 256 && qf(b.stateNode.containerInfo);\n      return;\n\n    case 5:\n    case 6:\n    case 4:\n    case 17:\n      return;\n  }\n\n  throw Error(y(163));\n}\n\nfunction Yi(a, b, c) {\n  switch (c.tag) {\n    case 0:\n    case 11:\n    case 15:\n    case 22:\n      b = c.updateQueue;\n      b = null !== b ? b.lastEffect : null;\n\n      if (null !== b) {\n        a = b = b.next;\n\n        do {\n          if (3 === (a.tag & 3)) {\n            var d = a.create;\n            a.destroy = d();\n          }\n\n          a = a.next;\n        } while (a !== b);\n      }\n\n      b = c.updateQueue;\n      b = null !== b ? b.lastEffect : null;\n\n      if (null !== b) {\n        a = b = b.next;\n\n        do {\n          var e = a;\n          d = e.next;\n          e = e.tag;\n          0 !== (e & 4) && 0 !== (e & 1) && (Zi(c, a), $i(c, a));\n          a = d;\n        } while (a !== b);\n      }\n\n      return;\n\n    case 1:\n      a = c.stateNode;\n      c.flags & 4 && (null === b ? a.componentDidMount() : (d = c.elementType === c.type ? b.memoizedProps : lg(c.type, b.memoizedProps), a.componentDidUpdate(d, b.memoizedState, a.__reactInternalSnapshotBeforeUpdate)));\n      b = c.updateQueue;\n      null !== b && Eg(c, b, a);\n      return;\n\n    case 3:\n      b = c.updateQueue;\n\n      if (null !== b) {\n        a = null;\n        if (null !== c.child) switch (c.child.tag) {\n          case 5:\n            a = c.child.stateNode;\n            break;\n\n          case 1:\n            a = c.child.stateNode;\n        }\n        Eg(c, b, a);\n      }\n\n      return;\n\n    case 5:\n      a = c.stateNode;\n      null === b && c.flags & 4 && mf(c.type, c.memoizedProps) && a.focus();\n      return;\n\n    case 6:\n      return;\n\n    case 4:\n      return;\n\n    case 12:\n      return;\n\n    case 13:\n      null === c.memoizedState && (c = c.alternate, null !== c && (c = c.memoizedState, null !== c && (c = c.dehydrated, null !== c && Cc(c))));\n      return;\n\n    case 19:\n    case 17:\n    case 20:\n    case 21:\n    case 23:\n    case 24:\n      return;\n  }\n\n  throw Error(y(163));\n}\n\nfunction aj(a, b) {\n  for (var c = a;;) {\n    if (5 === c.tag) {\n      var d = c.stateNode;\n      if (b) d = d.style, "function" === typeof d.setProperty ? d.setProperty("display", "none", "important") : d.display = "none";else {\n        d = c.stateNode;\n        var e = c.memoizedProps.style;\n        e = void 0 !== e && null !== e && e.hasOwnProperty("display") ? e.display : null;\n        d.style.display = sb("display", e);\n      }\n    } else if (6 === c.tag) c.stateNode.nodeValue = b ? "" : c.memoizedProps;else if ((23 !== c.tag && 24 !== c.tag || null === c.memoizedState || c === a) && null !== c.child) {\n      c.child.return = c;\n      c = c.child;\n      continue;\n    }\n\n    if (c === a) break;\n\n    for (; null === c.sibling;) {\n      if (null === c.return || c.return === a) return;\n      c = c.return;\n    }\n\n    c.sibling.return = c.return;\n    c = c.sibling;\n  }\n}\n\nfunction bj(a, b) {\n  if (Mf && "function" === typeof Mf.onCommitFiberUnmount) try {\n    Mf.onCommitFiberUnmount(Lf, b);\n  } catch (f) {}\n\n  switch (b.tag) {\n    case 0:\n    case 11:\n    case 14:\n    case 15:\n    case 22:\n      a = b.updateQueue;\n\n      if (null !== a && (a = a.lastEffect, null !== a)) {\n        var c = a = a.next;\n\n        do {\n          var d = c,\n              e = d.destroy;\n          d = d.tag;\n          if (void 0 !== e) if (0 !== (d & 4)) Zi(b, c);else {\n            d = b;\n\n            try {\n              e();\n            } catch (f) {\n              Wi(d, f);\n            }\n          }\n          c = c.next;\n        } while (c !== a);\n      }\n\n      break;\n\n    case 1:\n      Vi(b);\n      a = b.stateNode;\n      if ("function" === typeof a.componentWillUnmount) try {\n        a.props = b.memoizedProps, a.state = b.memoizedState, a.componentWillUnmount();\n      } catch (f) {\n        Wi(b, f);\n      }\n      break;\n\n    case 5:\n      Vi(b);\n      break;\n\n    case 4:\n      cj(a, b);\n  }\n}\n\nfunction dj(a) {\n  a.alternate = null;\n  a.child = null;\n  a.dependencies = null;\n  a.firstEffect = null;\n  a.lastEffect = null;\n  a.memoizedProps = null;\n  a.memoizedState = null;\n  a.pendingProps = null;\n  a.return = null;\n  a.updateQueue = null;\n}\n\nfunction ej(a) {\n  return 5 === a.tag || 3 === a.tag || 4 === a.tag;\n}\n\nfunction fj(a) {\n  a: {\n    for (var b = a.return; null !== b;) {\n      if (ej(b)) break a;\n      b = b.return;\n    }\n\n    throw Error(y(160));\n  }\n\n  var c = b;\n  b = c.stateNode;\n\n  switch (c.tag) {\n    case 5:\n      var d = !1;\n      break;\n\n    case 3:\n      b = b.containerInfo;\n      d = !0;\n      break;\n\n    case 4:\n      b = b.containerInfo;\n      d = !0;\n      break;\n\n    default:\n      throw Error(y(161));\n  }\n\n  c.flags & 16 && (pb(b, ""), c.flags &= -17);\n\n  a: b: for (c = a;;) {\n    for (; null === c.sibling;) {\n      if (null === c.return || ej(c.return)) {\n        c = null;\n        break a;\n      }\n\n      c = c.return;\n    }\n\n    c.sibling.return = c.return;\n\n    for (c = c.sibling; 5 !== c.tag && 6 !== c.tag && 18 !== c.tag;) {\n      if (c.flags & 2) continue b;\n      if (null === c.child || 4 === c.tag) continue b;else c.child.return = c, c = c.child;\n    }\n\n    if (!(c.flags & 2)) {\n      c = c.stateNode;\n      break a;\n    }\n  }\n\n  d ? gj(a, c, b) : hj(a, c, b);\n}\n\nfunction gj(a, b, c) {\n  var d = a.tag,\n      e = 5 === d || 6 === d;\n  if (e) a = e ? a.stateNode : a.stateNode.instance, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = jf));else if (4 !== d && (a = a.child, null !== a)) for (gj(a, b, c), a = a.sibling; null !== a;) gj(a, b, c), a = a.sibling;\n}\n\nfunction hj(a, b, c) {\n  var d = a.tag,\n      e = 5 === d || 6 === d;\n  if (e) a = e ? a.stateNode : a.stateNode.instance, b ? c.insertBefore(a, b) : c.appendChild(a);else if (4 !== d && (a = a.child, null !== a)) for (hj(a, b, c), a = a.sibling; null !== a;) hj(a, b, c), a = a.sibling;\n}\n\nfunction cj(a, b) {\n  for (var c = b, d = !1, e, f;;) {\n    if (!d) {\n      d = c.return;\n\n      a: for (;;) {\n        if (null === d) throw Error(y(160));\n        e = d.stateNode;\n\n        switch (d.tag) {\n          case 5:\n            f = !1;\n            break a;\n\n          case 3:\n            e = e.containerInfo;\n            f = !0;\n            break a;\n\n          case 4:\n            e = e.containerInfo;\n            f = !0;\n            break a;\n        }\n\n        d = d.return;\n      }\n\n      d = !0;\n    }\n\n    if (5 === c.tag || 6 === c.tag) {\n      a: for (var g = a, h = c, k = h;;) if (bj(g, k), null !== k.child && 4 !== k.tag) k.child.return = k, k = k.child;else {\n        if (k === h) break a;\n\n        for (; null === k.sibling;) {\n          if (null === k.return || k.return === h) break a;\n          k = k.return;\n        }\n\n        k.sibling.return = k.return;\n        k = k.sibling;\n      }\n\n      f ? (g = e, h = c.stateNode, 8 === g.nodeType ? g.parentNode.removeChild(h) : g.removeChild(h)) : e.removeChild(c.stateNode);\n    } else if (4 === c.tag) {\n      if (null !== c.child) {\n        e = c.stateNode.containerInfo;\n        f = !0;\n        c.child.return = c;\n        c = c.child;\n        continue;\n      }\n    } else if (bj(a, c), null !== c.child) {\n      c.child.return = c;\n      c = c.child;\n      continue;\n    }\n\n    if (c === b) break;\n\n    for (; null === c.sibling;) {\n      if (null === c.return || c.return === b) return;\n      c = c.return;\n      4 === c.tag && (d = !1);\n    }\n\n    c.sibling.return = c.return;\n    c = c.sibling;\n  }\n}\n\nfunction ij(a, b) {\n  switch (b.tag) {\n    case 0:\n    case 11:\n    case 14:\n    case 15:\n    case 22:\n      var c = b.updateQueue;\n      c = null !== c ? c.lastEffect : null;\n\n      if (null !== c) {\n        var d = c = c.next;\n\n        do 3 === (d.tag & 3) && (a = d.destroy, d.destroy = void 0, void 0 !== a && a()), d = d.next; while (d !== c);\n      }\n\n      return;\n\n    case 1:\n      return;\n\n    case 5:\n      c = b.stateNode;\n\n      if (null != c) {\n        d = b.memoizedProps;\n        var e = null !== a ? a.memoizedProps : d;\n        a = b.type;\n        var f = b.updateQueue;\n        b.updateQueue = null;\n\n        if (null !== f) {\n          c[xf] = d;\n          "input" === a && "radio" === d.type && null != d.name && $a(c, d);\n          wb(a, e);\n          b = wb(a, d);\n\n          for (e = 0; e < f.length; e += 2) {\n            var g = f[e],\n                h = f[e + 1];\n            "style" === g ? tb(c, h) : "dangerouslySetInnerHTML" === g ? ob(c, h) : "children" === g ? pb(c, h) : qa(c, g, h, b);\n          }\n\n          switch (a) {\n            case "input":\n              ab(c, d);\n              break;\n\n            case "textarea":\n              ib(c, d);\n              break;\n\n            case "select":\n              a = c._wrapperState.wasMultiple, c._wrapperState.wasMultiple = !!d.multiple, f = d.value, null != f ? fb(c, !!d.multiple, f, !1) : a !== !!d.multiple && (null != d.defaultValue ? fb(c, !!d.multiple, d.defaultValue, !0) : fb(c, !!d.multiple, d.multiple ? [] : "", !1));\n          }\n        }\n      }\n\n      return;\n\n    case 6:\n      if (null === b.stateNode) throw Error(y(162));\n      b.stateNode.nodeValue = b.memoizedProps;\n      return;\n\n    case 3:\n      c = b.stateNode;\n      c.hydrate && (c.hydrate = !1, Cc(c.containerInfo));\n      return;\n\n    case 12:\n      return;\n\n    case 13:\n      null !== b.memoizedState && (jj = O(), aj(b.child, !0));\n      kj(b);\n      return;\n\n    case 19:\n      kj(b);\n      return;\n\n    case 17:\n      return;\n\n    case 23:\n    case 24:\n      aj(b, null !== b.memoizedState);\n      return;\n  }\n\n  throw Error(y(163));\n}\n\nfunction kj(a) {\n  var b = a.updateQueue;\n\n  if (null !== b) {\n    a.updateQueue = null;\n    var c = a.stateNode;\n    null === c && (c = a.stateNode = new Ui());\n    b.forEach(function (b) {\n      var d = lj.bind(null, a, b);\n      c.has(b) || (c.add(b), b.then(d, d));\n    });\n  }\n}\n\nfunction mj(a, b) {\n  return null !== a && (a = a.memoizedState, null === a || null !== a.dehydrated) ? (b = b.memoizedState, null !== b && null === b.dehydrated) : !1;\n}\n\nvar nj = Math.ceil,\n    oj = ra.ReactCurrentDispatcher,\n    pj = ra.ReactCurrentOwner,\n    X = 0,\n    U = null,\n    Y = null,\n    W = 0,\n    qj = 0,\n    rj = Bf(0),\n    V = 0,\n    sj = null,\n    tj = 0,\n    Dg = 0,\n    Hi = 0,\n    uj = 0,\n    vj = null,\n    jj = 0,\n    Ji = Infinity;\n\nfunction wj() {\n  Ji = O() + 500;\n}\n\nvar Z = null,\n    Qi = !1,\n    Ri = null,\n    Ti = null,\n    xj = !1,\n    yj = null,\n    zj = 90,\n    Aj = [],\n    Bj = [],\n    Cj = null,\n    Dj = 0,\n    Ej = null,\n    Fj = -1,\n    Gj = 0,\n    Hj = 0,\n    Ij = null,\n    Jj = !1;\n\nfunction Hg() {\n  return 0 !== (X & 48) ? O() : -1 !== Fj ? Fj : Fj = O();\n}\n\nfunction Ig(a) {\n  a = a.mode;\n  if (0 === (a & 2)) return 1;\n  if (0 === (a & 4)) return 99 === eg() ? 1 : 2;\n  0 === Gj && (Gj = tj);\n\n  if (0 !== kg.transition) {\n    0 !== Hj && (Hj = null !== vj ? vj.pendingLanes : 0);\n    a = Gj;\n    var b = 4186112 & ~Hj;\n    b &= -b;\n    0 === b && (a = 4186112 & ~a, b = a & -a, 0 === b && (b = 8192));\n    return b;\n  }\n\n  a = eg();\n  0 !== (X & 4) && 98 === a ? a = Xc(12, Gj) : (a = Sc(a), a = Xc(a, Gj));\n  return a;\n}\n\nfunction Jg(a, b, c) {\n  if (50 < Dj) throw Dj = 0, Ej = null, Error(y(185));\n  a = Kj(a, b);\n  if (null === a) return null;\n  $c(a, b, c);\n  a === U && (Hi |= b, 4 === V && Ii(a, W));\n  var d = eg();\n  1 === b ? 0 !== (X & 8) && 0 === (X & 48) ? Lj(a) : (Mj(a, c), 0 === X && (wj(), ig())) : (0 === (X & 4) || 98 !== d && 99 !== d || (null === Cj ? Cj = new Set([a]) : Cj.add(a)), Mj(a, c));\n  vj = a;\n}\n\nfunction Kj(a, b) {\n  a.lanes |= b;\n  var c = a.alternate;\n  null !== c && (c.lanes |= b);\n  c = a;\n\n  for (a = a.return; null !== a;) a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;\n\n  return 3 === c.tag ? c.stateNode : null;\n}\n\nfunction Mj(a, b) {\n  for (var c = a.callbackNode, d = a.suspendedLanes, e = a.pingedLanes, f = a.expirationTimes, g = a.pendingLanes; 0 < g;) {\n    var h = 31 - Vc(g),\n        k = 1 << h,\n        l = f[h];\n\n    if (-1 === l) {\n      if (0 === (k & d) || 0 !== (k & e)) {\n        l = b;\n        Rc(k);\n        var n = F;\n        f[h] = 10 <= n ? l + 250 : 6 <= n ? l + 5E3 : -1;\n      }\n    } else l <= b && (a.expiredLanes |= k);\n\n    g &= ~k;\n  }\n\n  d = Uc(a, a === U ? W : 0);\n  b = F;\n  if (0 === d) null !== c && (c !== Zf && Pf(c), a.callbackNode = null, a.callbackPriority = 0);else {\n    if (null !== c) {\n      if (a.callbackPriority === b) return;\n      c !== Zf && Pf(c);\n    }\n\n    15 === b ? (c = Lj.bind(null, a), null === ag ? (ag = [c], bg = Of(Uf, jg)) : ag.push(c), c = Zf) : 14 === b ? c = hg(99, Lj.bind(null, a)) : (c = Tc(b), c = hg(c, Nj.bind(null, a)));\n    a.callbackPriority = b;\n    a.callbackNode = c;\n  }\n}\n\nfunction Nj(a) {\n  Fj = -1;\n  Hj = Gj = 0;\n  if (0 !== (X & 48)) throw Error(y(327));\n  var b = a.callbackNode;\n  if (Oj() && a.callbackNode !== b) return null;\n  var c = Uc(a, a === U ? W : 0);\n  if (0 === c) return null;\n  var d = c;\n  var e = X;\n  X |= 16;\n  var f = Pj();\n  if (U !== a || W !== d) wj(), Qj(a, d);\n\n  do try {\n    Rj();\n    break;\n  } catch (h) {\n    Sj(a, h);\n  } while (1);\n\n  qg();\n  oj.current = f;\n  X = e;\n  null !== Y ? d = 0 : (U = null, W = 0, d = V);\n  if (0 !== (tj & Hi)) Qj(a, 0);else if (0 !== d) {\n    2 === d && (X |= 64, a.hydrate && (a.hydrate = !1, qf(a.containerInfo)), c = Wc(a), 0 !== c && (d = Tj(a, c)));\n    if (1 === d) throw b = sj, Qj(a, 0), Ii(a, c), Mj(a, O()), b;\n    a.finishedWork = a.current.alternate;\n    a.finishedLanes = c;\n\n    switch (d) {\n      case 0:\n      case 1:\n        throw Error(y(345));\n\n      case 2:\n        Uj(a);\n        break;\n\n      case 3:\n        Ii(a, c);\n\n        if ((c & 62914560) === c && (d = jj + 500 - O(), 10 < d)) {\n          if (0 !== Uc(a, 0)) break;\n          e = a.suspendedLanes;\n\n          if ((e & c) !== c) {\n            Hg();\n            a.pingedLanes |= a.suspendedLanes & e;\n            break;\n          }\n\n          a.timeoutHandle = of(Uj.bind(null, a), d);\n          break;\n        }\n\n        Uj(a);\n        break;\n\n      case 4:\n        Ii(a, c);\n        if ((c & 4186112) === c) break;\n        d = a.eventTimes;\n\n        for (e = -1; 0 < c;) {\n          var g = 31 - Vc(c);\n          f = 1 << g;\n          g = d[g];\n          g > e && (e = g);\n          c &= ~f;\n        }\n\n        c = e;\n        c = O() - c;\n        c = (120 > c ? 120 : 480 > c ? 480 : 1080 > c ? 1080 : 1920 > c ? 1920 : 3E3 > c ? 3E3 : 4320 > c ? 4320 : 1960 * nj(c / 1960)) - c;\n\n        if (10 < c) {\n          a.timeoutHandle = of(Uj.bind(null, a), c);\n          break;\n        }\n\n        Uj(a);\n        break;\n\n      case 5:\n        Uj(a);\n        break;\n\n      default:\n        throw Error(y(329));\n    }\n  }\n  Mj(a, O());\n  return a.callbackNode === b ? Nj.bind(null, a) : null;\n}\n\nfunction Ii(a, b) {\n  b &= ~uj;\n  b &= ~Hi;\n  a.suspendedLanes |= b;\n  a.pingedLanes &= ~b;\n\n  for (a = a.expirationTimes; 0 < b;) {\n    var c = 31 - Vc(b),\n        d = 1 << c;\n    a[c] = -1;\n    b &= ~d;\n  }\n}\n\nfunction Lj(a) {\n  if (0 !== (X & 48)) throw Error(y(327));\n  Oj();\n\n  if (a === U && 0 !== (a.expiredLanes & W)) {\n    var b = W;\n    var c = Tj(a, b);\n    0 !== (tj & Hi) && (b = Uc(a, b), c = Tj(a, b));\n  } else b = Uc(a, 0), c = Tj(a, b);\n\n  0 !== a.tag && 2 === c && (X |= 64, a.hydrate && (a.hydrate = !1, qf(a.containerInfo)), b = Wc(a), 0 !== b && (c = Tj(a, b)));\n  if (1 === c) throw c = sj, Qj(a, 0), Ii(a, b), Mj(a, O()), c;\n  a.finishedWork = a.current.alternate;\n  a.finishedLanes = b;\n  Uj(a);\n  Mj(a, O());\n  return null;\n}\n\nfunction Vj() {\n  if (null !== Cj) {\n    var a = Cj;\n    Cj = null;\n    a.forEach(function (a) {\n      a.expiredLanes |= 24 & a.pendingLanes;\n      Mj(a, O());\n    });\n  }\n\n  ig();\n}\n\nfunction Wj(a, b) {\n  var c = X;\n  X |= 1;\n\n  try {\n    return a(b);\n  } finally {\n    X = c, 0 === X && (wj(), ig());\n  }\n}\n\nfunction Xj(a, b) {\n  var c = X;\n  X &= -2;\n  X |= 8;\n\n  try {\n    return a(b);\n  } finally {\n    X = c, 0 === X && (wj(), ig());\n  }\n}\n\nfunction ni(a, b) {\n  I(rj, qj);\n  qj |= b;\n  tj |= b;\n}\n\nfunction Ki() {\n  qj = rj.current;\n  H(rj);\n}\n\nfunction Qj(a, b) {\n  a.finishedWork = null;\n  a.finishedLanes = 0;\n  var c = a.timeoutHandle;\n  -1 !== c && (a.timeoutHandle = -1, pf(c));\n  if (null !== Y) for (c = Y.return; null !== c;) {\n    var d = c;\n\n    switch (d.tag) {\n      case 1:\n        d = d.type.childContextTypes;\n        null !== d && void 0 !== d && Gf();\n        break;\n\n      case 3:\n        fh();\n        H(N);\n        H(M);\n        uh();\n        break;\n\n      case 5:\n        hh(d);\n        break;\n\n      case 4:\n        fh();\n        break;\n\n      case 13:\n        H(P);\n        break;\n\n      case 19:\n        H(P);\n        break;\n\n      case 10:\n        rg(d);\n        break;\n\n      case 23:\n      case 24:\n        Ki();\n    }\n\n    c = c.return;\n  }\n  U = a;\n  Y = Tg(a.current, null);\n  W = qj = tj = b;\n  V = 0;\n  sj = null;\n  uj = Hi = Dg = 0;\n}\n\nfunction Sj(a, b) {\n  do {\n    var c = Y;\n\n    try {\n      qg();\n      vh.current = Gh;\n\n      if (yh) {\n        for (var d = R.memoizedState; null !== d;) {\n          var e = d.queue;\n          null !== e && (e.pending = null);\n          d = d.next;\n        }\n\n        yh = !1;\n      }\n\n      xh = 0;\n      T = S = R = null;\n      zh = !1;\n      pj.current = null;\n\n      if (null === c || null === c.return) {\n        V = 1;\n        sj = b;\n        Y = null;\n        break;\n      }\n\n      a: {\n        var f = a,\n            g = c.return,\n            h = c,\n            k = b;\n        b = W;\n        h.flags |= 2048;\n        h.firstEffect = h.lastEffect = null;\n\n        if (null !== k && "object" === typeof k && "function" === typeof k.then) {\n          var l = k;\n\n          if (0 === (h.mode & 2)) {\n            var n = h.alternate;\n            n ? (h.updateQueue = n.updateQueue, h.memoizedState = n.memoizedState, h.lanes = n.lanes) : (h.updateQueue = null, h.memoizedState = null);\n          }\n\n          var A = 0 !== (P.current & 1),\n              p = g;\n\n          do {\n            var C;\n\n            if (C = 13 === p.tag) {\n              var x = p.memoizedState;\n              if (null !== x) C = null !== x.dehydrated ? !0 : !1;else {\n                var w = p.memoizedProps;\n                C = void 0 === w.fallback ? !1 : !0 !== w.unstable_avoidThisFallback ? !0 : A ? !1 : !0;\n              }\n            }\n\n            if (C) {\n              var z = p.updateQueue;\n\n              if (null === z) {\n                var u = new Set();\n                u.add(l);\n                p.updateQueue = u;\n              } else z.add(l);\n\n              if (0 === (p.mode & 2)) {\n                p.flags |= 64;\n                h.flags |= 16384;\n                h.flags &= -2981;\n                if (1 === h.tag) if (null === h.alternate) h.tag = 17;else {\n                  var t = zg(-1, 1);\n                  t.tag = 2;\n                  Ag(h, t);\n                }\n                h.lanes |= 1;\n                break a;\n              }\n\n              k = void 0;\n              h = b;\n              var q = f.pingCache;\n              null === q ? (q = f.pingCache = new Oi(), k = new Set(), q.set(l, k)) : (k = q.get(l), void 0 === k && (k = new Set(), q.set(l, k)));\n\n              if (!k.has(h)) {\n                k.add(h);\n                var v = Yj.bind(null, f, l, h);\n                l.then(v, v);\n              }\n\n              p.flags |= 4096;\n              p.lanes = b;\n              break a;\n            }\n\n            p = p.return;\n          } while (null !== p);\n\n          k = Error((Ra(h.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");\n        }\n\n        5 !== V && (V = 2);\n        k = Mi(k, h);\n        p = g;\n\n        do {\n          switch (p.tag) {\n            case 3:\n              f = k;\n              p.flags |= 4096;\n              b &= -b;\n              p.lanes |= b;\n              var J = Pi(p, f, b);\n              Bg(p, J);\n              break a;\n\n            case 1:\n              f = k;\n              var K = p.type,\n                  Q = p.stateNode;\n\n              if (0 === (p.flags & 64) && ("function" === typeof K.getDerivedStateFromError || null !== Q && "function" === typeof Q.componentDidCatch && (null === Ti || !Ti.has(Q)))) {\n                p.flags |= 4096;\n                b &= -b;\n                p.lanes |= b;\n                var L = Si(p, f, b);\n                Bg(p, L);\n                break a;\n              }\n\n          }\n\n          p = p.return;\n        } while (null !== p);\n      }\n\n      Zj(c);\n    } catch (va) {\n      b = va;\n      Y === c && null !== c && (Y = c = c.return);\n      continue;\n    }\n\n    break;\n  } while (1);\n}\n\nfunction Pj() {\n  var a = oj.current;\n  oj.current = Gh;\n  return null === a ? Gh : a;\n}\n\nfunction Tj(a, b) {\n  var c = X;\n  X |= 16;\n  var d = Pj();\n  U === a && W === b || Qj(a, b);\n\n  do try {\n    ak();\n    break;\n  } catch (e) {\n    Sj(a, e);\n  } while (1);\n\n  qg();\n  X = c;\n  oj.current = d;\n  if (null !== Y) throw Error(y(261));\n  U = null;\n  W = 0;\n  return V;\n}\n\nfunction ak() {\n  for (; null !== Y;) bk(Y);\n}\n\nfunction Rj() {\n  for (; null !== Y && !Qf();) bk(Y);\n}\n\nfunction bk(a) {\n  var b = ck(a.alternate, a, qj);\n  a.memoizedProps = a.pendingProps;\n  null === b ? Zj(a) : Y = b;\n  pj.current = null;\n}\n\nfunction Zj(a) {\n  var b = a;\n\n  do {\n    var c = b.alternate;\n    a = b.return;\n\n    if (0 === (b.flags & 2048)) {\n      c = Gi(c, b, qj);\n\n      if (null !== c) {\n        Y = c;\n        return;\n      }\n\n      c = b;\n\n      if (24 !== c.tag && 23 !== c.tag || null === c.memoizedState || 0 !== (qj & 1073741824) || 0 === (c.mode & 4)) {\n        for (var d = 0, e = c.child; null !== e;) d |= e.lanes | e.childLanes, e = e.sibling;\n\n        c.childLanes = d;\n      }\n\n      null !== a && 0 === (a.flags & 2048) && (null === a.firstEffect && (a.firstEffect = b.firstEffect), null !== b.lastEffect && (null !== a.lastEffect && (a.lastEffect.nextEffect = b.firstEffect), a.lastEffect = b.lastEffect), 1 < b.flags && (null !== a.lastEffect ? a.lastEffect.nextEffect = b : a.firstEffect = b, a.lastEffect = b));\n    } else {\n      c = Li(b);\n\n      if (null !== c) {\n        c.flags &= 2047;\n        Y = c;\n        return;\n      }\n\n      null !== a && (a.firstEffect = a.lastEffect = null, a.flags |= 2048);\n    }\n\n    b = b.sibling;\n\n    if (null !== b) {\n      Y = b;\n      return;\n    }\n\n    Y = b = a;\n  } while (null !== b);\n\n  0 === V && (V = 5);\n}\n\nfunction Uj(a) {\n  var b = eg();\n  gg(99, dk.bind(null, a, b));\n  return null;\n}\n\nfunction dk(a, b) {\n  do Oj(); while (null !== yj);\n\n  if (0 !== (X & 48)) throw Error(y(327));\n  var c = a.finishedWork;\n  if (null === c) return null;\n  a.finishedWork = null;\n  a.finishedLanes = 0;\n  if (c === a.current) throw Error(y(177));\n  a.callbackNode = null;\n  var d = c.lanes | c.childLanes,\n      e = d,\n      f = a.pendingLanes & ~e;\n  a.pendingLanes = e;\n  a.suspendedLanes = 0;\n  a.pingedLanes = 0;\n  a.expiredLanes &= e;\n  a.mutableReadLanes &= e;\n  a.entangledLanes &= e;\n  e = a.entanglements;\n\n  for (var g = a.eventTimes, h = a.expirationTimes; 0 < f;) {\n    var k = 31 - Vc(f),\n        l = 1 << k;\n    e[k] = 0;\n    g[k] = -1;\n    h[k] = -1;\n    f &= ~l;\n  }\n\n  null !== Cj && 0 === (d & 24) && Cj.has(a) && Cj.delete(a);\n  a === U && (Y = U = null, W = 0);\n  1 < c.flags ? null !== c.lastEffect ? (c.lastEffect.nextEffect = c, d = c.firstEffect) : d = c : d = c.firstEffect;\n\n  if (null !== d) {\n    e = X;\n    X |= 32;\n    pj.current = null;\n    kf = fd;\n    g = Ne();\n\n    if (Oe(g)) {\n      if ("selectionStart" in g) h = {\n        start: g.selectionStart,\n        end: g.selectionEnd\n      };else a: if (h = (h = g.ownerDocument) && h.defaultView || window, (l = h.getSelection && h.getSelection()) && 0 !== l.rangeCount) {\n        h = l.anchorNode;\n        f = l.anchorOffset;\n        k = l.focusNode;\n        l = l.focusOffset;\n\n        try {\n          h.nodeType, k.nodeType;\n        } catch (va) {\n          h = null;\n          break a;\n        }\n\n        var n = 0,\n            A = -1,\n            p = -1,\n            C = 0,\n            x = 0,\n            w = g,\n            z = null;\n\n        b: for (;;) {\n          for (var u;;) {\n            w !== h || 0 !== f && 3 !== w.nodeType || (A = n + f);\n            w !== k || 0 !== l && 3 !== w.nodeType || (p = n + l);\n            3 === w.nodeType && (n += w.nodeValue.length);\n            if (null === (u = w.firstChild)) break;\n            z = w;\n            w = u;\n          }\n\n          for (;;) {\n            if (w === g) break b;\n            z === h && ++C === f && (A = n);\n            z === k && ++x === l && (p = n);\n            if (null !== (u = w.nextSibling)) break;\n            w = z;\n            z = w.parentNode;\n          }\n\n          w = u;\n        }\n\n        h = -1 === A || -1 === p ? null : {\n          start: A,\n          end: p\n        };\n      } else h = null;\n      h = h || {\n        start: 0,\n        end: 0\n      };\n    } else h = null;\n\n    lf = {\n      focusedElem: g,\n      selectionRange: h\n    };\n    fd = !1;\n    Ij = null;\n    Jj = !1;\n    Z = d;\n\n    do try {\n      ek();\n    } catch (va) {\n      if (null === Z) throw Error(y(330));\n      Wi(Z, va);\n      Z = Z.nextEffect;\n    } while (null !== Z);\n\n    Ij = null;\n    Z = d;\n\n    do try {\n      for (g = a; null !== Z;) {\n        var t = Z.flags;\n        t & 16 && pb(Z.stateNode, "");\n\n        if (t & 128) {\n          var q = Z.alternate;\n\n          if (null !== q) {\n            var v = q.ref;\n            null !== v && ("function" === typeof v ? v(null) : v.current = null);\n          }\n        }\n\n        switch (t & 1038) {\n          case 2:\n            fj(Z);\n            Z.flags &= -3;\n            break;\n\n          case 6:\n            fj(Z);\n            Z.flags &= -3;\n            ij(Z.alternate, Z);\n            break;\n\n          case 1024:\n            Z.flags &= -1025;\n            break;\n\n          case 1028:\n            Z.flags &= -1025;\n            ij(Z.alternate, Z);\n            break;\n\n          case 4:\n            ij(Z.alternate, Z);\n            break;\n\n          case 8:\n            h = Z;\n            cj(g, h);\n            var J = h.alternate;\n            dj(h);\n            null !== J && dj(J);\n        }\n\n        Z = Z.nextEffect;\n      }\n    } catch (va) {\n      if (null === Z) throw Error(y(330));\n      Wi(Z, va);\n      Z = Z.nextEffect;\n    } while (null !== Z);\n\n    v = lf;\n    q = Ne();\n    t = v.focusedElem;\n    g = v.selectionRange;\n\n    if (q !== t && t && t.ownerDocument && Me(t.ownerDocument.documentElement, t)) {\n      null !== g && Oe(t) && (q = g.start, v = g.end, void 0 === v && (v = q), "selectionStart" in t ? (t.selectionStart = q, t.selectionEnd = Math.min(v, t.value.length)) : (v = (q = t.ownerDocument || document) && q.defaultView || window, v.getSelection && (v = v.getSelection(), h = t.textContent.length, J = Math.min(g.start, h), g = void 0 === g.end ? J : Math.min(g.end, h), !v.extend && J > g && (h = g, g = J, J = h), h = Le(t, J), f = Le(t, g), h && f && (1 !== v.rangeCount || v.anchorNode !== h.node || v.anchorOffset !== h.offset || v.focusNode !== f.node || v.focusOffset !== f.offset) && (q = q.createRange(), q.setStart(h.node, h.offset), v.removeAllRanges(), J > g ? (v.addRange(q), v.extend(f.node, f.offset)) : (q.setEnd(f.node, f.offset), v.addRange(q))))));\n      q = [];\n\n      for (v = t; v = v.parentNode;) 1 === v.nodeType && q.push({\n        element: v,\n        left: v.scrollLeft,\n        top: v.scrollTop\n      });\n\n      "function" === typeof t.focus && t.focus();\n\n      for (t = 0; t < q.length; t++) v = q[t], v.element.scrollLeft = v.left, v.element.scrollTop = v.top;\n    }\n\n    fd = !!kf;\n    lf = kf = null;\n    a.current = c;\n    Z = d;\n\n    do try {\n      for (t = a; null !== Z;) {\n        var K = Z.flags;\n        K & 36 && Yi(t, Z.alternate, Z);\n\n        if (K & 128) {\n          q = void 0;\n          var Q = Z.ref;\n\n          if (null !== Q) {\n            var L = Z.stateNode;\n\n            switch (Z.tag) {\n              case 5:\n                q = L;\n                break;\n\n              default:\n                q = L;\n            }\n\n            "function" === typeof Q ? Q(q) : Q.current = q;\n          }\n        }\n\n        Z = Z.nextEffect;\n      }\n    } catch (va) {\n      if (null === Z) throw Error(y(330));\n      Wi(Z, va);\n      Z = Z.nextEffect;\n    } while (null !== Z);\n\n    Z = null;\n    $f();\n    X = e;\n  } else a.current = c;\n\n  if (xj) xj = !1, yj = a, zj = b;else for (Z = d; null !== Z;) b = Z.nextEffect, Z.nextEffect = null, Z.flags & 8 && (K = Z, K.sibling = null, K.stateNode = null), Z = b;\n  d = a.pendingLanes;\n  0 === d && (Ti = null);\n  1 === d ? a === Ej ? Dj++ : (Dj = 0, Ej = a) : Dj = 0;\n  c = c.stateNode;\n  if (Mf && "function" === typeof Mf.onCommitFiberRoot) try {\n    Mf.onCommitFiberRoot(Lf, c, void 0, 64 === (c.current.flags & 64));\n  } catch (va) {}\n  Mj(a, O());\n  if (Qi) throw Qi = !1, a = Ri, Ri = null, a;\n  if (0 !== (X & 8)) return null;\n  ig();\n  return null;\n}\n\nfunction ek() {\n  for (; null !== Z;) {\n    var a = Z.alternate;\n    Jj || null === Ij || (0 !== (Z.flags & 8) ? dc(Z, Ij) && (Jj = !0) : 13 === Z.tag && mj(a, Z) && dc(Z, Ij) && (Jj = !0));\n    var b = Z.flags;\n    0 !== (b & 256) && Xi(a, Z);\n    0 === (b & 512) || xj || (xj = !0, hg(97, function () {\n      Oj();\n      return null;\n    }));\n    Z = Z.nextEffect;\n  }\n}\n\nfunction Oj() {\n  if (90 !== zj) {\n    var a = 97 < zj ? 97 : zj;\n    zj = 90;\n    return gg(a, fk);\n  }\n\n  return !1;\n}\n\nfunction $i(a, b) {\n  Aj.push(b, a);\n  xj || (xj = !0, hg(97, function () {\n    Oj();\n    return null;\n  }));\n}\n\nfunction Zi(a, b) {\n  Bj.push(b, a);\n  xj || (xj = !0, hg(97, function () {\n    Oj();\n    return null;\n  }));\n}\n\nfunction fk() {\n  if (null === yj) return !1;\n  var a = yj;\n  yj = null;\n  if (0 !== (X & 48)) throw Error(y(331));\n  var b = X;\n  X |= 32;\n  var c = Bj;\n  Bj = [];\n\n  for (var d = 0; d < c.length; d += 2) {\n    var e = c[d],\n        f = c[d + 1],\n        g = e.destroy;\n    e.destroy = void 0;\n    if ("function" === typeof g) try {\n      g();\n    } catch (k) {\n      if (null === f) throw Error(y(330));\n      Wi(f, k);\n    }\n  }\n\n  c = Aj;\n  Aj = [];\n\n  for (d = 0; d < c.length; d += 2) {\n    e = c[d];\n    f = c[d + 1];\n\n    try {\n      var h = e.create;\n      e.destroy = h();\n    } catch (k) {\n      if (null === f) throw Error(y(330));\n      Wi(f, k);\n    }\n  }\n\n  for (h = a.current.firstEffect; null !== h;) a = h.nextEffect, h.nextEffect = null, h.flags & 8 && (h.sibling = null, h.stateNode = null), h = a;\n\n  X = b;\n  ig();\n  return !0;\n}\n\nfunction gk(a, b, c) {\n  b = Mi(c, b);\n  b = Pi(a, b, 1);\n  Ag(a, b);\n  b = Hg();\n  a = Kj(a, 1);\n  null !== a && ($c(a, 1, b), Mj(a, b));\n}\n\nfunction Wi(a, b) {\n  if (3 === a.tag) gk(a, a, b);else for (var c = a.return; null !== c;) {\n    if (3 === c.tag) {\n      gk(c, a, b);\n      break;\n    } else if (1 === c.tag) {\n      var d = c.stateNode;\n\n      if ("function" === typeof c.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Ti || !Ti.has(d))) {\n        a = Mi(b, a);\n        var e = Si(c, a, 1);\n        Ag(c, e);\n        e = Hg();\n        c = Kj(c, 1);\n        if (null !== c) $c(c, 1, e), Mj(c, e);else if ("function" === typeof d.componentDidCatch && (null === Ti || !Ti.has(d))) try {\n          d.componentDidCatch(b, a);\n        } catch (f) {}\n        break;\n      }\n    }\n\n    c = c.return;\n  }\n}\n\nfunction Yj(a, b, c) {\n  var d = a.pingCache;\n  null !== d && d.delete(b);\n  b = Hg();\n  a.pingedLanes |= a.suspendedLanes & c;\n  U === a && (W & c) === c && (4 === V || 3 === V && (W & 62914560) === W && 500 > O() - jj ? Qj(a, 0) : uj |= c);\n  Mj(a, b);\n}\n\nfunction lj(a, b) {\n  var c = a.stateNode;\n  null !== c && c.delete(b);\n  b = 0;\n  0 === b && (b = a.mode, 0 === (b & 2) ? b = 1 : 0 === (b & 4) ? b = 99 === eg() ? 1 : 2 : (0 === Gj && (Gj = tj), b = Yc(62914560 & ~Gj), 0 === b && (b = 4194304)));\n  c = Hg();\n  a = Kj(a, b);\n  null !== a && ($c(a, b, c), Mj(a, c));\n}\n\nvar ck;\n\nck = function (a, b, c) {\n  var d = b.lanes;\n  if (null !== a) {\n    if (a.memoizedProps !== b.pendingProps || N.current) ug = !0;else if (0 !== (c & d)) ug = 0 !== (a.flags & 16384) ? !0 : !1;else {\n      ug = !1;\n\n      switch (b.tag) {\n        case 3:\n          ri(b);\n          sh();\n          break;\n\n        case 5:\n          gh(b);\n          break;\n\n        case 1:\n          Ff(b.type) && Jf(b);\n          break;\n\n        case 4:\n          eh(b, b.stateNode.containerInfo);\n          break;\n\n        case 10:\n          d = b.memoizedProps.value;\n          var e = b.type._context;\n          I(mg, e._currentValue);\n          e._currentValue = d;\n          break;\n\n        case 13:\n          if (null !== b.memoizedState) {\n            if (0 !== (c & b.child.childLanes)) return ti(a, b, c);\n            I(P, P.current & 1);\n            b = hi(a, b, c);\n            return null !== b ? b.sibling : null;\n          }\n\n          I(P, P.current & 1);\n          break;\n\n        case 19:\n          d = 0 !== (c & b.childLanes);\n\n          if (0 !== (a.flags & 64)) {\n            if (d) return Ai(a, b, c);\n            b.flags |= 64;\n          }\n\n          e = b.memoizedState;\n          null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);\n          I(P, P.current);\n          if (d) break;else return null;\n\n        case 23:\n        case 24:\n          return b.lanes = 0, mi(a, b, c);\n      }\n\n      return hi(a, b, c);\n    }\n  } else ug = !1;\n  b.lanes = 0;\n\n  switch (b.tag) {\n    case 2:\n      d = b.type;\n      null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);\n      a = b.pendingProps;\n      e = Ef(b, M.current);\n      tg(b, c);\n      e = Ch(null, b, d, a, e, c);\n      b.flags |= 1;\n\n      if ("object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof) {\n        b.tag = 1;\n        b.memoizedState = null;\n        b.updateQueue = null;\n\n        if (Ff(d)) {\n          var f = !0;\n          Jf(b);\n        } else f = !1;\n\n        b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null;\n        xg(b);\n        var g = d.getDerivedStateFromProps;\n        "function" === typeof g && Gg(b, d, g, a);\n        e.updater = Kg;\n        b.stateNode = e;\n        e._reactInternals = b;\n        Og(b, d, a, c);\n        b = qi(null, b, d, !0, f, c);\n      } else b.tag = 0, fi(null, b, e, c), b = b.child;\n\n      return b;\n\n    case 16:\n      e = b.elementType;\n\n      a: {\n        null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);\n        a = b.pendingProps;\n        f = e._init;\n        e = f(e._payload);\n        b.type = e;\n        f = b.tag = hk(e);\n        a = lg(e, a);\n\n        switch (f) {\n          case 0:\n            b = li(null, b, e, a, c);\n            break a;\n\n          case 1:\n            b = pi(null, b, e, a, c);\n            break a;\n\n          case 11:\n            b = gi(null, b, e, a, c);\n            break a;\n\n          case 14:\n            b = ii(null, b, e, lg(e.type, a), d, c);\n            break a;\n        }\n\n        throw Error(y(306, e, ""));\n      }\n\n      return b;\n\n    case 0:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), li(a, b, d, e, c);\n\n    case 1:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), pi(a, b, d, e, c);\n\n    case 3:\n      ri(b);\n      d = b.updateQueue;\n      if (null === a || null === d) throw Error(y(282));\n      d = b.pendingProps;\n      e = b.memoizedState;\n      e = null !== e ? e.element : null;\n      yg(a, b);\n      Cg(b, d, null, c);\n      d = b.memoizedState.element;\n      if (d === e) sh(), b = hi(a, b, c);else {\n        e = b.stateNode;\n        if (f = e.hydrate) kh = rf(b.stateNode.containerInfo.firstChild), jh = b, f = lh = !0;\n\n        if (f) {\n          a = e.mutableSourceEagerHydrationData;\n          if (null != a) for (e = 0; e < a.length; e += 2) f = a[e], f._workInProgressVersionPrimary = a[e + 1], th.push(f);\n          c = Zg(b, null, d, c);\n\n          for (b.child = c; c;) c.flags = c.flags & -3 | 1024, c = c.sibling;\n        } else fi(a, b, d, c), sh();\n\n        b = b.child;\n      }\n      return b;\n\n    case 5:\n      return gh(b), null === a && ph(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, nf(d, e) ? g = null : null !== f && nf(d, f) && (b.flags |= 16), oi(a, b), fi(a, b, g, c), b.child;\n\n    case 6:\n      return null === a && ph(b), null;\n\n    case 13:\n      return ti(a, b, c);\n\n    case 4:\n      return eh(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Yg(b, null, d, c) : fi(a, b, d, c), b.child;\n\n    case 11:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), gi(a, b, d, e, c);\n\n    case 7:\n      return fi(a, b, b.pendingProps, c), b.child;\n\n    case 8:\n      return fi(a, b, b.pendingProps.children, c), b.child;\n\n    case 12:\n      return fi(a, b, b.pendingProps.children, c), b.child;\n\n    case 10:\n      a: {\n        d = b.type._context;\n        e = b.pendingProps;\n        g = b.memoizedProps;\n        f = e.value;\n        var h = b.type._context;\n        I(mg, h._currentValue);\n        h._currentValue = f;\n        if (null !== g) if (h = g.value, f = He(h, f) ? 0 : ("function" === typeof d._calculateChangedBits ? d._calculateChangedBits(h, f) : 1073741823) | 0, 0 === f) {\n          if (g.children === e.children && !N.current) {\n            b = hi(a, b, c);\n            break a;\n          }\n        } else for (h = b.child, null !== h && (h.return = b); null !== h;) {\n          var k = h.dependencies;\n\n          if (null !== k) {\n            g = h.child;\n\n            for (var l = k.firstContext; null !== l;) {\n              if (l.context === d && 0 !== (l.observedBits & f)) {\n                1 === h.tag && (l = zg(-1, c & -c), l.tag = 2, Ag(h, l));\n                h.lanes |= c;\n                l = h.alternate;\n                null !== l && (l.lanes |= c);\n                sg(h.return, c);\n                k.lanes |= c;\n                break;\n              }\n\n              l = l.next;\n            }\n          } else g = 10 === h.tag ? h.type === b.type ? null : h.child : h.child;\n\n          if (null !== g) g.return = h;else for (g = h; null !== g;) {\n            if (g === b) {\n              g = null;\n              break;\n            }\n\n            h = g.sibling;\n\n            if (null !== h) {\n              h.return = g.return;\n              g = h;\n              break;\n            }\n\n            g = g.return;\n          }\n          h = g;\n        }\n        fi(a, b, e.children, c);\n        b = b.child;\n      }\n\n      return b;\n\n    case 9:\n      return e = b.type, f = b.pendingProps, d = f.children, tg(b, c), e = vg(e, f.unstable_observedBits), d = d(e), b.flags |= 1, fi(a, b, d, c), b.child;\n\n    case 14:\n      return e = b.type, f = lg(e, b.pendingProps), f = lg(e.type, f), ii(a, b, e, f, d, c);\n\n    case 15:\n      return ki(a, b, b.type, b.pendingProps, d, c);\n\n    case 17:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2), b.tag = 1, Ff(d) ? (a = !0, Jf(b)) : a = !1, tg(b, c), Mg(b, d, e), Og(b, d, e, c), qi(null, b, d, !0, a, c);\n\n    case 19:\n      return Ai(a, b, c);\n\n    case 23:\n      return mi(a, b, c);\n\n    case 24:\n      return mi(a, b, c);\n  }\n\n  throw Error(y(156, b.tag));\n};\n\nfunction ik(a, b, c, d) {\n  this.tag = a;\n  this.key = c;\n  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;\n  this.index = 0;\n  this.ref = null;\n  this.pendingProps = b;\n  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;\n  this.mode = d;\n  this.flags = 0;\n  this.lastEffect = this.firstEffect = this.nextEffect = null;\n  this.childLanes = this.lanes = 0;\n  this.alternate = null;\n}\n\nfunction nh(a, b, c, d) {\n  return new ik(a, b, c, d);\n}\n\nfunction ji(a) {\n  a = a.prototype;\n  return !(!a || !a.isReactComponent);\n}\n\nfunction hk(a) {\n  if ("function" === typeof a) return ji(a) ? 1 : 0;\n\n  if (void 0 !== a && null !== a) {\n    a = a.$$typeof;\n    if (a === Aa) return 11;\n    if (a === Da) return 14;\n  }\n\n  return 2;\n}\n\nfunction Tg(a, b) {\n  var c = a.alternate;\n  null === c ? (c = nh(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);\n  c.childLanes = a.childLanes;\n  c.lanes = a.lanes;\n  c.child = a.child;\n  c.memoizedProps = a.memoizedProps;\n  c.memoizedState = a.memoizedState;\n  c.updateQueue = a.updateQueue;\n  b = a.dependencies;\n  c.dependencies = null === b ? null : {\n    lanes: b.lanes,\n    firstContext: b.firstContext\n  };\n  c.sibling = a.sibling;\n  c.index = a.index;\n  c.ref = a.ref;\n  return c;\n}\n\nfunction Vg(a, b, c, d, e, f) {\n  var g = 2;\n  d = a;\n  if ("function" === typeof a) ji(a) && (g = 1);else if ("string" === typeof a) g = 5;else a: switch (a) {\n    case ua:\n      return Xg(c.children, e, f, b);\n\n    case Ha:\n      g = 8;\n      e |= 16;\n      break;\n\n    case wa:\n      g = 8;\n      e |= 1;\n      break;\n\n    case xa:\n      return a = nh(12, c, b, e | 8), a.elementType = xa, a.type = xa, a.lanes = f, a;\n\n    case Ba:\n      return a = nh(13, c, b, e), a.type = Ba, a.elementType = Ba, a.lanes = f, a;\n\n    case Ca:\n      return a = nh(19, c, b, e), a.elementType = Ca, a.lanes = f, a;\n\n    case Ia:\n      return vi(c, e, f, b);\n\n    case Ja:\n      return a = nh(24, c, b, e), a.elementType = Ja, a.lanes = f, a;\n\n    default:\n      if ("object" === typeof a && null !== a) switch (a.$$typeof) {\n        case ya:\n          g = 10;\n          break a;\n\n        case za:\n          g = 9;\n          break a;\n\n        case Aa:\n          g = 11;\n          break a;\n\n        case Da:\n          g = 14;\n          break a;\n\n        case Ea:\n          g = 16;\n          d = null;\n          break a;\n\n        case Fa:\n          g = 22;\n          break a;\n      }\n      throw Error(y(130, null == a ? a : typeof a, ""));\n  }\n  b = nh(g, c, b, e);\n  b.elementType = a;\n  b.type = d;\n  b.lanes = f;\n  return b;\n}\n\nfunction Xg(a, b, c, d) {\n  a = nh(7, a, d, b);\n  a.lanes = c;\n  return a;\n}\n\nfunction vi(a, b, c, d) {\n  a = nh(23, a, d, b);\n  a.elementType = Ia;\n  a.lanes = c;\n  return a;\n}\n\nfunction Ug(a, b, c) {\n  a = nh(6, a, null, b);\n  a.lanes = c;\n  return a;\n}\n\nfunction Wg(a, b, c) {\n  b = nh(4, null !== a.children ? a.children : [], a.key, b);\n  b.lanes = c;\n  b.stateNode = {\n    containerInfo: a.containerInfo,\n    pendingChildren: null,\n    implementation: a.implementation\n  };\n  return b;\n}\n\nfunction jk(a, b, c) {\n  this.tag = b;\n  this.containerInfo = a;\n  this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;\n  this.timeoutHandle = -1;\n  this.pendingContext = this.context = null;\n  this.hydrate = c;\n  this.callbackNode = null;\n  this.callbackPriority = 0;\n  this.eventTimes = Zc(0);\n  this.expirationTimes = Zc(-1);\n  this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;\n  this.entanglements = Zc(0);\n  this.mutableSourceEagerHydrationData = null;\n}\n\nfunction kk(a, b, c) {\n  var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;\n  return {\n    $$typeof: ta,\n    key: null == d ? null : "" + d,\n    children: a,\n    containerInfo: b,\n    implementation: c\n  };\n}\n\nfunction lk(a, b, c, d) {\n  var e = b.current,\n      f = Hg(),\n      g = Ig(e);\n\n  a: if (c) {\n    c = c._reactInternals;\n\n    b: {\n      if (Zb(c) !== c || 1 !== c.tag) throw Error(y(170));\n      var h = c;\n\n      do {\n        switch (h.tag) {\n          case 3:\n            h = h.stateNode.context;\n            break b;\n\n          case 1:\n            if (Ff(h.type)) {\n              h = h.stateNode.__reactInternalMemoizedMergedChildContext;\n              break b;\n            }\n\n        }\n\n        h = h.return;\n      } while (null !== h);\n\n      throw Error(y(171));\n    }\n\n    if (1 === c.tag) {\n      var k = c.type;\n\n      if (Ff(k)) {\n        c = If(c, k, h);\n        break a;\n      }\n    }\n\n    c = h;\n  } else c = Cf;\n\n  null === b.context ? b.context = c : b.pendingContext = c;\n  b = zg(f, g);\n  b.payload = {\n    element: a\n  };\n  d = void 0 === d ? null : d;\n  null !== d && (b.callback = d);\n  Ag(e, b);\n  Jg(e, g, f);\n  return g;\n}\n\nfunction mk(a) {\n  a = a.current;\n  if (!a.child) return null;\n\n  switch (a.child.tag) {\n    case 5:\n      return a.child.stateNode;\n\n    default:\n      return a.child.stateNode;\n  }\n}\n\nfunction nk(a, b) {\n  a = a.memoizedState;\n\n  if (null !== a && null !== a.dehydrated) {\n    var c = a.retryLane;\n    a.retryLane = 0 !== c && c < b ? c : b;\n  }\n}\n\nfunction ok(a, b) {\n  nk(a, b);\n  (a = a.alternate) && nk(a, b);\n}\n\nfunction pk() {\n  return null;\n}\n\nfunction qk(a, b, c) {\n  var d = null != c && null != c.hydrationOptions && c.hydrationOptions.mutableSources || null;\n  c = new jk(a, b, null != c && !0 === c.hydrate);\n  b = nh(3, null, null, 2 === b ? 7 : 1 === b ? 3 : 0);\n  c.current = b;\n  b.stateNode = c;\n  xg(b);\n  a[ff] = c.current;\n  cf(8 === a.nodeType ? a.parentNode : a);\n  if (d) for (a = 0; a < d.length; a++) {\n    b = d[a];\n    var e = b._getVersion;\n    e = e(b._source);\n    null == c.mutableSourceEagerHydrationData ? c.mutableSourceEagerHydrationData = [b, e] : c.mutableSourceEagerHydrationData.push(b, e);\n  }\n  this._internalRoot = c;\n}\n\nqk.prototype.render = function (a) {\n  lk(a, this._internalRoot, null, null);\n};\n\nqk.prototype.unmount = function () {\n  var a = this._internalRoot,\n      b = a.containerInfo;\n  lk(null, a, null, function () {\n    b[ff] = null;\n  });\n};\n\nfunction rk(a) {\n  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));\n}\n\nfunction sk(a, b) {\n  b || (b = a ? 9 === a.nodeType ? a.documentElement : a.firstChild : null, b = !(!b || 1 !== b.nodeType || !b.hasAttribute("data-reactroot")));\n  if (!b) for (var c; c = a.lastChild;) a.removeChild(c);\n  return new qk(a, 0, b ? {\n    hydrate: !0\n  } : void 0);\n}\n\nfunction tk(a, b, c, d, e) {\n  var f = c._reactRootContainer;\n\n  if (f) {\n    var g = f._internalRoot;\n\n    if ("function" === typeof e) {\n      var h = e;\n\n      e = function () {\n        var a = mk(g);\n        h.call(a);\n      };\n    }\n\n    lk(b, g, a, e);\n  } else {\n    f = c._reactRootContainer = sk(c, d);\n    g = f._internalRoot;\n\n    if ("function" === typeof e) {\n      var k = e;\n\n      e = function () {\n        var a = mk(g);\n        k.call(a);\n      };\n    }\n\n    Xj(function () {\n      lk(b, g, a, e);\n    });\n  }\n\n  return mk(g);\n}\n\nec = function (a) {\n  if (13 === a.tag) {\n    var b = Hg();\n    Jg(a, 4, b);\n    ok(a, 4);\n  }\n};\n\nfc = function (a) {\n  if (13 === a.tag) {\n    var b = Hg();\n    Jg(a, 67108864, b);\n    ok(a, 67108864);\n  }\n};\n\ngc = function (a) {\n  if (13 === a.tag) {\n    var b = Hg(),\n        c = Ig(a);\n    Jg(a, c, b);\n    ok(a, c);\n  }\n};\n\nhc = function (a, b) {\n  return b();\n};\n\nyb = function (a, b, c) {\n  switch (b) {\n    case "input":\n      ab(a, c);\n      b = c.name;\n\n      if ("radio" === c.type && null != b) {\n        for (c = a; c.parentNode;) c = c.parentNode;\n\n        c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + \'][type="radio"]\');\n\n        for (b = 0; b < c.length; b++) {\n          var d = c[b];\n\n          if (d !== a && d.form === a.form) {\n            var e = Db(d);\n            if (!e) throw Error(y(90));\n            Wa(d);\n            ab(d, e);\n          }\n        }\n      }\n\n      break;\n\n    case "textarea":\n      ib(a, c);\n      break;\n\n    case "select":\n      b = c.value, null != b && fb(a, !!c.multiple, b, !1);\n  }\n};\n\nGb = Wj;\n\nHb = function (a, b, c, d, e) {\n  var f = X;\n  X |= 4;\n\n  try {\n    return gg(98, a.bind(null, b, c, d, e));\n  } finally {\n    X = f, 0 === X && (wj(), ig());\n  }\n};\n\nIb = function () {\n  0 === (X & 49) && (Vj(), Oj());\n};\n\nJb = function (a, b) {\n  var c = X;\n  X |= 2;\n\n  try {\n    return a(b);\n  } finally {\n    X = c, 0 === X && (wj(), ig());\n  }\n};\n\nfunction uk(a, b) {\n  var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;\n  if (!rk(b)) throw Error(y(200));\n  return kk(a, b, null, c);\n}\n\nvar vk = {\n  Events: [Cb, ue, Db, Eb, Fb, Oj, {\n    current: !1\n  }]\n},\n    wk = {\n  findFiberByHostInstance: wc,\n  bundleType: 0,\n  version: "17.0.2",\n  rendererPackageName: "react-dom"\n};\nvar xk = {\n  bundleType: wk.bundleType,\n  version: wk.version,\n  rendererPackageName: wk.rendererPackageName,\n  rendererConfig: wk.rendererConfig,\n  overrideHookState: null,\n  overrideHookStateDeletePath: null,\n  overrideHookStateRenamePath: null,\n  overrideProps: null,\n  overridePropsDeletePath: null,\n  overridePropsRenamePath: null,\n  setSuspenseHandler: null,\n  scheduleUpdate: null,\n  currentDispatcherRef: ra.ReactCurrentDispatcher,\n  findHostInstanceByFiber: function (a) {\n    a = cc(a);\n    return null === a ? null : a.stateNode;\n  },\n  findFiberByHostInstance: wk.findFiberByHostInstance || pk,\n  findHostInstancesForRefresh: null,\n  scheduleRefresh: null,\n  scheduleRoot: null,\n  setRefreshHandler: null,\n  getCurrentFiber: null\n};\n\nif ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {\n  var yk = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (!yk.isDisabled && yk.supportsFiber) try {\n    Lf = yk.inject(xk), Mf = yk;\n  } catch (a) {}\n}\n\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = vk;\nexports.createPortal = uk;\n\nexports.findDOMNode = function (a) {\n  if (null == a) return null;\n  if (1 === a.nodeType) return a;\n  var b = a._reactInternals;\n\n  if (void 0 === b) {\n    if ("function" === typeof a.render) throw Error(y(188));\n    throw Error(y(268, Object.keys(a)));\n  }\n\n  a = cc(b);\n  a = null === a ? null : a.stateNode;\n  return a;\n};\n\nexports.flushSync = function (a, b) {\n  var c = X;\n  if (0 !== (c & 48)) return a(b);\n  X |= 1;\n\n  try {\n    if (a) return gg(99, a.bind(null, b));\n  } finally {\n    X = c, ig();\n  }\n};\n\nexports.hydrate = function (a, b, c) {\n  if (!rk(b)) throw Error(y(200));\n  return tk(null, a, b, !0, c);\n};\n\nexports.render = function (a, b, c) {\n  if (!rk(b)) throw Error(y(200));\n  return tk(null, a, b, !1, c);\n};\n\nexports.unmountComponentAtNode = function (a) {\n  if (!rk(a)) throw Error(y(40));\n  return a._reactRootContainer ? (Xj(function () {\n    tk(null, null, a, !1, function () {\n      a._reactRootContainer = null;\n      a[ff] = null;\n    });\n  }), !0) : !1;\n};\n\nexports.unstable_batchedUpdates = Wj;\n\nexports.unstable_createPortal = function (a, b) {\n  return uk(a, b, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);\n};\n\nexports.unstable_renderSubtreeIntoContainer = function (a, b, c, d) {\n  if (!rk(c)) throw Error(y(200));\n  if (null == a || void 0 === a._reactInternals) throw Error(y(38));\n  return tk(a, b, c, !1, d);\n};\n\nexports.version = "17.0.2";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3748\n')},6116:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {\n    return;\n  }\n\n  if (false) {}\n\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (true) {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = __webpack_require__(3748);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYW5tYXJjaGl2ZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanM/OGJjOCJdLCJuYW1lcyI6WyJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsInByb2Nlc3MiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLFNBQVNBLFFBQVQsR0FBb0I7QUFDbEI7QUFDQSxNQUNFLE9BQU9DLDhCQUFQLEtBQTBDLFdBQTFDLElBQ0EsT0FBT0EsOEJBQThCLENBQUNELFFBQXRDLEtBQW1ELFVBRnJELEVBR0U7QUFDQTtBQUNEOztBQUNELE1BQUlFLEtBQUosRUFBMkMsRUFTMUM7O0FBQ0QsTUFBSTtBQUNGO0FBQ0FELGtDQUE4QixDQUFDRCxRQUEvQixDQUF3Q0EsUUFBeEM7QUFDRCxHQUhELENBR0UsT0FBT0csR0FBUCxFQUFZO0FBQ1o7QUFDQTtBQUNBQyxXQUFPLENBQUNDLEtBQVIsQ0FBY0YsR0FBZDtBQUNEO0FBQ0Y7O0FBRUQsSUFBSUQsSUFBSixFQUEyQztBQUN6QztBQUNBO0FBQ0FGLFVBQVE7QUFDUk0sNENBQUE7QUFDRCxDQUxELE1BS08iLCJmaWxlIjoiNjExNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6116\n")},6751:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('/** @license React v17.0.2\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar l = __webpack_require__(7347),\n    n = 60103,\n    p = 60106;\n\nexports.Fragment = 60107;\nexports.StrictMode = 60108;\nexports.Profiler = 60114;\nvar q = 60109,\n    r = 60110,\n    t = 60112;\nexports.Suspense = 60113;\nvar u = 60115,\n    v = 60116;\n\nif ("function" === typeof Symbol && Symbol.for) {\n  var w = Symbol.for;\n  n = w("react.element");\n  p = w("react.portal");\n  exports.Fragment = w("react.fragment");\n  exports.StrictMode = w("react.strict_mode");\n  exports.Profiler = w("react.profiler");\n  q = w("react.provider");\n  r = w("react.context");\n  t = w("react.forward_ref");\n  exports.Suspense = w("react.suspense");\n  u = w("react.memo");\n  v = w("react.lazy");\n}\n\nvar x = "function" === typeof Symbol && Symbol.iterator;\n\nfunction y(a) {\n  if (null === a || "object" !== typeof a) return null;\n  a = x && a[x] || a["@@iterator"];\n  return "function" === typeof a ? a : null;\n}\n\nfunction z(a) {\n  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b += "&args[]=" + encodeURIComponent(arguments[c]);\n\n  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";\n}\n\nvar A = {\n  isMounted: function () {\n    return !1;\n  },\n  enqueueForceUpdate: function () {},\n  enqueueReplaceState: function () {},\n  enqueueSetState: function () {}\n},\n    B = {};\n\nfunction C(a, b, c) {\n  this.props = a;\n  this.context = b;\n  this.refs = B;\n  this.updater = c || A;\n}\n\nC.prototype.isReactComponent = {};\n\nC.prototype.setState = function (a, b) {\n  if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error(z(85));\n  this.updater.enqueueSetState(this, a, b, "setState");\n};\n\nC.prototype.forceUpdate = function (a) {\n  this.updater.enqueueForceUpdate(this, a, "forceUpdate");\n};\n\nfunction D() {}\n\nD.prototype = C.prototype;\n\nfunction E(a, b, c) {\n  this.props = a;\n  this.context = b;\n  this.refs = B;\n  this.updater = c || A;\n}\n\nvar F = E.prototype = new D();\nF.constructor = E;\nl(F, C.prototype);\nF.isPureReactComponent = !0;\nvar G = {\n  current: null\n},\n    H = Object.prototype.hasOwnProperty,\n    I = {\n  key: !0,\n  ref: !0,\n  __self: !0,\n  __source: !0\n};\n\nfunction J(a, b, c) {\n  var e,\n      d = {},\n      k = null,\n      h = null;\n  if (null != b) for (e in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) H.call(b, e) && !I.hasOwnProperty(e) && (d[e] = b[e]);\n  var g = arguments.length - 2;\n  if (1 === g) d.children = c;else if (1 < g) {\n    for (var f = Array(g), m = 0; m < g; m++) f[m] = arguments[m + 2];\n\n    d.children = f;\n  }\n  if (a && a.defaultProps) for (e in g = a.defaultProps, g) void 0 === d[e] && (d[e] = g[e]);\n  return {\n    $$typeof: n,\n    type: a,\n    key: k,\n    ref: h,\n    props: d,\n    _owner: G.current\n  };\n}\n\nfunction K(a, b) {\n  return {\n    $$typeof: n,\n    type: a.type,\n    key: b,\n    ref: a.ref,\n    props: a.props,\n    _owner: a._owner\n  };\n}\n\nfunction L(a) {\n  return "object" === typeof a && null !== a && a.$$typeof === n;\n}\n\nfunction escape(a) {\n  var b = {\n    "=": "=0",\n    ":": "=2"\n  };\n  return "$" + a.replace(/[=:]/g, function (a) {\n    return b[a];\n  });\n}\n\nvar M = /\\/+/g;\n\nfunction N(a, b) {\n  return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);\n}\n\nfunction O(a, b, c, e, d) {\n  var k = typeof a;\n  if ("undefined" === k || "boolean" === k) a = null;\n  var h = !1;\n  if (null === a) h = !0;else switch (k) {\n    case "string":\n    case "number":\n      h = !0;\n      break;\n\n    case "object":\n      switch (a.$$typeof) {\n        case n:\n        case p:\n          h = !0;\n      }\n\n  }\n  if (h) return h = a, d = d(h), a = "" === e ? "." + N(h, 0) : e, Array.isArray(d) ? (c = "", null != a && (c = a.replace(M, "$&/") + "/"), O(d, b, c, "", function (a) {\n    return a;\n  })) : null != d && (L(d) && (d = K(d, c + (!d.key || h && h.key === d.key ? "" : ("" + d.key).replace(M, "$&/") + "/") + a)), b.push(d)), 1;\n  h = 0;\n  e = "" === e ? "." : e + ":";\n  if (Array.isArray(a)) for (var g = 0; g < a.length; g++) {\n    k = a[g];\n    var f = e + N(k, g);\n    h += O(k, b, c, f, d);\n  } else if (f = y(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) k = k.value, f = e + N(k, g++), h += O(k, b, c, f, d);else if ("object" === k) throw b = "" + a, Error(z(31, "[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b));\n  return h;\n}\n\nfunction P(a, b, c) {\n  if (null == a) return a;\n  var e = [],\n      d = 0;\n  O(a, e, "", "", function (a) {\n    return b.call(c, a, d++);\n  });\n  return e;\n}\n\nfunction Q(a) {\n  if (-1 === a._status) {\n    var b = a._result;\n    b = b();\n    a._status = 0;\n    a._result = b;\n    b.then(function (b) {\n      0 === a._status && (b = b.default, a._status = 1, a._result = b);\n    }, function (b) {\n      0 === a._status && (a._status = 2, a._result = b);\n    });\n  }\n\n  if (1 === a._status) return a._result;\n  throw a._result;\n}\n\nvar R = {\n  current: null\n};\n\nfunction S() {\n  var a = R.current;\n  if (null === a) throw Error(z(321));\n  return a;\n}\n\nvar T = {\n  ReactCurrentDispatcher: R,\n  ReactCurrentBatchConfig: {\n    transition: 0\n  },\n  ReactCurrentOwner: G,\n  IsSomeRendererActing: {\n    current: !1\n  },\n  assign: l\n};\nexports.Children = {\n  map: P,\n  forEach: function (a, b, c) {\n    P(a, function () {\n      b.apply(this, arguments);\n    }, c);\n  },\n  count: function (a) {\n    var b = 0;\n    P(a, function () {\n      b++;\n    });\n    return b;\n  },\n  toArray: function (a) {\n    return P(a, function (a) {\n      return a;\n    }) || [];\n  },\n  only: function (a) {\n    if (!L(a)) throw Error(z(143));\n    return a;\n  }\n};\nexports.Component = C;\nexports.PureComponent = E;\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T;\n\nexports.cloneElement = function (a, b, c) {\n  if (null === a || void 0 === a) throw Error(z(267, a));\n  var e = l({}, a.props),\n      d = a.key,\n      k = a.ref,\n      h = a._owner;\n\n  if (null != b) {\n    void 0 !== b.ref && (k = b.ref, h = G.current);\n    void 0 !== b.key && (d = "" + b.key);\n    if (a.type && a.type.defaultProps) var g = a.type.defaultProps;\n\n    for (f in b) H.call(b, f) && !I.hasOwnProperty(f) && (e[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);\n  }\n\n  var f = arguments.length - 2;\n  if (1 === f) e.children = c;else if (1 < f) {\n    g = Array(f);\n\n    for (var m = 0; m < f; m++) g[m] = arguments[m + 2];\n\n    e.children = g;\n  }\n  return {\n    $$typeof: n,\n    type: a.type,\n    key: d,\n    ref: k,\n    props: e,\n    _owner: h\n  };\n};\n\nexports.createContext = function (a, b) {\n  void 0 === b && (b = null);\n  a = {\n    $$typeof: r,\n    _calculateChangedBits: b,\n    _currentValue: a,\n    _currentValue2: a,\n    _threadCount: 0,\n    Provider: null,\n    Consumer: null\n  };\n  a.Provider = {\n    $$typeof: q,\n    _context: a\n  };\n  return a.Consumer = a;\n};\n\nexports.createElement = J;\n\nexports.createFactory = function (a) {\n  var b = J.bind(null, a);\n  b.type = a;\n  return b;\n};\n\nexports.createRef = function () {\n  return {\n    current: null\n  };\n};\n\nexports.forwardRef = function (a) {\n  return {\n    $$typeof: t,\n    render: a\n  };\n};\n\nexports.isValidElement = L;\n\nexports.lazy = function (a) {\n  return {\n    $$typeof: v,\n    _payload: {\n      _status: -1,\n      _result: a\n    },\n    _init: Q\n  };\n};\n\nexports.memo = function (a, b) {\n  return {\n    $$typeof: u,\n    type: a,\n    compare: void 0 === b ? null : b\n  };\n};\n\nexports.useCallback = function (a, b) {\n  return S().useCallback(a, b);\n};\n\nexports.useContext = function (a, b) {\n  return S().useContext(a, b);\n};\n\nexports.useDebugValue = function () {};\n\nexports.useEffect = function (a, b) {\n  return S().useEffect(a, b);\n};\n\nexports.useImperativeHandle = function (a, b, c) {\n  return S().useImperativeHandle(a, b, c);\n};\n\nexports.useLayoutEffect = function (a, b) {\n  return S().useLayoutEffect(a, b);\n};\n\nexports.useMemo = function (a, b) {\n  return S().useMemo(a, b);\n};\n\nexports.useReducer = function (a, b, c) {\n  return S().useReducer(a, b, c);\n};\n\nexports.useRef = function (a) {\n  return S().useRef(a);\n};\n\nexports.useState = function (a) {\n  return S().useState(a);\n};\n\nexports.version = "17.0.2";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6751\n')},5466:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(6751);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYW5tYXJjaGl2ZS8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcz9hYjViIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLElBQUosRUFBMkM7QUFDekNDLDRDQUFBO0FBQ0QsQ0FGRCxNQUVPIiwiZmlsZSI6IjU0NjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5466\n")},8794:(__unused_webpack_module,exports)=>{"use strict";eval('/** @license React v0.20.2\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar f, g, h, k;\n\nif ("object" === typeof performance && "function" === typeof performance.now) {\n  var l = performance;\n\n  exports.unstable_now = function () {\n    return l.now();\n  };\n} else {\n  var p = Date,\n      q = p.now();\n\n  exports.unstable_now = function () {\n    return p.now() - q;\n  };\n}\n\nif ("undefined" === typeof window || "function" !== typeof MessageChannel) {\n  var t = null,\n      u = null,\n      w = function () {\n    if (null !== t) try {\n      var a = exports.unstable_now();\n      t(!0, a);\n      t = null;\n    } catch (b) {\n      throw setTimeout(w, 0), b;\n    }\n  };\n\n  f = function (a) {\n    null !== t ? setTimeout(f, 0, a) : (t = a, setTimeout(w, 0));\n  };\n\n  g = function (a, b) {\n    u = setTimeout(a, b);\n  };\n\n  h = function () {\n    clearTimeout(u);\n  };\n\n  exports.unstable_shouldYield = function () {\n    return !1;\n  };\n\n  k = exports.unstable_forceFrameRate = function () {};\n} else {\n  var x = window.setTimeout,\n      y = window.clearTimeout;\n\n  if ("undefined" !== typeof console) {\n    var z = window.cancelAnimationFrame;\n    "function" !== typeof window.requestAnimationFrame && console.error("This browser doesn\'t support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");\n    "function" !== typeof z && console.error("This browser doesn\'t support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");\n  }\n\n  var A = !1,\n      B = null,\n      C = -1,\n      D = 5,\n      E = 0;\n\n  exports.unstable_shouldYield = function () {\n    return exports.unstable_now() >= E;\n  };\n\n  k = function () {};\n\n  exports.unstable_forceFrameRate = function (a) {\n    0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : D = 0 < a ? Math.floor(1E3 / a) : 5;\n  };\n\n  var F = new MessageChannel(),\n      G = F.port2;\n\n  F.port1.onmessage = function () {\n    if (null !== B) {\n      var a = exports.unstable_now();\n      E = a + D;\n\n      try {\n        B(!0, a) ? G.postMessage(null) : (A = !1, B = null);\n      } catch (b) {\n        throw G.postMessage(null), b;\n      }\n    } else A = !1;\n  };\n\n  f = function (a) {\n    B = a;\n    A || (A = !0, G.postMessage(null));\n  };\n\n  g = function (a, b) {\n    C = x(function () {\n      a(exports.unstable_now());\n    }, b);\n  };\n\n  h = function () {\n    y(C);\n    C = -1;\n  };\n}\n\nfunction H(a, b) {\n  var c = a.length;\n  a.push(b);\n\n  a: for (;;) {\n    var d = c - 1 >>> 1,\n        e = a[d];\n    if (void 0 !== e && 0 < I(e, b)) a[d] = b, a[c] = e, c = d;else break a;\n  }\n}\n\nfunction J(a) {\n  a = a[0];\n  return void 0 === a ? null : a;\n}\n\nfunction K(a) {\n  var b = a[0];\n\n  if (void 0 !== b) {\n    var c = a.pop();\n\n    if (c !== b) {\n      a[0] = c;\n\n      a: for (var d = 0, e = a.length; d < e;) {\n        var m = 2 * (d + 1) - 1,\n            n = a[m],\n            v = m + 1,\n            r = a[v];\n        if (void 0 !== n && 0 > I(n, c)) void 0 !== r && 0 > I(r, n) ? (a[d] = r, a[v] = c, d = v) : (a[d] = n, a[m] = c, d = m);else if (void 0 !== r && 0 > I(r, c)) a[d] = r, a[v] = c, d = v;else break a;\n      }\n    }\n\n    return b;\n  }\n\n  return null;\n}\n\nfunction I(a, b) {\n  var c = a.sortIndex - b.sortIndex;\n  return 0 !== c ? c : a.id - b.id;\n}\n\nvar L = [],\n    M = [],\n    N = 1,\n    O = null,\n    P = 3,\n    Q = !1,\n    R = !1,\n    S = !1;\n\nfunction T(a) {\n  for (var b = J(M); null !== b;) {\n    if (null === b.callback) K(M);else if (b.startTime <= a) K(M), b.sortIndex = b.expirationTime, H(L, b);else break;\n    b = J(M);\n  }\n}\n\nfunction U(a) {\n  S = !1;\n  T(a);\n  if (!R) if (null !== J(L)) R = !0, f(V);else {\n    var b = J(M);\n    null !== b && g(U, b.startTime - a);\n  }\n}\n\nfunction V(a, b) {\n  R = !1;\n  S && (S = !1, h());\n  Q = !0;\n  var c = P;\n\n  try {\n    T(b);\n\n    for (O = J(L); null !== O && (!(O.expirationTime > b) || a && !exports.unstable_shouldYield());) {\n      var d = O.callback;\n\n      if ("function" === typeof d) {\n        O.callback = null;\n        P = O.priorityLevel;\n        var e = d(O.expirationTime <= b);\n        b = exports.unstable_now();\n        "function" === typeof e ? O.callback = e : O === J(L) && K(L);\n        T(b);\n      } else K(L);\n\n      O = J(L);\n    }\n\n    if (null !== O) var m = !0;else {\n      var n = J(M);\n      null !== n && g(U, n.startTime - b);\n      m = !1;\n    }\n    return m;\n  } finally {\n    O = null, P = c, Q = !1;\n  }\n}\n\nvar W = k;\nexports.unstable_IdlePriority = 5;\nexports.unstable_ImmediatePriority = 1;\nexports.unstable_LowPriority = 4;\nexports.unstable_NormalPriority = 3;\nexports.unstable_Profiling = null;\nexports.unstable_UserBlockingPriority = 2;\n\nexports.unstable_cancelCallback = function (a) {\n  a.callback = null;\n};\n\nexports.unstable_continueExecution = function () {\n  R || Q || (R = !0, f(V));\n};\n\nexports.unstable_getCurrentPriorityLevel = function () {\n  return P;\n};\n\nexports.unstable_getFirstCallbackNode = function () {\n  return J(L);\n};\n\nexports.unstable_next = function (a) {\n  switch (P) {\n    case 1:\n    case 2:\n    case 3:\n      var b = 3;\n      break;\n\n    default:\n      b = P;\n  }\n\n  var c = P;\n  P = b;\n\n  try {\n    return a();\n  } finally {\n    P = c;\n  }\n};\n\nexports.unstable_pauseExecution = function () {};\n\nexports.unstable_requestPaint = W;\n\nexports.unstable_runWithPriority = function (a, b) {\n  switch (a) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n      break;\n\n    default:\n      a = 3;\n  }\n\n  var c = P;\n  P = a;\n\n  try {\n    return b();\n  } finally {\n    P = c;\n  }\n};\n\nexports.unstable_scheduleCallback = function (a, b, c) {\n  var d = exports.unstable_now();\n  "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;\n\n  switch (a) {\n    case 1:\n      var e = -1;\n      break;\n\n    case 2:\n      e = 250;\n      break;\n\n    case 5:\n      e = 1073741823;\n      break;\n\n    case 4:\n      e = 1E4;\n      break;\n\n    default:\n      e = 5E3;\n  }\n\n  e = c + e;\n  a = {\n    id: N++,\n    callback: b,\n    priorityLevel: a,\n    startTime: c,\n    expirationTime: e,\n    sortIndex: -1\n  };\n  c > d ? (a.sortIndex = c, H(M, a), null === J(L) && a === J(M) && (S ? h() : S = !0, g(U, c - d))) : (a.sortIndex = e, H(L, a), R || Q || (R = !0, f(V)));\n  return a;\n};\n\nexports.unstable_wrapCallback = function (a) {\n  var b = P;\n  return function () {\n    var c = P;\n    P = b;\n\n    try {\n      return a.apply(this, arguments);\n    } finally {\n      P = c;\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8794\n')},7767:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(8794);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYW5tYXJjaGl2ZS8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanM/NDAyOSJdLCJuYW1lcyI6WyJwcm9jZXNzIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFKLEVBQTJDO0FBQ3pDQyw0Q0FBQTtBQUNELENBRkQsTUFFTyIsImZpbGUiOiI3NzY3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7767\n")},5405:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony import */ var _react_pdf_viewer_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2672);\n/* harmony import */ var _react_pdf_viewer_toolbar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7990);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5466);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6116);\n\n\n\n\n\n\n\nconst ArticleViewer = ({\n  src\n}) => {\n  const toolbar = (0,_react_pdf_viewer_toolbar__WEBPACK_IMPORTED_MODULE_1__.toolbarPlugin)();\n  const {\n    Toolbar\n  } = toolbar;\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement(_react_pdf_viewer_core__WEBPACK_IMPORTED_MODULE_0__.Worker, {\n    workerUrl: "https://unpkg.com/pdfjs-dist@2.6.347/build/pdf.worker.min.js"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement("div", {\n    className: "rpv-core__viewer",\n    style: {\n      display: "flex",\n      flexDirection: "column",\n      height: "100%"\n    }\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement("div", {\n    class: "p-2 d-flex justify-content-center"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement(Toolbar, null, props => {\n    const {\n      EnterFullScreen,\n      ZoomIn,\n      ZoomOut\n    } = props;\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement("div", {\n      className: "px-1"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement(ZoomOut, null)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement("div", {\n      className: "px-1"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement(ZoomIn, null)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement("div", {\n      className: "px-1"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement(EnterFullScreen, null)));\n  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement("div", {\n    style: {\n      flex: 1,\n      overflow: "hidden"\n    }\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement(_react_pdf_viewer_core__WEBPACK_IMPORTED_MODULE_0__.Viewer, {\n    plugins: [toolbar],\n    fileUrl: src\n  }))));\n};\n\nfor (const target of document.querySelectorAll("[data-pdf]")) {\n  const pdf = target.dataset.pdf;\n  const isHtml = pdf.endsWith(".html") || pdf.endsWith("htm");\n\n  if (isHtml) {\n    (0,react_dom__WEBPACK_IMPORTED_MODULE_3__.render)( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement("iframe", {\n      src: pdf,\n      class: "w-100 h-100 overflow-y-auto"\n    }), target);\n  } else {\n    (0,react_dom__WEBPACK_IMPORTED_MODULE_3__.render)( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement(ArticleViewer, {\n      logo: target.dataset.logo,\n      src: pdf\n    }), target);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYW5tYXJjaGl2ZS8uL3B1YmxpY2F0aW9ucy9qcy9wZGYuanM/YmI1NyJdLCJuYW1lcyI6WyJBcnRpY2xlVmlld2VyIiwic3JjIiwidG9vbGJhciIsInRvb2xiYXJQbHVnaW4iLCJUb29sYmFyIiwiZGlzcGxheSIsImZsZXhEaXJlY3Rpb24iLCJoZWlnaHQiLCJwcm9wcyIsIkVudGVyRnVsbFNjcmVlbiIsIlpvb21JbiIsIlpvb21PdXQiLCJmbGV4Iiwib3ZlcmZsb3ciLCJ0YXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJwZGYiLCJkYXRhc2V0IiwiaXNIdG1sIiwiZW5kc1dpdGgiLCJyZW5kZXIiLCJsb2dvIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBOztBQUVBLE1BQU1BLGFBQWEsR0FBRyxDQUFDO0FBQUVDO0FBQUYsQ0FBRCxLQUFhO0FBQ2pDLFFBQU1DLE9BQU8sR0FBR0Msd0VBQWEsRUFBN0I7QUFDQSxRQUFNO0FBQUVDO0FBQUYsTUFBY0YsT0FBcEI7QUFFQSxzQkFDRSxpREFBQywwREFBRDtBQUFRLGFBQVMsRUFBQztBQUFsQixrQkFDRTtBQUNFLGFBQVMsRUFBQyxrQkFEWjtBQUVFLFNBQUssRUFBRTtBQUFFRyxhQUFPLEVBQUUsTUFBWDtBQUFtQkMsbUJBQWEsRUFBRSxRQUFsQztBQUE0Q0MsWUFBTSxFQUFFO0FBQXBEO0FBRlQsa0JBSUU7QUFBSyxTQUFLLEVBQUM7QUFBWCxrQkFDRSxpREFBQyxPQUFELFFBQ0lDLEtBQUQsSUFBVztBQUNWLFVBQU07QUFBRUMscUJBQUY7QUFBbUJDLFlBQW5CO0FBQTJCQztBQUEzQixRQUF1Q0gsS0FBN0M7QUFDQSx3QkFDRSxpSEFDRTtBQUFLLGVBQVMsRUFBQztBQUFmLG9CQUNFLGlEQUFDLE9BQUQsT0FERixDQURGLGVBSUU7QUFBSyxlQUFTLEVBQUM7QUFBZixvQkFDRSxpREFBQyxNQUFELE9BREYsQ0FKRixlQU9FO0FBQUssZUFBUyxFQUFDO0FBQWYsb0JBQ0UsaURBQUMsZUFBRCxPQURGLENBUEYsQ0FERjtBQWFELEdBaEJILENBREYsQ0FKRixlQXlCRTtBQUFLLFNBQUssRUFBRTtBQUFFSSxVQUFJLEVBQUUsQ0FBUjtBQUFXQyxjQUFRLEVBQUU7QUFBckI7QUFBWixrQkFDRSxpREFBQywwREFBRDtBQUFRLFdBQU8sRUFBRSxDQUFDWCxPQUFELENBQWpCO0FBQTRCLFdBQU8sRUFBRUQ7QUFBckMsSUFERixDQXpCRixDQURGLENBREY7QUFpQ0QsQ0FyQ0Q7O0FBdUNBLEtBQUssTUFBTWEsTUFBWCxJQUFxQkMsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixZQUExQixDQUFyQixFQUE4RDtBQUM1RCxRQUFNQyxHQUFHLEdBQUdILE1BQU0sQ0FBQ0ksT0FBUCxDQUFlRCxHQUEzQjtBQUNBLFFBQU1FLE1BQU0sR0FBR0YsR0FBRyxDQUFDRyxRQUFKLENBQWEsT0FBYixLQUF5QkgsR0FBRyxDQUFDRyxRQUFKLENBQWEsS0FBYixDQUF4Qzs7QUFFQSxNQUFJRCxNQUFKLEVBQVk7QUFDVkUscURBQU0sZUFBQztBQUFRLFNBQUcsRUFBRUosR0FBYjtBQUFrQixXQUFLLEVBQUM7QUFBeEIsTUFBRCxFQUEyREgsTUFBM0QsQ0FBTjtBQUNELEdBRkQsTUFFTztBQUNMTyxxREFBTSxlQUFDLGlEQUFDLGFBQUQ7QUFBZSxVQUFJLEVBQUVQLE1BQU0sQ0FBQ0ksT0FBUCxDQUFlSSxJQUFwQztBQUEwQyxTQUFHLEVBQUVMO0FBQS9DLE1BQUQsRUFBeURILE1BQXpELENBQU47QUFDRDtBQUNGIiwiZmlsZSI6IjU0MDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCJAcmVhY3QtcGRmLXZpZXdlci9jb3JlL2xpYi9zdHlsZXMvaW5kZXguY3NzXCI7XG5pbXBvcnQgXCJAcmVhY3QtcGRmLXZpZXdlci90b29sYmFyL2xpYi9zdHlsZXMvaW5kZXguY3NzXCI7XG5cbmltcG9ydCB7IFZpZXdlciwgV29ya2VyIH0gZnJvbSBcIkByZWFjdC1wZGYtdmlld2VyL2NvcmVcIjtcbmltcG9ydCB7IHRvb2xiYXJQbHVnaW4gfSBmcm9tIFwiQHJlYWN0LXBkZi12aWV3ZXIvdG9vbGJhclwiO1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwicmVhY3QtZG9tXCI7XG5cbmNvbnN0IEFydGljbGVWaWV3ZXIgPSAoeyBzcmMgfSkgPT4ge1xuICBjb25zdCB0b29sYmFyID0gdG9vbGJhclBsdWdpbigpO1xuICBjb25zdCB7IFRvb2xiYXIgfSA9IHRvb2xiYXI7XG5cbiAgcmV0dXJuIChcbiAgICA8V29ya2VyIHdvcmtlclVybD1cImh0dHBzOi8vdW5wa2cuY29tL3BkZmpzLWRpc3RAMi42LjM0Ny9idWlsZC9wZGYud29ya2VyLm1pbi5qc1wiPlxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9XCJycHYtY29yZV9fdmlld2VyXCJcbiAgICAgICAgc3R5bGU9e3sgZGlzcGxheTogXCJmbGV4XCIsIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsIGhlaWdodDogXCIxMDAlXCIgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdiBjbGFzcz1cInAtMiBkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlclwiPlxuICAgICAgICAgIDxUb29sYmFyPlxuICAgICAgICAgICAgeyhwcm9wcykgPT4ge1xuICAgICAgICAgICAgICBjb25zdCB7IEVudGVyRnVsbFNjcmVlbiwgWm9vbUluLCBab29tT3V0IH0gPSBwcm9wcztcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJweC0xXCI+XG4gICAgICAgICAgICAgICAgICAgIDxab29tT3V0IC8+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHgtMVwiPlxuICAgICAgICAgICAgICAgICAgICA8Wm9vbUluIC8+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHgtMVwiPlxuICAgICAgICAgICAgICAgICAgICA8RW50ZXJGdWxsU2NyZWVuIC8+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPC9Ub29sYmFyPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGZsZXg6IDEsIG92ZXJmbG93OiBcImhpZGRlblwiIH19PlxuICAgICAgICAgIDxWaWV3ZXIgcGx1Z2lucz17W3Rvb2xiYXJdfSBmaWxlVXJsPXtzcmN9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9Xb3JrZXI+XG4gICk7XG59O1xuXG5mb3IgKGNvbnN0IHRhcmdldCBvZiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtcGRmXVwiKSkge1xuICBjb25zdCBwZGYgPSB0YXJnZXQuZGF0YXNldC5wZGY7XG4gIGNvbnN0IGlzSHRtbCA9IHBkZi5lbmRzV2l0aChcIi5odG1sXCIpIHx8IHBkZi5lbmRzV2l0aChcImh0bVwiKTtcblxuICBpZiAoaXNIdG1sKSB7XG4gICAgcmVuZGVyKDxpZnJhbWUgc3JjPXtwZGZ9IGNsYXNzPVwidy0xMDAgaC0xMDAgb3ZlcmZsb3cteS1hdXRvXCIgLz4sIHRhcmdldCk7XG4gIH0gZWxzZSB7XG4gICAgcmVuZGVyKDxBcnRpY2xlVmlld2VyIGxvZ289e3RhcmdldC5kYXRhc2V0LmxvZ299IHNyYz17cGRmfSAvPiwgdGFyZ2V0KTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5405\n')},7838:()=>{"use strict";eval("// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYW5tYXJjaGl2ZS8uL3B1YmxpY2F0aW9ucy9zY3NzL3BkZi5zY3NzPzJhMjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNzgzOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7838\n")},3414:()=>{},172:()=>{},2001:()=>{},3779:()=>{},6558:()=>{},2258:()=>{}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q].call(B.exports,B,B.exports,__webpack_require__),B.exports}__webpack_require__(5405);var __webpack_exports__=__webpack_require__(7838)})();